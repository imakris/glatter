/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_GL
#if defined(__gl31_h_)
#if defined(GL_ES_VERSION_2_0)
#ifndef glActiveTexture
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#ifndef glAttachShader
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#ifndef glBindAttribLocation
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#ifndef glBindBuffer
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#ifndef glBindFramebuffer
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#ifndef glBindRenderbuffer
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#ifndef glBindTexture
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#ifndef glBlendColor
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#ifndef glBlendEquation
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#ifndef glBlendEquationSeparate
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#ifndef glBlendFunc
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#ifndef glBlendFuncSeparate
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#ifndef glBufferData
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#ifndef glBufferSubData
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#ifndef glCheckFramebufferStatus
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#ifndef glClear
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#ifndef glClearColor
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#ifndef glClearDepthf
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#ifndef glClearStencil
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#ifndef glColorMask
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#ifndef glCompileShader
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#ifndef glCompressedTexImage2D
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCompressedTexSubImage2D
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCopyTexImage2D
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#ifndef glCopyTexSubImage2D
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glCreateProgram
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glCreateProgram_debug(const char* file, int line);
#ifndef glCreateShader
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#ifndef glCullFace
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#ifndef glDeleteBuffers
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#ifndef glDeleteFramebuffers
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#ifndef glDeleteProgram
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#ifndef glDeleteRenderbuffers
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#ifndef glDeleteShader
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#ifndef glDeleteTextures
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#ifndef glDepthFunc
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#ifndef glDepthMask
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#ifndef glDepthRangef
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#ifndef glDetachShader
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#ifndef glDisable
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#ifndef glDisableVertexAttribArray
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#ifndef glDrawArrays
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#ifndef glDrawElements
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#ifndef glEnable
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#ifndef glEnableVertexAttribArray
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#ifndef glFinish
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFinish_debug(const char* file, int line);
#ifndef glFlush
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFlush_debug(const char* file, int line);
#ifndef glFramebufferRenderbuffer
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#ifndef glFramebufferTexture2D
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#ifndef glFrontFace
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#ifndef glGenBuffers
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#ifndef glGenFramebuffers
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#ifndef glGenRenderbuffers
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#ifndef glGenTextures
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#ifndef glGenerateMipmap
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#ifndef glGetActiveAttrib
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#ifndef glGetActiveUniform
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#ifndef glGetAttachedShaders
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#ifndef glGetAttribLocation
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#ifndef glGetBooleanv
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#ifndef glGetBufferParameteriv
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetError
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glGetError_debug(const char* file, int line);
#ifndef glGetFloatv
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#ifndef glGetFramebufferAttachmentParameteriv
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetIntegerv
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#ifndef glGetProgramInfoLog
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#ifndef glGetProgramiv
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetRenderbufferParameteriv
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetShaderInfoLog
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#ifndef glGetShaderPrecisionFormat
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#ifndef glGetShaderSource
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#ifndef glGetShaderiv
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetString
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#ifndef glGetTexParameterfv
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetTexParameteriv
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetUniformLocation
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#ifndef glGetUniformfv
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#ifndef glGetUniformiv
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#ifndef glGetVertexAttribPointerv
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#ifndef glGetVertexAttribfv
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetVertexAttribiv
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#ifndef glHint
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#ifndef glIsBuffer
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#ifndef glIsEnabled
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#ifndef glIsFramebuffer
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#ifndef glIsProgram
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#ifndef glIsRenderbuffer
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#ifndef glIsShader
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#ifndef glIsTexture
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#ifndef glLineWidth
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#ifndef glLinkProgram
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#ifndef glPixelStorei
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#ifndef glPolygonOffset
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#ifndef glReadPixels
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#ifndef glReleaseShaderCompiler
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#ifndef glRenderbufferStorage
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glSampleCoverage
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#ifndef glScissor
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glShaderBinary
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#ifndef glShaderSource
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#ifndef glStencilFunc
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#ifndef glStencilFuncSeparate
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#ifndef glStencilMask
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#ifndef glStencilMaskSeparate
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#ifndef glStencilOp
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#ifndef glStencilOpSeparate
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#ifndef glTexImage2D
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glTexParameterf
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#ifndef glTexParameterfv
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#ifndef glTexParameteri
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#ifndef glTexParameteriv
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#ifndef glTexSubImage2D
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glUniform1f
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#ifndef glUniform1fv
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform1i
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#ifndef glUniform1iv
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniform2f
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#ifndef glUniform2fv
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform2i
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#ifndef glUniform2iv
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniform3f
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#ifndef glUniform3fv
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform3i
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#ifndef glUniform3iv
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniform4f
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#ifndef glUniform4fv
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform4i
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#ifndef glUniform4iv
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniformMatrix2fv
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix3fv
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix4fv
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUseProgram
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#ifndef glValidateProgram
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#ifndef glVertexAttrib1f
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#ifndef glVertexAttrib1fv
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttrib2f
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#ifndef glVertexAttrib2fv
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttrib3f
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#ifndef glVertexAttrib3fv
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttrib4f
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#ifndef glVertexAttrib4fv
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttribPointer
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#ifndef glViewport
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#ifndef glBeginQuery
#define glBeginQuery(target, id) glatter_glBeginQuery_debug((target), (id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBeginQuery_debug(GLenum target, GLuint id, const char* file, int line);
#ifndef glBeginTransformFeedback
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_debug((primitiveMode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBeginTransformFeedback_debug(GLenum primitiveMode, const char* file, int line);
#ifndef glBindBufferBase
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_debug((target), (index), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindBufferBase_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#ifndef glBindBufferRange
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindBufferRange_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#ifndef glBindSampler
#define glBindSampler(unit, sampler) glatter_glBindSampler_debug((unit), (sampler), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindSampler_debug(GLuint unit, GLuint sampler, const char* file, int line);
#ifndef glBindTransformFeedback
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_debug((target), (id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindTransformFeedback_debug(GLenum target, GLuint id, const char* file, int line);
#ifndef glBindVertexArray
#define glBindVertexArray(array) glatter_glBindVertexArray_debug((array), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindVertexArray_debug(GLuint array, const char* file, int line);
#ifndef glBlitFramebuffer
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlitFramebuffer_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#ifndef glClearBufferfi
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_debug((buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearBufferfi_debug(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#ifndef glClearBufferfv
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearBufferfv_debug(GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#ifndef glClearBufferiv
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearBufferiv_debug(GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#ifndef glClearBufferuiv
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearBufferuiv_debug(GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#ifndef glClientWaitSync
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glClientWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#ifndef glCompressedTexImage3D
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCompressedTexSubImage3D
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCopyBufferSubData
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyBufferSubData_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#ifndef glCopyTexSubImage3D
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glDeleteQueries
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_debug((n), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteQueries_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#ifndef glDeleteSamplers
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_debug((count), (samplers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteSamplers_debug(GLsizei count, const GLuint *samplers, const char* file, int line);
#ifndef glDeleteSync
#define glDeleteSync(sync) glatter_glDeleteSync_debug((sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteSync_debug(GLsync sync, const char* file, int line);
#ifndef glDeleteTransformFeedbacks
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteTransformFeedbacks_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#ifndef glDeleteVertexArrays
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteVertexArrays_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#ifndef glDrawArraysInstanced
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_debug((mode), (first), (count), (instancecount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawArraysInstanced_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, const char* file, int line);
#ifndef glDrawBuffers
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_debug((n), (bufs), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawBuffers_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#ifndef glDrawElementsInstanced
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_debug((mode), (count), (type), (indices), (instancecount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsInstanced_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, const char* file, int line);
#ifndef glDrawRangeElements
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#ifndef glEndQuery
#define glEndQuery(target) glatter_glEndQuery_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEndQuery_debug(GLenum target, const char* file, int line);
#ifndef glEndTransformFeedback
#define glEndTransformFeedback() glatter_glEndTransformFeedback_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEndTransformFeedback_debug(const char* file, int line);
#ifndef glFenceSync
#define glFenceSync(condition, flags) glatter_glFenceSync_debug((condition), (flags), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLsync glatter_glFenceSync_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#ifndef glFlushMappedBufferRange
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_debug((target), (offset), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFlushMappedBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#ifndef glFramebufferTextureLayer
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTextureLayer_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#ifndef glGenQueries
#define glGenQueries(n, ids) glatter_glGenQueries_debug((n), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenQueries_debug(GLsizei n, GLuint *ids, const char* file, int line);
#ifndef glGenSamplers
#define glGenSamplers(count, samplers) glatter_glGenSamplers_debug((count), (samplers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenSamplers_debug(GLsizei count, GLuint *samplers, const char* file, int line);
#ifndef glGenTransformFeedbacks
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#ifndef glGenVertexArrays
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#ifndef glGetActiveUniformBlockName
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_debug((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveUniformBlockName_debug(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, const char* file, int line);
#ifndef glGetActiveUniformBlockiv
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_debug((program), (uniformBlockIndex), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveUniformBlockiv_debug(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetActiveUniformsiv
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_debug((program), (uniformCount), (uniformIndices), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveUniformsiv_debug(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetBufferParameteri64v
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBufferParameteri64v_debug(GLenum target, GLenum pname, GLint64 *params, const char* file, int line);
#ifndef glGetBufferPointerv
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBufferPointerv_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#ifndef glGetFragDataLocation
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_debug((program), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetFragDataLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#ifndef glGetInteger64i_v
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_debug((target), (index), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetInteger64i_v_debug(GLenum target, GLuint index, GLint64 *data, const char* file, int line);
#ifndef glGetInteger64v
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetInteger64v_debug(GLenum pname, GLint64 *data, const char* file, int line);
#ifndef glGetIntegeri_v
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_debug((target), (index), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetIntegeri_v_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#ifndef glGetInternalformativ
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetInternalformativ_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#ifndef glGetProgramBinary
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramBinary_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#ifndef glGetQueryObjectuiv
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_debug((id), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetQueryObjectuiv_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#ifndef glGetQueryiv
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetQueryiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetSamplerParameterfv
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_debug((sampler), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSamplerParameterfv_debug(GLuint sampler, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetSamplerParameteriv
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_debug((sampler), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSamplerParameteriv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetStringi
#define glGetStringi(name, index) glatter_glGetStringi_debug((name), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const GLubyte * glatter_glGetStringi_debug(GLenum name, GLuint index, const char* file, int line);
#ifndef glGetSynciv
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSynciv_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#ifndef glGetTransformFeedbackVarying
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTransformFeedbackVarying_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#ifndef glGetUniformBlockIndex
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_debug((program), (uniformBlockName), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glGetUniformBlockIndex_debug(GLuint program, const GLchar *uniformBlockName, const char* file, int line);
#ifndef glGetUniformIndices
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_debug((program), (uniformCount), (uniformNames), (uniformIndices), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformIndices_debug(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices, const char* file, int line);
#ifndef glGetUniformuiv
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_debug((program), (location), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformuiv_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#ifndef glGetVertexAttribIiv
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_debug((index), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribIiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetVertexAttribIuiv
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_debug((index), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribIuiv_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#ifndef glInvalidateFramebuffer
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glInvalidateFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#ifndef glInvalidateSubFramebuffer
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_debug((target), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glInvalidateSubFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glIsQuery
#define glIsQuery(id) glatter_glIsQuery_debug((id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsQuery_debug(GLuint id, const char* file, int line);
#ifndef glIsSampler
#define glIsSampler(sampler) glatter_glIsSampler_debug((sampler), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsSampler_debug(GLuint sampler, const char* file, int line);
#ifndef glIsSync
#define glIsSync(sync) glatter_glIsSync_debug((sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsSync_debug(GLsync sync, const char* file, int line);
#ifndef glIsTransformFeedback
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_debug((id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsTransformFeedback_debug(GLuint id, const char* file, int line);
#ifndef glIsVertexArray
#define glIsVertexArray(array) glatter_glIsVertexArray_debug((array), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsVertexArray_debug(GLuint array, const char* file, int line);
#ifndef glMapBufferRange
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_debug((target), (offset), (length), (access), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void * glatter_glMapBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#ifndef glPauseTransformFeedback
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPauseTransformFeedback_debug(const char* file, int line);
#ifndef glProgramBinary
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramBinary_debug(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length, const char* file, int line);
#ifndef glProgramParameteri
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_debug((program), (pname), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramParameteri_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#ifndef glReadBuffer
#define glReadBuffer(src) glatter_glReadBuffer_debug((src), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReadBuffer_debug(GLenum src, const char* file, int line);
#ifndef glRenderbufferStorageMultisample
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorageMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glResumeTransformFeedback
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glResumeTransformFeedback_debug(const char* file, int line);
#ifndef glSamplerParameterf
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameterf_debug(GLuint sampler, GLenum pname, GLfloat param, const char* file, int line);
#ifndef glSamplerParameterfv
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameterfv_debug(GLuint sampler, GLenum pname, const GLfloat *param, const char* file, int line);
#ifndef glSamplerParameteri
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameteri_debug(GLuint sampler, GLenum pname, GLint param, const char* file, int line);
#ifndef glSamplerParameteriv
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameteriv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#ifndef glTexImage3D
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glTexStorage2D
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage2D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glTexStorage3D
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage3D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#ifndef glTexSubImage3D
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glTransformFeedbackVaryings
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTransformFeedbackVaryings_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#ifndef glUniform1ui
#define glUniform1ui(location, v0) glatter_glUniform1ui_debug((location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1ui_debug(GLint location, GLuint v0, const char* file, int line);
#ifndef glUniform1uiv
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glUniform2ui
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_debug((location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2ui_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#ifndef glUniform2uiv
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glUniform3ui
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#ifndef glUniform3uiv
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glUniform4ui
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#ifndef glUniform4uiv
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glUniformBlockBinding
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_debug((program), (uniformBlockIndex), (uniformBlockBinding), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformBlockBinding_debug(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, const char* file, int line);
#ifndef glUniformMatrix2x3fv
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix2x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix2x4fv
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix2x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix3x2fv
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix3x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix3x4fv
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix3x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix4x2fv
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix4x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix4x3fv
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix4x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUnmapBuffer
#define glUnmapBuffer(target) glatter_glUnmapBuffer_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glUnmapBuffer_debug(GLenum target, const char* file, int line);
#ifndef glVertexAttribDivisor
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_debug((index), (divisor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribDivisor_debug(GLuint index, GLuint divisor, const char* file, int line);
#ifndef glVertexAttribI4i
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribI4i_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#ifndef glVertexAttribI4iv
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribI4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#ifndef glVertexAttribI4ui
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribI4ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#ifndef glVertexAttribI4uiv
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribI4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#ifndef glVertexAttribIPointer
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribIPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#ifndef glWaitSync
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_0)
#if defined(GL_ES_VERSION_3_1)
#ifndef glActiveShaderProgram
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_debug((pipeline), (program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glActiveShaderProgram_debug(GLuint pipeline, GLuint program, const char* file, int line);
#ifndef glBindImageTexture
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_debug((unit), (texture), (level), (layered), (layer), (access), (format), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindImageTexture_debug(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format, const char* file, int line);
#ifndef glBindProgramPipeline
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_debug((pipeline), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#ifndef glBindVertexBuffer
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_debug((bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindVertexBuffer_debug(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#ifndef glCreateShaderProgramv
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_debug((type), (count), (strings), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glCreateShaderProgramv_debug(GLenum type, GLsizei count, const GLchar *const*strings, const char* file, int line);
#ifndef glDeleteProgramPipelines
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteProgramPipelines_debug(GLsizei n, const GLuint *pipelines, const char* file, int line);
#ifndef glDispatchCompute
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_debug((num_groups_x), (num_groups_y), (num_groups_z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDispatchCompute_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, const char* file, int line);
#ifndef glDispatchComputeIndirect
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_debug((indirect), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDispatchComputeIndirect_debug(GLintptr indirect, const char* file, int line);
#ifndef glDrawArraysIndirect
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_debug((mode), (indirect), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawArraysIndirect_debug(GLenum mode, const void *indirect, const char* file, int line);
#ifndef glDrawElementsIndirect
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_debug((mode), (type), (indirect), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, const char* file, int line);
#ifndef glFramebufferParameteri
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#ifndef glGenProgramPipelines
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#ifndef glGetBooleani_v
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_debug((target), (index), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBooleani_v_debug(GLenum target, GLuint index, GLboolean *data, const char* file, int line);
#ifndef glGetFramebufferParameteriv
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFramebufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetMultisamplefv
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_debug((pname), (index), (val), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetMultisamplefv_debug(GLenum pname, GLuint index, GLfloat *val, const char* file, int line);
#ifndef glGetProgramInterfaceiv
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_debug((program), (programInterface), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramInterfaceiv_debug(GLuint program, GLenum programInterface, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetProgramPipelineInfoLog
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_debug((pipeline), (bufSize), (length), (infoLog), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramPipelineInfoLog_debug(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#ifndef glGetProgramPipelineiv
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_debug((pipeline), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramPipelineiv_debug(GLuint pipeline, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetProgramResourceIndex
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glGetProgramResourceIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#ifndef glGetProgramResourceLocation
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_debug((program), (programInterface), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetProgramResourceLocation_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#ifndef glGetProgramResourceName
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_debug((program), (programInterface), (index), (bufSize), (length), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramResourceName_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name, const char* file, int line);
#ifndef glGetProgramResourceiv
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramResourceiv_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params, const char* file, int line);
#ifndef glGetTexLevelParameterfv
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexLevelParameterfv_debug(GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetTexLevelParameteriv
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexLevelParameteriv_debug(GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#ifndef glIsProgramPipeline
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_debug((pipeline), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#ifndef glMemoryBarrier
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_debug((barriers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMemoryBarrier_debug(GLbitfield barriers, const char* file, int line);
#ifndef glMemoryBarrierByRegion
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_debug((barriers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMemoryBarrierByRegion_debug(GLbitfield barriers, const char* file, int line);
#ifndef glProgramUniform1f
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_debug((program), (location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1f_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#ifndef glProgramUniform1fv
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniform1i
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_debug((program), (location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1i_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#ifndef glProgramUniform1iv
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glProgramUniform1ui
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_debug((program), (location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1ui_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#ifndef glProgramUniform1uiv
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glProgramUniform2f
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#ifndef glProgramUniform2fv
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniform2i
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2i_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#ifndef glProgramUniform2iv
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glProgramUniform2ui
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#ifndef glProgramUniform2uiv
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glProgramUniform3f
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#ifndef glProgramUniform3fv
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniform3i
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#ifndef glProgramUniform3iv
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glProgramUniform3ui
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#ifndef glProgramUniform3uiv
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glProgramUniform4f
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#ifndef glProgramUniform4fv
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniform4i
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#ifndef glProgramUniform4iv
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glProgramUniform4ui
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#ifndef glProgramUniform4uiv
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glProgramUniformMatrix2fv
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix2x3fv
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix2x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix2x4fv
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix2x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix3fv
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix3x2fv
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix3x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix3x4fv
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix3x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix4fv
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix4x2fv
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix4x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix4x3fv
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix4x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glSampleMaski
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_debug((maskNumber), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSampleMaski_debug(GLuint maskNumber, GLbitfield mask, const char* file, int line);
#ifndef glTexStorage2DMultisample
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#ifndef glUseProgramStages
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_debug((pipeline), (stages), (program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUseProgramStages_debug(GLuint pipeline, GLbitfield stages, GLuint program, const char* file, int line);
#ifndef glValidateProgramPipeline
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_debug((pipeline), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glValidateProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#ifndef glVertexAttribBinding
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_debug((attribindex), (bindingindex), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribBinding_debug(GLuint attribindex, GLuint bindingindex, const char* file, int line);
#ifndef glVertexAttribFormat
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_debug((attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribFormat_debug(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#ifndef glVertexAttribIFormat
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribIFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#ifndef glVertexBindingDivisor
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_debug((bindingindex), (divisor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexBindingDivisor_debug(GLuint bindingindex, GLuint divisor, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_1)
#endif // defined(__gl31_h_)
#if defined(__gl32_h_)
#if defined(GL_ES_VERSION_2_0)
#ifndef glActiveTexture
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#ifndef glAttachShader
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#ifndef glBindAttribLocation
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#ifndef glBindBuffer
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#ifndef glBindFramebuffer
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#ifndef glBindRenderbuffer
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#ifndef glBindTexture
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#ifndef glBlendColor
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#ifndef glBlendEquation
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#ifndef glBlendEquationSeparate
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#ifndef glBlendFunc
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#ifndef glBlendFuncSeparate
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#ifndef glBufferData
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#ifndef glBufferSubData
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#ifndef glCheckFramebufferStatus
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#ifndef glClear
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#ifndef glClearColor
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#ifndef glClearDepthf
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#ifndef glClearStencil
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#ifndef glColorMask
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#ifndef glCompileShader
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#ifndef glCompressedTexImage2D
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCompressedTexSubImage2D
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCopyTexImage2D
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#ifndef glCopyTexSubImage2D
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glCreateProgram
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glCreateProgram_debug(const char* file, int line);
#ifndef glCreateShader
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#ifndef glCullFace
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#ifndef glDeleteBuffers
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#ifndef glDeleteFramebuffers
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#ifndef glDeleteProgram
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#ifndef glDeleteRenderbuffers
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#ifndef glDeleteShader
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#ifndef glDeleteTextures
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#ifndef glDepthFunc
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#ifndef glDepthMask
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#ifndef glDepthRangef
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#ifndef glDetachShader
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#ifndef glDisable
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#ifndef glDisableVertexAttribArray
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#ifndef glDrawArrays
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#ifndef glDrawElements
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#ifndef glEnable
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#ifndef glEnableVertexAttribArray
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#ifndef glFinish
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFinish_debug(const char* file, int line);
#ifndef glFlush
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFlush_debug(const char* file, int line);
#ifndef glFramebufferRenderbuffer
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#ifndef glFramebufferTexture2D
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#ifndef glFrontFace
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#ifndef glGenBuffers
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#ifndef glGenFramebuffers
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#ifndef glGenRenderbuffers
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#ifndef glGenTextures
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#ifndef glGenerateMipmap
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#ifndef glGetActiveAttrib
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#ifndef glGetActiveUniform
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#ifndef glGetAttachedShaders
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#ifndef glGetAttribLocation
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#ifndef glGetBooleanv
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#ifndef glGetBufferParameteriv
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetError
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glGetError_debug(const char* file, int line);
#ifndef glGetFloatv
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#ifndef glGetFramebufferAttachmentParameteriv
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetIntegerv
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#ifndef glGetProgramInfoLog
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#ifndef glGetProgramiv
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetRenderbufferParameteriv
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetShaderInfoLog
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#ifndef glGetShaderPrecisionFormat
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#ifndef glGetShaderSource
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#ifndef glGetShaderiv
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetString
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#ifndef glGetTexParameterfv
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetTexParameteriv
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetUniformLocation
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#ifndef glGetUniformfv
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#ifndef glGetUniformiv
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#ifndef glGetVertexAttribPointerv
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#ifndef glGetVertexAttribfv
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetVertexAttribiv
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#ifndef glHint
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#ifndef glIsBuffer
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#ifndef glIsEnabled
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#ifndef glIsFramebuffer
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#ifndef glIsProgram
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#ifndef glIsRenderbuffer
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#ifndef glIsShader
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#ifndef glIsTexture
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#ifndef glLineWidth
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#ifndef glLinkProgram
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#ifndef glPixelStorei
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#ifndef glPolygonOffset
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#ifndef glReadPixels
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#ifndef glReleaseShaderCompiler
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#ifndef glRenderbufferStorage
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glSampleCoverage
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#ifndef glScissor
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glShaderBinary
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#ifndef glShaderSource
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#ifndef glStencilFunc
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#ifndef glStencilFuncSeparate
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#ifndef glStencilMask
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#ifndef glStencilMaskSeparate
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#ifndef glStencilOp
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#ifndef glStencilOpSeparate
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#ifndef glTexImage2D
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glTexParameterf
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#ifndef glTexParameterfv
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#ifndef glTexParameteri
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#ifndef glTexParameteriv
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#ifndef glTexSubImage2D
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glUniform1f
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#ifndef glUniform1fv
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform1i
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#ifndef glUniform1iv
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniform2f
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#ifndef glUniform2fv
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform2i
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#ifndef glUniform2iv
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniform3f
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#ifndef glUniform3fv
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform3i
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#ifndef glUniform3iv
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniform4f
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#ifndef glUniform4fv
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform4i
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#ifndef glUniform4iv
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniformMatrix2fv
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix3fv
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix4fv
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUseProgram
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#ifndef glValidateProgram
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#ifndef glVertexAttrib1f
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#ifndef glVertexAttrib1fv
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttrib2f
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#ifndef glVertexAttrib2fv
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttrib3f
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#ifndef glVertexAttrib3fv
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttrib4f
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#ifndef glVertexAttrib4fv
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttribPointer
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#ifndef glViewport
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#ifndef glBeginQuery
#define glBeginQuery(target, id) glatter_glBeginQuery_debug((target), (id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBeginQuery_debug(GLenum target, GLuint id, const char* file, int line);
#ifndef glBeginTransformFeedback
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_debug((primitiveMode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBeginTransformFeedback_debug(GLenum primitiveMode, const char* file, int line);
#ifndef glBindBufferBase
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_debug((target), (index), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindBufferBase_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#ifndef glBindBufferRange
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindBufferRange_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#ifndef glBindSampler
#define glBindSampler(unit, sampler) glatter_glBindSampler_debug((unit), (sampler), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindSampler_debug(GLuint unit, GLuint sampler, const char* file, int line);
#ifndef glBindTransformFeedback
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_debug((target), (id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindTransformFeedback_debug(GLenum target, GLuint id, const char* file, int line);
#ifndef glBindVertexArray
#define glBindVertexArray(array) glatter_glBindVertexArray_debug((array), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindVertexArray_debug(GLuint array, const char* file, int line);
#ifndef glBlitFramebuffer
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlitFramebuffer_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#ifndef glClearBufferfi
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_debug((buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearBufferfi_debug(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#ifndef glClearBufferfv
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearBufferfv_debug(GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#ifndef glClearBufferiv
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearBufferiv_debug(GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#ifndef glClearBufferuiv
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearBufferuiv_debug(GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#ifndef glClientWaitSync
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glClientWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#ifndef glCompressedTexImage3D
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCompressedTexSubImage3D
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCopyBufferSubData
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyBufferSubData_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#ifndef glCopyTexSubImage3D
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glDeleteQueries
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_debug((n), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteQueries_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#ifndef glDeleteSamplers
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_debug((count), (samplers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteSamplers_debug(GLsizei count, const GLuint *samplers, const char* file, int line);
#ifndef glDeleteSync
#define glDeleteSync(sync) glatter_glDeleteSync_debug((sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteSync_debug(GLsync sync, const char* file, int line);
#ifndef glDeleteTransformFeedbacks
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteTransformFeedbacks_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#ifndef glDeleteVertexArrays
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteVertexArrays_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#ifndef glDrawArraysInstanced
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_debug((mode), (first), (count), (instancecount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawArraysInstanced_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, const char* file, int line);
#ifndef glDrawBuffers
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_debug((n), (bufs), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawBuffers_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#ifndef glDrawElementsInstanced
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_debug((mode), (count), (type), (indices), (instancecount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsInstanced_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, const char* file, int line);
#ifndef glDrawRangeElements
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#ifndef glEndQuery
#define glEndQuery(target) glatter_glEndQuery_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEndQuery_debug(GLenum target, const char* file, int line);
#ifndef glEndTransformFeedback
#define glEndTransformFeedback() glatter_glEndTransformFeedback_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEndTransformFeedback_debug(const char* file, int line);
#ifndef glFenceSync
#define glFenceSync(condition, flags) glatter_glFenceSync_debug((condition), (flags), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLsync glatter_glFenceSync_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#ifndef glFlushMappedBufferRange
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_debug((target), (offset), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFlushMappedBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#ifndef glFramebufferTextureLayer
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTextureLayer_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#ifndef glGenQueries
#define glGenQueries(n, ids) glatter_glGenQueries_debug((n), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenQueries_debug(GLsizei n, GLuint *ids, const char* file, int line);
#ifndef glGenSamplers
#define glGenSamplers(count, samplers) glatter_glGenSamplers_debug((count), (samplers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenSamplers_debug(GLsizei count, GLuint *samplers, const char* file, int line);
#ifndef glGenTransformFeedbacks
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#ifndef glGenVertexArrays
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#ifndef glGetActiveUniformBlockName
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_debug((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveUniformBlockName_debug(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, const char* file, int line);
#ifndef glGetActiveUniformBlockiv
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_debug((program), (uniformBlockIndex), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveUniformBlockiv_debug(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetActiveUniformsiv
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_debug((program), (uniformCount), (uniformIndices), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveUniformsiv_debug(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetBufferParameteri64v
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBufferParameteri64v_debug(GLenum target, GLenum pname, GLint64 *params, const char* file, int line);
#ifndef glGetBufferPointerv
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBufferPointerv_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#ifndef glGetFragDataLocation
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_debug((program), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetFragDataLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#ifndef glGetInteger64i_v
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_debug((target), (index), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetInteger64i_v_debug(GLenum target, GLuint index, GLint64 *data, const char* file, int line);
#ifndef glGetInteger64v
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetInteger64v_debug(GLenum pname, GLint64 *data, const char* file, int line);
#ifndef glGetIntegeri_v
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_debug((target), (index), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetIntegeri_v_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#ifndef glGetInternalformativ
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetInternalformativ_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#ifndef glGetProgramBinary
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramBinary_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#ifndef glGetQueryObjectuiv
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_debug((id), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetQueryObjectuiv_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#ifndef glGetQueryiv
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetQueryiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetSamplerParameterfv
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_debug((sampler), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSamplerParameterfv_debug(GLuint sampler, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetSamplerParameteriv
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_debug((sampler), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSamplerParameteriv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetStringi
#define glGetStringi(name, index) glatter_glGetStringi_debug((name), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const GLubyte * glatter_glGetStringi_debug(GLenum name, GLuint index, const char* file, int line);
#ifndef glGetSynciv
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSynciv_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#ifndef glGetTransformFeedbackVarying
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTransformFeedbackVarying_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#ifndef glGetUniformBlockIndex
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_debug((program), (uniformBlockName), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glGetUniformBlockIndex_debug(GLuint program, const GLchar *uniformBlockName, const char* file, int line);
#ifndef glGetUniformIndices
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_debug((program), (uniformCount), (uniformNames), (uniformIndices), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformIndices_debug(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices, const char* file, int line);
#ifndef glGetUniformuiv
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_debug((program), (location), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformuiv_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#ifndef glGetVertexAttribIiv
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_debug((index), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribIiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetVertexAttribIuiv
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_debug((index), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribIuiv_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#ifndef glInvalidateFramebuffer
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glInvalidateFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#ifndef glInvalidateSubFramebuffer
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_debug((target), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glInvalidateSubFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glIsQuery
#define glIsQuery(id) glatter_glIsQuery_debug((id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsQuery_debug(GLuint id, const char* file, int line);
#ifndef glIsSampler
#define glIsSampler(sampler) glatter_glIsSampler_debug((sampler), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsSampler_debug(GLuint sampler, const char* file, int line);
#ifndef glIsSync
#define glIsSync(sync) glatter_glIsSync_debug((sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsSync_debug(GLsync sync, const char* file, int line);
#ifndef glIsTransformFeedback
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_debug((id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsTransformFeedback_debug(GLuint id, const char* file, int line);
#ifndef glIsVertexArray
#define glIsVertexArray(array) glatter_glIsVertexArray_debug((array), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsVertexArray_debug(GLuint array, const char* file, int line);
#ifndef glMapBufferRange
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_debug((target), (offset), (length), (access), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void * glatter_glMapBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#ifndef glPauseTransformFeedback
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPauseTransformFeedback_debug(const char* file, int line);
#ifndef glProgramBinary
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramBinary_debug(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length, const char* file, int line);
#ifndef glProgramParameteri
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_debug((program), (pname), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramParameteri_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#ifndef glReadBuffer
#define glReadBuffer(src) glatter_glReadBuffer_debug((src), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReadBuffer_debug(GLenum src, const char* file, int line);
#ifndef glRenderbufferStorageMultisample
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorageMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glResumeTransformFeedback
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glResumeTransformFeedback_debug(const char* file, int line);
#ifndef glSamplerParameterf
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameterf_debug(GLuint sampler, GLenum pname, GLfloat param, const char* file, int line);
#ifndef glSamplerParameterfv
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameterfv_debug(GLuint sampler, GLenum pname, const GLfloat *param, const char* file, int line);
#ifndef glSamplerParameteri
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameteri_debug(GLuint sampler, GLenum pname, GLint param, const char* file, int line);
#ifndef glSamplerParameteriv
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameteriv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#ifndef glTexImage3D
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glTexStorage2D
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage2D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glTexStorage3D
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage3D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#ifndef glTexSubImage3D
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glTransformFeedbackVaryings
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTransformFeedbackVaryings_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#ifndef glUniform1ui
#define glUniform1ui(location, v0) glatter_glUniform1ui_debug((location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1ui_debug(GLint location, GLuint v0, const char* file, int line);
#ifndef glUniform1uiv
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glUniform2ui
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_debug((location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2ui_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#ifndef glUniform2uiv
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glUniform3ui
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#ifndef glUniform3uiv
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glUniform4ui
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#ifndef glUniform4uiv
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glUniformBlockBinding
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_debug((program), (uniformBlockIndex), (uniformBlockBinding), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformBlockBinding_debug(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, const char* file, int line);
#ifndef glUniformMatrix2x3fv
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix2x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix2x4fv
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix2x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix3x2fv
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix3x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix3x4fv
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix3x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix4x2fv
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix4x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix4x3fv
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix4x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUnmapBuffer
#define glUnmapBuffer(target) glatter_glUnmapBuffer_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glUnmapBuffer_debug(GLenum target, const char* file, int line);
#ifndef glVertexAttribDivisor
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_debug((index), (divisor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribDivisor_debug(GLuint index, GLuint divisor, const char* file, int line);
#ifndef glVertexAttribI4i
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribI4i_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#ifndef glVertexAttribI4iv
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribI4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#ifndef glVertexAttribI4ui
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribI4ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#ifndef glVertexAttribI4uiv
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribI4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#ifndef glVertexAttribIPointer
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribIPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#ifndef glWaitSync
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_0)
#if defined(GL_ES_VERSION_3_1)
#ifndef glActiveShaderProgram
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_debug((pipeline), (program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glActiveShaderProgram_debug(GLuint pipeline, GLuint program, const char* file, int line);
#ifndef glBindImageTexture
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_debug((unit), (texture), (level), (layered), (layer), (access), (format), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindImageTexture_debug(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format, const char* file, int line);
#ifndef glBindProgramPipeline
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_debug((pipeline), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#ifndef glBindVertexBuffer
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_debug((bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindVertexBuffer_debug(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#ifndef glCreateShaderProgramv
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_debug((type), (count), (strings), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glCreateShaderProgramv_debug(GLenum type, GLsizei count, const GLchar *const*strings, const char* file, int line);
#ifndef glDeleteProgramPipelines
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteProgramPipelines_debug(GLsizei n, const GLuint *pipelines, const char* file, int line);
#ifndef glDispatchCompute
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_debug((num_groups_x), (num_groups_y), (num_groups_z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDispatchCompute_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, const char* file, int line);
#ifndef glDispatchComputeIndirect
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_debug((indirect), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDispatchComputeIndirect_debug(GLintptr indirect, const char* file, int line);
#ifndef glDrawArraysIndirect
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_debug((mode), (indirect), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawArraysIndirect_debug(GLenum mode, const void *indirect, const char* file, int line);
#ifndef glDrawElementsIndirect
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_debug((mode), (type), (indirect), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, const char* file, int line);
#ifndef glFramebufferParameteri
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#ifndef glGenProgramPipelines
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#ifndef glGetBooleani_v
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_debug((target), (index), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBooleani_v_debug(GLenum target, GLuint index, GLboolean *data, const char* file, int line);
#ifndef glGetFramebufferParameteriv
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFramebufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetMultisamplefv
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_debug((pname), (index), (val), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetMultisamplefv_debug(GLenum pname, GLuint index, GLfloat *val, const char* file, int line);
#ifndef glGetProgramInterfaceiv
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_debug((program), (programInterface), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramInterfaceiv_debug(GLuint program, GLenum programInterface, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetProgramPipelineInfoLog
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_debug((pipeline), (bufSize), (length), (infoLog), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramPipelineInfoLog_debug(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#ifndef glGetProgramPipelineiv
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_debug((pipeline), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramPipelineiv_debug(GLuint pipeline, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetProgramResourceIndex
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glGetProgramResourceIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#ifndef glGetProgramResourceLocation
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_debug((program), (programInterface), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetProgramResourceLocation_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#ifndef glGetProgramResourceName
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_debug((program), (programInterface), (index), (bufSize), (length), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramResourceName_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name, const char* file, int line);
#ifndef glGetProgramResourceiv
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramResourceiv_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params, const char* file, int line);
#ifndef glGetTexLevelParameterfv
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexLevelParameterfv_debug(GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetTexLevelParameteriv
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexLevelParameteriv_debug(GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#ifndef glIsProgramPipeline
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_debug((pipeline), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#ifndef glMemoryBarrier
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_debug((barriers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMemoryBarrier_debug(GLbitfield barriers, const char* file, int line);
#ifndef glMemoryBarrierByRegion
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_debug((barriers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMemoryBarrierByRegion_debug(GLbitfield barriers, const char* file, int line);
#ifndef glProgramUniform1f
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_debug((program), (location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1f_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#ifndef glProgramUniform1fv
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniform1i
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_debug((program), (location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1i_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#ifndef glProgramUniform1iv
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glProgramUniform1ui
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_debug((program), (location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1ui_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#ifndef glProgramUniform1uiv
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glProgramUniform2f
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#ifndef glProgramUniform2fv
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniform2i
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2i_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#ifndef glProgramUniform2iv
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glProgramUniform2ui
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#ifndef glProgramUniform2uiv
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glProgramUniform3f
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#ifndef glProgramUniform3fv
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniform3i
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#ifndef glProgramUniform3iv
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glProgramUniform3ui
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#ifndef glProgramUniform3uiv
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glProgramUniform4f
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#ifndef glProgramUniform4fv
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniform4i
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#ifndef glProgramUniform4iv
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glProgramUniform4ui
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#ifndef glProgramUniform4uiv
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glProgramUniformMatrix2fv
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix2x3fv
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix2x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix2x4fv
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix2x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix3fv
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix3x2fv
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix3x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix3x4fv
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix3x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix4fv
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix4x2fv
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix4x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix4x3fv
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix4x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glSampleMaski
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_debug((maskNumber), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSampleMaski_debug(GLuint maskNumber, GLbitfield mask, const char* file, int line);
#ifndef glTexStorage2DMultisample
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#ifndef glUseProgramStages
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_debug((pipeline), (stages), (program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUseProgramStages_debug(GLuint pipeline, GLbitfield stages, GLuint program, const char* file, int line);
#ifndef glValidateProgramPipeline
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_debug((pipeline), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glValidateProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#ifndef glVertexAttribBinding
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_debug((attribindex), (bindingindex), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribBinding_debug(GLuint attribindex, GLuint bindingindex, const char* file, int line);
#ifndef glVertexAttribFormat
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_debug((attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribFormat_debug(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#ifndef glVertexAttribIFormat
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribIFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#ifndef glVertexBindingDivisor
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_debug((bindingindex), (divisor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexBindingDivisor_debug(GLuint bindingindex, GLuint divisor, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_1)
#if defined(GL_ES_VERSION_3_2)
#ifndef glBlendBarrier
#define glBlendBarrier() glatter_glBlendBarrier_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendBarrier_debug(const char* file, int line);
#ifndef glBlendEquationSeparatei
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquationSeparatei_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#ifndef glBlendEquationi
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi_debug((buf), (mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquationi_debug(GLuint buf, GLenum mode, const char* file, int line);
#ifndef glBlendFuncSeparatei
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFuncSeparatei_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#ifndef glBlendFunci
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci_debug((buf), (src), (dst), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFunci_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#ifndef glColorMaski
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glColorMaski_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#ifndef glCopyImageSubData
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyImageSubData_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#ifndef glDebugMessageCallback
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback_debug((callback), (userParam), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDebugMessageCallback_debug(GLDEBUGPROC callback, const void *userParam, const char* file, int line);
#ifndef glDebugMessageControl
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDebugMessageControl_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#ifndef glDebugMessageInsert
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDebugMessageInsert_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#ifndef glDisablei
#define glDisablei(target, index) glatter_glDisablei_debug((target), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisablei_debug(GLenum target, GLuint index, const char* file, int line);
#ifndef glDrawElementsBaseVertex
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex_debug((mode), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#ifndef glDrawElementsInstancedBaseVertex
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex_debug((mode), (count), (type), (indices), (instancecount), (basevertex), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsInstancedBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, const char* file, int line);
#ifndef glDrawRangeElementsBaseVertex
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex_debug((mode), (start), (end), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawRangeElementsBaseVertex_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#ifndef glEnablei
#define glEnablei(target, index) glatter_glEnablei_debug((target), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnablei_debug(GLenum target, GLuint index, const char* file, int line);
#ifndef glFramebufferTexture
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTexture_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#ifndef glGetDebugMessageLog
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glGetDebugMessageLog_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#ifndef glGetGraphicsResetStatus
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glGetGraphicsResetStatus_debug(const char* file, int line);
#ifndef glGetObjectLabel
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel_debug((identifier), (name), (bufSize), (length), (label), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetObjectLabel_debug(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#ifndef glGetObjectPtrLabel
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel_debug((ptr), (bufSize), (length), (label), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetObjectPtrLabel_debug(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#ifndef glGetPointerv
#define glGetPointerv(pname, params) glatter_glGetPointerv_debug((pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPointerv_debug(GLenum pname, void **params, const char* file, int line);
#ifndef glGetSamplerParameterIiv
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSamplerParameterIiv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetSamplerParameterIuiv
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, GLuint *params, const char* file, int line);
#ifndef glGetTexParameterIiv
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameterIiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetTexParameterIuiv
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameterIuiv_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#ifndef glGetnUniformfv
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetnUniformfv_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#ifndef glGetnUniformiv
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetnUniformiv_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#ifndef glGetnUniformuiv
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetnUniformuiv_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#ifndef glIsEnabledi
#define glIsEnabledi(target, index) glatter_glIsEnabledi_debug((target), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsEnabledi_debug(GLenum target, GLuint index, const char* file, int line);
#ifndef glMinSampleShading
#define glMinSampleShading(value) glatter_glMinSampleShading_debug((value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMinSampleShading_debug(GLfloat value, const char* file, int line);
#ifndef glObjectLabel
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel_debug((identifier), (name), (length), (label), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glObjectLabel_debug(GLenum identifier, GLuint name, GLsizei length, const GLchar *label, const char* file, int line);
#ifndef glObjectPtrLabel
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel_debug((ptr), (length), (label), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glObjectPtrLabel_debug(const void *ptr, GLsizei length, const GLchar *label, const char* file, int line);
#ifndef glPatchParameteri
#define glPatchParameteri(pname, value) glatter_glPatchParameteri_debug((pname), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPatchParameteri_debug(GLenum pname, GLint value, const char* file, int line);
#ifndef glPopDebugGroup
#define glPopDebugGroup() glatter_glPopDebugGroup_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPopDebugGroup_debug(const char* file, int line);
#ifndef glPrimitiveBoundingBox
#define glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBox_debug((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPrimitiveBoundingBox_debug(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, const char* file, int line);
#ifndef glPushDebugGroup
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup_debug((source), (id), (length), (message), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPushDebugGroup_debug(GLenum source, GLuint id, GLsizei length, const GLchar *message, const char* file, int line);
#ifndef glReadnPixels
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReadnPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#ifndef glSamplerParameterIiv
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameterIiv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#ifndef glSamplerParameterIuiv
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, const GLuint *param, const char* file, int line);
#ifndef glTexBuffer
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexBuffer_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#ifndef glTexBufferRange
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange_debug((target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexBufferRange_debug(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#ifndef glTexParameterIiv
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterIiv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#ifndef glTexParameterIuiv
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterIuiv_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#ifndef glTexStorage3DMultisample
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage3DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_2)
#endif // defined(__gl32_h_)
#if defined(__gles2_gl2_h_)
#if defined(GL_ES_VERSION_2_0)
#ifndef glActiveTexture
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#ifndef glAttachShader
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#ifndef glBindAttribLocation
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#ifndef glBindBuffer
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#ifndef glBindFramebuffer
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#ifndef glBindRenderbuffer
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#ifndef glBindTexture
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#ifndef glBlendColor
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#ifndef glBlendEquation
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#ifndef glBlendEquationSeparate
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#ifndef glBlendFunc
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#ifndef glBlendFuncSeparate
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#ifndef glBufferData
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#ifndef glBufferSubData
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#ifndef glCheckFramebufferStatus
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#ifndef glClear
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#ifndef glClearColor
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#ifndef glClearDepthf
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#ifndef glClearStencil
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#ifndef glColorMask
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#ifndef glCompileShader
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#ifndef glCompressedTexImage2D
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCompressedTexSubImage2D
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCopyTexImage2D
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#ifndef glCopyTexSubImage2D
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glCreateProgram
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glCreateProgram_debug(const char* file, int line);
#ifndef glCreateShader
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#ifndef glCullFace
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#ifndef glDeleteBuffers
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#ifndef glDeleteFramebuffers
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#ifndef glDeleteProgram
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#ifndef glDeleteRenderbuffers
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#ifndef glDeleteShader
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#ifndef glDeleteTextures
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#ifndef glDepthFunc
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#ifndef glDepthMask
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#ifndef glDepthRangef
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#ifndef glDetachShader
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#ifndef glDisable
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#ifndef glDisableVertexAttribArray
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#ifndef glDrawArrays
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#ifndef glDrawElements
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#ifndef glEnable
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#ifndef glEnableVertexAttribArray
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#ifndef glFinish
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFinish_debug(const char* file, int line);
#ifndef glFlush
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFlush_debug(const char* file, int line);
#ifndef glFramebufferRenderbuffer
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#ifndef glFramebufferTexture2D
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#ifndef glFrontFace
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#ifndef glGenBuffers
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#ifndef glGenFramebuffers
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#ifndef glGenRenderbuffers
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#ifndef glGenTextures
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#ifndef glGenerateMipmap
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#ifndef glGetActiveAttrib
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#ifndef glGetActiveUniform
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#ifndef glGetAttachedShaders
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#ifndef glGetAttribLocation
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#ifndef glGetBooleanv
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#ifndef glGetBufferParameteriv
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetError
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glGetError_debug(const char* file, int line);
#ifndef glGetFloatv
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#ifndef glGetFramebufferAttachmentParameteriv
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetIntegerv
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#ifndef glGetProgramInfoLog
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#ifndef glGetProgramiv
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetRenderbufferParameteriv
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetShaderInfoLog
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#ifndef glGetShaderPrecisionFormat
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#ifndef glGetShaderSource
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#ifndef glGetShaderiv
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetString
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#ifndef glGetTexParameterfv
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetTexParameteriv
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetUniformLocation
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#ifndef glGetUniformfv
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#ifndef glGetUniformiv
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#ifndef glGetVertexAttribPointerv
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#ifndef glGetVertexAttribfv
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetVertexAttribiv
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#ifndef glHint
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#ifndef glIsBuffer
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#ifndef glIsEnabled
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#ifndef glIsFramebuffer
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#ifndef glIsProgram
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#ifndef glIsRenderbuffer
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#ifndef glIsShader
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#ifndef glIsTexture
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#ifndef glLineWidth
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#ifndef glLinkProgram
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#ifndef glPixelStorei
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#ifndef glPolygonOffset
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#ifndef glReadPixels
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#ifndef glReleaseShaderCompiler
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#ifndef glRenderbufferStorage
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glSampleCoverage
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#ifndef glScissor
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glShaderBinary
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#ifndef glShaderSource
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#ifndef glStencilFunc
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#ifndef glStencilFuncSeparate
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#ifndef glStencilMask
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#ifndef glStencilMaskSeparate
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#ifndef glStencilOp
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#ifndef glStencilOpSeparate
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#ifndef glTexImage2D
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glTexParameterf
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#ifndef glTexParameterfv
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#ifndef glTexParameteri
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#ifndef glTexParameteriv
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#ifndef glTexSubImage2D
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glUniform1f
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#ifndef glUniform1fv
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform1i
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#ifndef glUniform1iv
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniform2f
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#ifndef glUniform2fv
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform2i
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#ifndef glUniform2iv
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniform3f
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#ifndef glUniform3fv
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform3i
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#ifndef glUniform3iv
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniform4f
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#ifndef glUniform4fv
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform4i
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#ifndef glUniform4iv
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniformMatrix2fv
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix3fv
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix4fv
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUseProgram
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#ifndef glValidateProgram
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#ifndef glVertexAttrib1f
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#ifndef glVertexAttrib1fv
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttrib2f
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#ifndef glVertexAttrib2fv
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttrib3f
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#ifndef glVertexAttrib3fv
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttrib4f
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#ifndef glVertexAttrib4fv
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttribPointer
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#ifndef glViewport
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ES_VERSION_2_0)
#endif // defined(__gles2_gl2_h_)
#if defined(__gles2_gl2ext_h_)
#if defined(GL_AMD_framebuffer_multisample_advanced)
#ifndef glNamedRenderbufferStorageMultisampleAdvancedAMD
#define glNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer, samples, storageSamples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleAdvancedAMD_debug((renderbuffer), (samples), (storageSamples), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glNamedRenderbufferStorageMultisampleAdvancedAMD_debug(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glRenderbufferStorageMultisampleAdvancedAMD
#define glRenderbufferStorageMultisampleAdvancedAMD(target, samples, storageSamples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleAdvancedAMD_debug((target), (samples), (storageSamples), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorageMultisampleAdvancedAMD_debug(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_AMD_framebuffer_multisample_advanced)
#if defined(GL_AMD_performance_monitor)
#ifndef glBeginPerfMonitorAMD
#define glBeginPerfMonitorAMD(monitor) glatter_glBeginPerfMonitorAMD_debug((monitor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBeginPerfMonitorAMD_debug(GLuint monitor, const char* file, int line);
#ifndef glDeletePerfMonitorsAMD
#define glDeletePerfMonitorsAMD(n, monitors) glatter_glDeletePerfMonitorsAMD_debug((n), (monitors), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeletePerfMonitorsAMD_debug(GLsizei n, GLuint *monitors, const char* file, int line);
#ifndef glEndPerfMonitorAMD
#define glEndPerfMonitorAMD(monitor) glatter_glEndPerfMonitorAMD_debug((monitor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEndPerfMonitorAMD_debug(GLuint monitor, const char* file, int line);
#ifndef glGenPerfMonitorsAMD
#define glGenPerfMonitorsAMD(n, monitors) glatter_glGenPerfMonitorsAMD_debug((n), (monitors), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenPerfMonitorsAMD_debug(GLsizei n, GLuint *monitors, const char* file, int line);
#ifndef glGetPerfMonitorCounterDataAMD
#define glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) glatter_glGetPerfMonitorCounterDataAMD_debug((monitor), (pname), (dataSize), (data), (bytesWritten), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPerfMonitorCounterDataAMD_debug(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten, const char* file, int line);
#ifndef glGetPerfMonitorCounterInfoAMD
#define glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) glatter_glGetPerfMonitorCounterInfoAMD_debug((group), (counter), (pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPerfMonitorCounterInfoAMD_debug(GLuint group, GLuint counter, GLenum pname, void *data, const char* file, int line);
#ifndef glGetPerfMonitorCounterStringAMD
#define glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) glatter_glGetPerfMonitorCounterStringAMD_debug((group), (counter), (bufSize), (length), (counterString), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPerfMonitorCounterStringAMD_debug(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString, const char* file, int line);
#ifndef glGetPerfMonitorCountersAMD
#define glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) glatter_glGetPerfMonitorCountersAMD_debug((group), (numCounters), (maxActiveCounters), (counterSize), (counters), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPerfMonitorCountersAMD_debug(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters, const char* file, int line);
#ifndef glGetPerfMonitorGroupStringAMD
#define glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) glatter_glGetPerfMonitorGroupStringAMD_debug((group), (bufSize), (length), (groupString), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPerfMonitorGroupStringAMD_debug(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString, const char* file, int line);
#ifndef glGetPerfMonitorGroupsAMD
#define glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) glatter_glGetPerfMonitorGroupsAMD_debug((numGroups), (groupsSize), (groups), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPerfMonitorGroupsAMD_debug(GLint *numGroups, GLsizei groupsSize, GLuint *groups, const char* file, int line);
#ifndef glSelectPerfMonitorCountersAMD
#define glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) glatter_glSelectPerfMonitorCountersAMD_debug((monitor), (enable), (group), (numCounters), (counterList), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSelectPerfMonitorCountersAMD_debug(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList, const char* file, int line);
#endif // defined(GL_AMD_performance_monitor)
#if defined(GL_ANGLE_framebuffer_blit)
#ifndef glBlitFramebufferANGLE
#define glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferANGLE_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlitFramebufferANGLE_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#endif // defined(GL_ANGLE_framebuffer_blit)
#if defined(GL_ANGLE_framebuffer_multisample)
#ifndef glRenderbufferStorageMultisampleANGLE
#define glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleANGLE_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorageMultisampleANGLE_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ANGLE_framebuffer_multisample)
#if defined(GL_ANGLE_instanced_arrays)
#ifndef glDrawArraysInstancedANGLE
#define glDrawArraysInstancedANGLE(mode, first, count, primcount) glatter_glDrawArraysInstancedANGLE_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawArraysInstancedANGLE_debug(GLenum mode, GLint first, GLsizei count, GLsizei primcount, const char* file, int line);
#ifndef glDrawElementsInstancedANGLE
#define glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedANGLE_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsInstancedANGLE_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#ifndef glVertexAttribDivisorANGLE
#define glVertexAttribDivisorANGLE(index, divisor) glatter_glVertexAttribDivisorANGLE_debug((index), (divisor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribDivisorANGLE_debug(GLuint index, GLuint divisor, const char* file, int line);
#endif // defined(GL_ANGLE_instanced_arrays)
#if defined(GL_ANGLE_translated_shader_source)
#ifndef glGetTranslatedShaderSourceANGLE
#define glGetTranslatedShaderSourceANGLE(shader, bufsize, length, source) glatter_glGetTranslatedShaderSourceANGLE_debug((shader), (bufsize), (length), (source), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTranslatedShaderSourceANGLE_debug(GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source, const char* file, int line);
#endif // defined(GL_ANGLE_translated_shader_source)
#if defined(GL_APPLE_copy_texture_levels)
#ifndef glCopyTextureLevelsAPPLE
#define glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount) glatter_glCopyTextureLevelsAPPLE_debug((destinationTexture), (sourceTexture), (sourceBaseLevel), (sourceLevelCount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTextureLevelsAPPLE_debug(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount, const char* file, int line);
#endif // defined(GL_APPLE_copy_texture_levels)
#if defined(GL_APPLE_framebuffer_multisample)
#ifndef glRenderbufferStorageMultisampleAPPLE
#define glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleAPPLE_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorageMultisampleAPPLE_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glResolveMultisampleFramebufferAPPLE
#define glResolveMultisampleFramebufferAPPLE() glatter_glResolveMultisampleFramebufferAPPLE_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glResolveMultisampleFramebufferAPPLE_debug(const char* file, int line);
#endif // defined(GL_APPLE_framebuffer_multisample)
#if defined(GL_APPLE_sync)
#ifndef glClientWaitSyncAPPLE
#define glClientWaitSyncAPPLE(sync, flags, timeout) glatter_glClientWaitSyncAPPLE_debug((sync), (flags), (timeout), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glClientWaitSyncAPPLE_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#ifndef glDeleteSyncAPPLE
#define glDeleteSyncAPPLE(sync) glatter_glDeleteSyncAPPLE_debug((sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteSyncAPPLE_debug(GLsync sync, const char* file, int line);
#ifndef glFenceSyncAPPLE
#define glFenceSyncAPPLE(condition, flags) glatter_glFenceSyncAPPLE_debug((condition), (flags), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLsync glatter_glFenceSyncAPPLE_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#ifndef glGetInteger64vAPPLE
#define glGetInteger64vAPPLE(pname, params) glatter_glGetInteger64vAPPLE_debug((pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetInteger64vAPPLE_debug(GLenum pname, GLint64 *params, const char* file, int line);
#ifndef glGetSyncivAPPLE
#define glGetSyncivAPPLE(sync, pname, bufSize, length, values) glatter_glGetSyncivAPPLE_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSyncivAPPLE_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#ifndef glIsSyncAPPLE
#define glIsSyncAPPLE(sync) glatter_glIsSyncAPPLE_debug((sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsSyncAPPLE_debug(GLsync sync, const char* file, int line);
#ifndef glWaitSyncAPPLE
#define glWaitSyncAPPLE(sync, flags, timeout) glatter_glWaitSyncAPPLE_debug((sync), (flags), (timeout), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glWaitSyncAPPLE_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_APPLE_sync)
#if defined(GL_EXT_EGL_image_storage)
#ifndef glEGLImageTargetTexStorageEXT
#define glEGLImageTargetTexStorageEXT(target, image, attrib_list) glatter_glEGLImageTargetTexStorageEXT_debug((target), (image), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEGLImageTargetTexStorageEXT_debug(GLenum target, GLeglImageOES image, const GLint* attrib_list, const char* file, int line);
#ifndef glEGLImageTargetTextureStorageEXT
#define glEGLImageTargetTextureStorageEXT(texture, image, attrib_list) glatter_glEGLImageTargetTextureStorageEXT_debug((texture), (image), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEGLImageTargetTextureStorageEXT_debug(GLuint texture, GLeglImageOES image, const GLint* attrib_list, const char* file, int line);
#endif // defined(GL_EXT_EGL_image_storage)
#if defined(GL_EXT_base_instance)
#ifndef glDrawArraysInstancedBaseInstanceEXT
#define glDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstanceEXT_debug((mode), (first), (count), (instancecount), (baseinstance), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawArraysInstancedBaseInstanceEXT_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#ifndef glDrawElementsInstancedBaseInstanceEXT
#define glDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstanceEXT_debug((mode), (count), (type), (indices), (instancecount), (baseinstance), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsInstancedBaseInstanceEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#ifndef glDrawElementsInstancedBaseVertexBaseInstanceEXT
#define glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstanceEXT_debug((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsInstancedBaseVertexBaseInstanceEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance, const char* file, int line);
#endif // defined(GL_EXT_base_instance)
#if defined(GL_EXT_blend_func_extended)
#ifndef glBindFragDataLocationEXT
#define glBindFragDataLocationEXT(program, color, name) glatter_glBindFragDataLocationEXT_debug((program), (color), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindFragDataLocationEXT_debug(GLuint program, GLuint color, const GLchar *name, const char* file, int line);
#ifndef glBindFragDataLocationIndexedEXT
#define glBindFragDataLocationIndexedEXT(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexedEXT_debug((program), (colorNumber), (index), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindFragDataLocationIndexedEXT_debug(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name, const char* file, int line);
#ifndef glGetFragDataIndexEXT
#define glGetFragDataIndexEXT(program, name) glatter_glGetFragDataIndexEXT_debug((program), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetFragDataIndexEXT_debug(GLuint program, const GLchar *name, const char* file, int line);
#ifndef glGetProgramResourceLocationIndexEXT
#define glGetProgramResourceLocationIndexEXT(program, programInterface, name) glatter_glGetProgramResourceLocationIndexEXT_debug((program), (programInterface), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetProgramResourceLocationIndexEXT_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#endif // defined(GL_EXT_blend_func_extended)
#if defined(GL_EXT_buffer_storage)
#ifndef glBufferStorageEXT
#define glBufferStorageEXT(target, size, data, flags) glatter_glBufferStorageEXT_debug((target), (size), (data), (flags), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBufferStorageEXT_debug(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags, const char* file, int line);
#endif // defined(GL_EXT_buffer_storage)
#if defined(GL_EXT_clear_texture)
#ifndef glClearTexImageEXT
#define glClearTexImageEXT(texture, level, format, type, data) glatter_glClearTexImageEXT_debug((texture), (level), (format), (type), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearTexImageEXT_debug(GLuint texture, GLint level, GLenum format, GLenum type, const void *data, const char* file, int line);
#ifndef glClearTexSubImageEXT
#define glClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImageEXT_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearTexSubImageEXT_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data, const char* file, int line);
#endif // defined(GL_EXT_clear_texture)
#if defined(GL_EXT_clip_control)
#ifndef glClipControlEXT
#define glClipControlEXT(origin, depth) glatter_glClipControlEXT_debug((origin), (depth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClipControlEXT_debug(GLenum origin, GLenum depth, const char* file, int line);
#endif // defined(GL_EXT_clip_control)
#if defined(GL_EXT_copy_image)
#ifndef glCopyImageSubDataEXT
#define glCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubDataEXT_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyImageSubDataEXT_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#endif // defined(GL_EXT_copy_image)
#if defined(GL_EXT_debug_label)
#ifndef glGetObjectLabelEXT
#define glGetObjectLabelEXT(type, object, bufSize, length, label) glatter_glGetObjectLabelEXT_debug((type), (object), (bufSize), (length), (label), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetObjectLabelEXT_debug(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#ifndef glLabelObjectEXT
#define glLabelObjectEXT(type, object, length, label) glatter_glLabelObjectEXT_debug((type), (object), (length), (label), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLabelObjectEXT_debug(GLenum type, GLuint object, GLsizei length, const GLchar *label, const char* file, int line);
#endif // defined(GL_EXT_debug_label)
#if defined(GL_EXT_debug_marker)
#ifndef glInsertEventMarkerEXT
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glInsertEventMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#ifndef glPopGroupMarkerEXT
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPopGroupMarkerEXT_debug(const char* file, int line);
#ifndef glPushGroupMarkerEXT
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPushGroupMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_discard_framebuffer)
#ifndef glDiscardFramebufferEXT
#define glDiscardFramebufferEXT(target, numAttachments, attachments) glatter_glDiscardFramebufferEXT_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDiscardFramebufferEXT_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#endif // defined(GL_EXT_discard_framebuffer)
#if defined(GL_EXT_disjoint_timer_query)
#ifndef glBeginQueryEXT
#define glBeginQueryEXT(target, id) glatter_glBeginQueryEXT_debug((target), (id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBeginQueryEXT_debug(GLenum target, GLuint id, const char* file, int line);
#ifndef glDeleteQueriesEXT
#define glDeleteQueriesEXT(n, ids) glatter_glDeleteQueriesEXT_debug((n), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteQueriesEXT_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#ifndef glEndQueryEXT
#define glEndQueryEXT(target) glatter_glEndQueryEXT_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEndQueryEXT_debug(GLenum target, const char* file, int line);
#ifndef glGenQueriesEXT
#define glGenQueriesEXT(n, ids) glatter_glGenQueriesEXT_debug((n), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenQueriesEXT_debug(GLsizei n, GLuint *ids, const char* file, int line);
#ifndef glGetQueryObjecti64vEXT
#define glGetQueryObjecti64vEXT(id, pname, params) glatter_glGetQueryObjecti64vEXT_debug((id), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetQueryObjecti64vEXT_debug(GLuint id, GLenum pname, GLint64 *params, const char* file, int line);
#ifndef glGetQueryObjectivEXT
#define glGetQueryObjectivEXT(id, pname, params) glatter_glGetQueryObjectivEXT_debug((id), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetQueryObjectivEXT_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetQueryObjectui64vEXT
#define glGetQueryObjectui64vEXT(id, pname, params) glatter_glGetQueryObjectui64vEXT_debug((id), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetQueryObjectui64vEXT_debug(GLuint id, GLenum pname, GLuint64 *params, const char* file, int line);
#ifndef glGetQueryObjectuivEXT
#define glGetQueryObjectuivEXT(id, pname, params) glatter_glGetQueryObjectuivEXT_debug((id), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetQueryObjectuivEXT_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#ifndef glGetQueryivEXT
#define glGetQueryivEXT(target, pname, params) glatter_glGetQueryivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetQueryivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glIsQueryEXT
#define glIsQueryEXT(id) glatter_glIsQueryEXT_debug((id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsQueryEXT_debug(GLuint id, const char* file, int line);
#ifndef glQueryCounterEXT
#define glQueryCounterEXT(id, target) glatter_glQueryCounterEXT_debug((id), (target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glQueryCounterEXT_debug(GLuint id, GLenum target, const char* file, int line);
#endif // defined(GL_EXT_disjoint_timer_query)
#if defined(GL_EXT_draw_buffers)
#ifndef glDrawBuffersEXT
#define glDrawBuffersEXT(n, bufs) glatter_glDrawBuffersEXT_debug((n), (bufs), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawBuffersEXT_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#endif // defined(GL_EXT_draw_buffers)
#if defined(GL_EXT_draw_buffers_indexed)
#ifndef glBlendEquationSeparateiEXT
#define glBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiEXT_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquationSeparateiEXT_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#ifndef glBlendEquationiEXT
#define glBlendEquationiEXT(buf, mode) glatter_glBlendEquationiEXT_debug((buf), (mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquationiEXT_debug(GLuint buf, GLenum mode, const char* file, int line);
#ifndef glBlendFuncSeparateiEXT
#define glBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiEXT_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFuncSeparateiEXT_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#ifndef glBlendFunciEXT
#define glBlendFunciEXT(buf, src, dst) glatter_glBlendFunciEXT_debug((buf), (src), (dst), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFunciEXT_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#ifndef glColorMaskiEXT
#define glColorMaskiEXT(index, r, g, b, a) glatter_glColorMaskiEXT_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glColorMaskiEXT_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#ifndef glDisableiEXT
#define glDisableiEXT(target, index) glatter_glDisableiEXT_debug((target), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisableiEXT_debug(GLenum target, GLuint index, const char* file, int line);
#ifndef glEnableiEXT
#define glEnableiEXT(target, index) glatter_glEnableiEXT_debug((target), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnableiEXT_debug(GLenum target, GLuint index, const char* file, int line);
#ifndef glIsEnablediEXT
#define glIsEnablediEXT(target, index) glatter_glIsEnablediEXT_debug((target), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsEnablediEXT_debug(GLenum target, GLuint index, const char* file, int line);
#endif // defined(GL_EXT_draw_buffers_indexed)
#if defined(GL_EXT_draw_elements_base_vertex)
#ifndef glDrawElementsBaseVertexEXT
#define glDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertexEXT_debug((mode), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsBaseVertexEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#ifndef glDrawElementsInstancedBaseVertexEXT
#define glDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertexEXT_debug((mode), (count), (type), (indices), (instancecount), (basevertex), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsInstancedBaseVertexEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, const char* file, int line);
#ifndef glDrawRangeElementsBaseVertexEXT
#define glDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertexEXT_debug((mode), (start), (end), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawRangeElementsBaseVertexEXT_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#endif // defined(GL_EXT_draw_elements_base_vertex)
#if defined(GL_EXT_draw_instanced)
#ifndef glDrawArraysInstancedEXT
#define glDrawArraysInstancedEXT(mode, start, count, primcount) glatter_glDrawArraysInstancedEXT_debug((mode), (start), (count), (primcount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawArraysInstancedEXT_debug(GLenum mode, GLint start, GLsizei count, GLsizei primcount, const char* file, int line);
#ifndef glDrawElementsInstancedEXT
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedEXT_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsInstancedEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_EXT_draw_instanced)
#if defined(GL_EXT_draw_transform_feedback)
#ifndef glDrawTransformFeedbackEXT
#define glDrawTransformFeedbackEXT(mode, id) glatter_glDrawTransformFeedbackEXT_debug((mode), (id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawTransformFeedbackEXT_debug(GLenum mode, GLuint id, const char* file, int line);
#ifndef glDrawTransformFeedbackInstancedEXT
#define glDrawTransformFeedbackInstancedEXT(mode, id, instancecount) glatter_glDrawTransformFeedbackInstancedEXT_debug((mode), (id), (instancecount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawTransformFeedbackInstancedEXT_debug(GLenum mode, GLuint id, GLsizei instancecount, const char* file, int line);
#endif // defined(GL_EXT_draw_transform_feedback)
#if defined(GL_EXT_external_buffer)
#ifndef glBufferStorageExternalEXT
#define glBufferStorageExternalEXT(target, offset, size, clientBuffer, flags) glatter_glBufferStorageExternalEXT_debug((target), (offset), (size), (clientBuffer), (flags), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBufferStorageExternalEXT_debug(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags, const char* file, int line);
#ifndef glNamedBufferStorageExternalEXT
#define glNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags) glatter_glNamedBufferStorageExternalEXT_debug((buffer), (offset), (size), (clientBuffer), (flags), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glNamedBufferStorageExternalEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags, const char* file, int line);
#endif // defined(GL_EXT_external_buffer)
#if defined(GL_EXT_geometry_shader)
#ifndef glFramebufferTextureEXT
#define glFramebufferTextureEXT(target, attachment, texture, level) glatter_glFramebufferTextureEXT_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTextureEXT_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#endif // defined(GL_EXT_geometry_shader)
#if defined(GL_EXT_instanced_arrays)
#ifndef glVertexAttribDivisorEXT
#define glVertexAttribDivisorEXT(index, divisor) glatter_glVertexAttribDivisorEXT_debug((index), (divisor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribDivisorEXT_debug(GLuint index, GLuint divisor, const char* file, int line);
#endif // defined(GL_EXT_instanced_arrays)
#if defined(GL_EXT_map_buffer_range)
#ifndef glFlushMappedBufferRangeEXT
#define glFlushMappedBufferRangeEXT(target, offset, length) glatter_glFlushMappedBufferRangeEXT_debug((target), (offset), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFlushMappedBufferRangeEXT_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#ifndef glMapBufferRangeEXT
#define glMapBufferRangeEXT(target, offset, length, access) glatter_glMapBufferRangeEXT_debug((target), (offset), (length), (access), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void * glatter_glMapBufferRangeEXT_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#endif // defined(GL_EXT_map_buffer_range)
#if defined(GL_EXT_memory_object)
#ifndef glBufferStorageMemEXT
#define glBufferStorageMemEXT(target, size, memory, offset) glatter_glBufferStorageMemEXT_debug((target), (size), (memory), (offset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBufferStorageMemEXT_debug(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset, const char* file, int line);
#ifndef glCreateMemoryObjectsEXT
#define glCreateMemoryObjectsEXT(n, memoryObjects) glatter_glCreateMemoryObjectsEXT_debug((n), (memoryObjects), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCreateMemoryObjectsEXT_debug(GLsizei n, GLuint *memoryObjects, const char* file, int line);
#ifndef glDeleteMemoryObjectsEXT
#define glDeleteMemoryObjectsEXT(n, memoryObjects) glatter_glDeleteMemoryObjectsEXT_debug((n), (memoryObjects), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteMemoryObjectsEXT_debug(GLsizei n, const GLuint *memoryObjects, const char* file, int line);
#ifndef glGetMemoryObjectParameterivEXT
#define glGetMemoryObjectParameterivEXT(memoryObject, pname, params) glatter_glGetMemoryObjectParameterivEXT_debug((memoryObject), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetMemoryObjectParameterivEXT_debug(GLuint memoryObject, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetUnsignedBytei_vEXT
#define glGetUnsignedBytei_vEXT(target, index, data) glatter_glGetUnsignedBytei_vEXT_debug((target), (index), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUnsignedBytei_vEXT_debug(GLenum target, GLuint index, GLubyte *data, const char* file, int line);
#ifndef glGetUnsignedBytevEXT
#define glGetUnsignedBytevEXT(pname, data) glatter_glGetUnsignedBytevEXT_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUnsignedBytevEXT_debug(GLenum pname, GLubyte *data, const char* file, int line);
#ifndef glIsMemoryObjectEXT
#define glIsMemoryObjectEXT(memoryObject) glatter_glIsMemoryObjectEXT_debug((memoryObject), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsMemoryObjectEXT_debug(GLuint memoryObject, const char* file, int line);
#ifndef glMemoryObjectParameterivEXT
#define glMemoryObjectParameterivEXT(memoryObject, pname, params) glatter_glMemoryObjectParameterivEXT_debug((memoryObject), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMemoryObjectParameterivEXT_debug(GLuint memoryObject, GLenum pname, const GLint *params, const char* file, int line);
#ifndef glNamedBufferStorageMemEXT
#define glNamedBufferStorageMemEXT(buffer, size, memory, offset) glatter_glNamedBufferStorageMemEXT_debug((buffer), (size), (memory), (offset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glNamedBufferStorageMemEXT_debug(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset, const char* file, int line);
#ifndef glTexStorageMem2DEXT
#define glTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset) glatter_glTexStorageMem2DEXT_debug((target), (levels), (internalFormat), (width), (height), (memory), (offset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorageMem2DEXT_debug(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset, const char* file, int line);
#ifndef glTexStorageMem2DMultisampleEXT
#define glTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset) glatter_glTexStorageMem2DMultisampleEXT_debug((target), (samples), (internalFormat), (width), (height), (fixedSampleLocations), (memory), (offset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorageMem2DMultisampleEXT_debug(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset, const char* file, int line);
#ifndef glTexStorageMem3DEXT
#define glTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset) glatter_glTexStorageMem3DEXT_debug((target), (levels), (internalFormat), (width), (height), (depth), (memory), (offset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorageMem3DEXT_debug(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, const char* file, int line);
#ifndef glTexStorageMem3DMultisampleEXT
#define glTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset) glatter_glTexStorageMem3DMultisampleEXT_debug((target), (samples), (internalFormat), (width), (height), (depth), (fixedSampleLocations), (memory), (offset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorageMem3DMultisampleEXT_debug(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset, const char* file, int line);
#ifndef glTextureStorageMem2DEXT
#define glTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset) glatter_glTextureStorageMem2DEXT_debug((texture), (levels), (internalFormat), (width), (height), (memory), (offset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTextureStorageMem2DEXT_debug(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset, const char* file, int line);
#ifndef glTextureStorageMem2DMultisampleEXT
#define glTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset) glatter_glTextureStorageMem2DMultisampleEXT_debug((texture), (samples), (internalFormat), (width), (height), (fixedSampleLocations), (memory), (offset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTextureStorageMem2DMultisampleEXT_debug(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset, const char* file, int line);
#ifndef glTextureStorageMem3DEXT
#define glTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset) glatter_glTextureStorageMem3DEXT_debug((texture), (levels), (internalFormat), (width), (height), (depth), (memory), (offset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTextureStorageMem3DEXT_debug(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, const char* file, int line);
#ifndef glTextureStorageMem3DMultisampleEXT
#define glTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset) glatter_glTextureStorageMem3DMultisampleEXT_debug((texture), (samples), (internalFormat), (width), (height), (depth), (fixedSampleLocations), (memory), (offset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTextureStorageMem3DMultisampleEXT_debug(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset, const char* file, int line);
#endif // defined(GL_EXT_memory_object)
#if defined(GL_EXT_memory_object_fd)
#ifndef glImportMemoryFdEXT
#define glImportMemoryFdEXT(memory, size, handleType, fd) glatter_glImportMemoryFdEXT_debug((memory), (size), (handleType), (fd), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glImportMemoryFdEXT_debug(GLuint memory, GLuint64 size, GLenum handleType, GLint fd, const char* file, int line);
#endif // defined(GL_EXT_memory_object_fd)
#if defined(GL_EXT_memory_object_win32)
#ifndef glImportMemoryWin32HandleEXT
#define glImportMemoryWin32HandleEXT(memory, size, handleType, handle) glatter_glImportMemoryWin32HandleEXT_debug((memory), (size), (handleType), (handle), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glImportMemoryWin32HandleEXT_debug(GLuint memory, GLuint64 size, GLenum handleType, void *handle, const char* file, int line);
#ifndef glImportMemoryWin32NameEXT
#define glImportMemoryWin32NameEXT(memory, size, handleType, name) glatter_glImportMemoryWin32NameEXT_debug((memory), (size), (handleType), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glImportMemoryWin32NameEXT_debug(GLuint memory, GLuint64 size, GLenum handleType, const void *name, const char* file, int line);
#endif // defined(GL_EXT_memory_object_win32)
#if defined(GL_EXT_multi_draw_arrays)
#ifndef glMultiDrawArraysEXT
#define glMultiDrawArraysEXT(mode, first, count, primcount) glatter_glMultiDrawArraysEXT_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMultiDrawArraysEXT_debug(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount, const char* file, int line);
#ifndef glMultiDrawElementsEXT
#define glMultiDrawElementsEXT(mode, count, type, indices, primcount) glatter_glMultiDrawElementsEXT_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMultiDrawElementsEXT_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_EXT_multi_draw_arrays)
#if defined(GL_EXT_multi_draw_indirect)
#ifndef glMultiDrawArraysIndirectEXT
#define glMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirectEXT_debug((mode), (indirect), (drawcount), (stride), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMultiDrawArraysIndirectEXT_debug(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#ifndef glMultiDrawElementsIndirectEXT
#define glMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirectEXT_debug((mode), (type), (indirect), (drawcount), (stride), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMultiDrawElementsIndirectEXT_debug(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#endif // defined(GL_EXT_multi_draw_indirect)
#if defined(GL_EXT_multisampled_render_to_texture)
#ifndef glFramebufferTexture2DMultisampleEXT
#define glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples) glatter_glFramebufferTexture2DMultisampleEXT_debug((target), (attachment), (textarget), (texture), (level), (samples), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTexture2DMultisampleEXT_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples, const char* file, int line);
#ifndef glRenderbufferStorageMultisampleEXT
#define glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleEXT_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorageMultisampleEXT_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_EXT_multisampled_render_to_texture)
#if defined(GL_EXT_multiview_draw_buffers)
#ifndef glDrawBuffersIndexedEXT
#define glDrawBuffersIndexedEXT(n, location, indices) glatter_glDrawBuffersIndexedEXT_debug((n), (location), (indices), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawBuffersIndexedEXT_debug(GLint n, const GLenum *location, const GLint *indices, const char* file, int line);
#ifndef glGetIntegeri_vEXT
#define glGetIntegeri_vEXT(target, index, data) glatter_glGetIntegeri_vEXT_debug((target), (index), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetIntegeri_vEXT_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#ifndef glReadBufferIndexedEXT
#define glReadBufferIndexedEXT(src, index) glatter_glReadBufferIndexedEXT_debug((src), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReadBufferIndexedEXT_debug(GLenum src, GLint index, const char* file, int line);
#endif // defined(GL_EXT_multiview_draw_buffers)
#if defined(GL_EXT_polygon_offset_clamp)
#ifndef glPolygonOffsetClampEXT
#define glPolygonOffsetClampEXT(factor, units, clamp) glatter_glPolygonOffsetClampEXT_debug((factor), (units), (clamp), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPolygonOffsetClampEXT_debug(GLfloat factor, GLfloat units, GLfloat clamp, const char* file, int line);
#endif // defined(GL_EXT_polygon_offset_clamp)
#if defined(GL_EXT_primitive_bounding_box)
#ifndef glPrimitiveBoundingBoxEXT
#define glPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxEXT_debug((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPrimitiveBoundingBoxEXT_debug(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, const char* file, int line);
#endif // defined(GL_EXT_primitive_bounding_box)
#if defined(GL_EXT_raster_multisample)
#ifndef glRasterSamplesEXT
#define glRasterSamplesEXT(samples, fixedsamplelocations) glatter_glRasterSamplesEXT_debug((samples), (fixedsamplelocations), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRasterSamplesEXT_debug(GLuint samples, GLboolean fixedsamplelocations, const char* file, int line);
#endif // defined(GL_EXT_raster_multisample)
#if defined(GL_EXT_robustness)
#ifndef glGetGraphicsResetStatusEXT
#define glGetGraphicsResetStatusEXT() glatter_glGetGraphicsResetStatusEXT_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glGetGraphicsResetStatusEXT_debug(const char* file, int line);
#ifndef glGetnUniformfvEXT
#define glGetnUniformfvEXT(program, location, bufSize, params) glatter_glGetnUniformfvEXT_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetnUniformfvEXT_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#ifndef glGetnUniformivEXT
#define glGetnUniformivEXT(program, location, bufSize, params) glatter_glGetnUniformivEXT_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetnUniformivEXT_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#ifndef glReadnPixelsEXT
#define glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsEXT_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReadnPixelsEXT_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#endif // defined(GL_EXT_robustness)
#if defined(GL_EXT_semaphore)
#ifndef glDeleteSemaphoresEXT
#define glDeleteSemaphoresEXT(n, semaphores) glatter_glDeleteSemaphoresEXT_debug((n), (semaphores), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteSemaphoresEXT_debug(GLsizei n, const GLuint *semaphores, const char* file, int line);
#ifndef glGenSemaphoresEXT
#define glGenSemaphoresEXT(n, semaphores) glatter_glGenSemaphoresEXT_debug((n), (semaphores), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenSemaphoresEXT_debug(GLsizei n, GLuint *semaphores, const char* file, int line);
#ifndef glGetSemaphoreParameterui64vEXT
#define glGetSemaphoreParameterui64vEXT(semaphore, pname, params) glatter_glGetSemaphoreParameterui64vEXT_debug((semaphore), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSemaphoreParameterui64vEXT_debug(GLuint semaphore, GLenum pname, GLuint64 *params, const char* file, int line);
#ifndef glIsSemaphoreEXT
#define glIsSemaphoreEXT(semaphore) glatter_glIsSemaphoreEXT_debug((semaphore), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsSemaphoreEXT_debug(GLuint semaphore, const char* file, int line);
#ifndef glSemaphoreParameterui64vEXT
#define glSemaphoreParameterui64vEXT(semaphore, pname, params) glatter_glSemaphoreParameterui64vEXT_debug((semaphore), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSemaphoreParameterui64vEXT_debug(GLuint semaphore, GLenum pname, const GLuint64 *params, const char* file, int line);
#ifndef glSignalSemaphoreEXT
#define glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts) glatter_glSignalSemaphoreEXT_debug((semaphore), (numBufferBarriers), (buffers), (numTextureBarriers), (textures), (dstLayouts), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSignalSemaphoreEXT_debug(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts, const char* file, int line);
#ifndef glWaitSemaphoreEXT
#define glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts) glatter_glWaitSemaphoreEXT_debug((semaphore), (numBufferBarriers), (buffers), (numTextureBarriers), (textures), (srcLayouts), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glWaitSemaphoreEXT_debug(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts, const char* file, int line);
#endif // defined(GL_EXT_semaphore)
#if defined(GL_EXT_semaphore_fd)
#ifndef glImportSemaphoreFdEXT
#define glImportSemaphoreFdEXT(semaphore, handleType, fd) glatter_glImportSemaphoreFdEXT_debug((semaphore), (handleType), (fd), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glImportSemaphoreFdEXT_debug(GLuint semaphore, GLenum handleType, GLint fd, const char* file, int line);
#endif // defined(GL_EXT_semaphore_fd)
#if defined(GL_EXT_semaphore_win32)
#ifndef glImportSemaphoreWin32HandleEXT
#define glImportSemaphoreWin32HandleEXT(semaphore, handleType, handle) glatter_glImportSemaphoreWin32HandleEXT_debug((semaphore), (handleType), (handle), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glImportSemaphoreWin32HandleEXT_debug(GLuint semaphore, GLenum handleType, void *handle, const char* file, int line);
#ifndef glImportSemaphoreWin32NameEXT
#define glImportSemaphoreWin32NameEXT(semaphore, handleType, name) glatter_glImportSemaphoreWin32NameEXT_debug((semaphore), (handleType), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glImportSemaphoreWin32NameEXT_debug(GLuint semaphore, GLenum handleType, const void *name, const char* file, int line);
#endif // defined(GL_EXT_semaphore_win32)
#if defined(GL_EXT_separate_shader_objects)
#ifndef glActiveShaderProgramEXT
#define glActiveShaderProgramEXT(pipeline, program) glatter_glActiveShaderProgramEXT_debug((pipeline), (program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glActiveShaderProgramEXT_debug(GLuint pipeline, GLuint program, const char* file, int line);
#ifndef glBindProgramPipelineEXT
#define glBindProgramPipelineEXT(pipeline) glatter_glBindProgramPipelineEXT_debug((pipeline), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindProgramPipelineEXT_debug(GLuint pipeline, const char* file, int line);
#ifndef glCreateShaderProgramvEXT
#define glCreateShaderProgramvEXT(type, count, strings) glatter_glCreateShaderProgramvEXT_debug((type), (count), (strings), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glCreateShaderProgramvEXT_debug(GLenum type, GLsizei count, const GLchar **strings, const char* file, int line);
#ifndef glDeleteProgramPipelinesEXT
#define glDeleteProgramPipelinesEXT(n, pipelines) glatter_glDeleteProgramPipelinesEXT_debug((n), (pipelines), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteProgramPipelinesEXT_debug(GLsizei n, const GLuint *pipelines, const char* file, int line);
#ifndef glGenProgramPipelinesEXT
#define glGenProgramPipelinesEXT(n, pipelines) glatter_glGenProgramPipelinesEXT_debug((n), (pipelines), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenProgramPipelinesEXT_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#ifndef glGetProgramPipelineInfoLogEXT
#define glGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLogEXT_debug((pipeline), (bufSize), (length), (infoLog), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramPipelineInfoLogEXT_debug(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#ifndef glGetProgramPipelineivEXT
#define glGetProgramPipelineivEXT(pipeline, pname, params) glatter_glGetProgramPipelineivEXT_debug((pipeline), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramPipelineivEXT_debug(GLuint pipeline, GLenum pname, GLint *params, const char* file, int line);
#ifndef glIsProgramPipelineEXT
#define glIsProgramPipelineEXT(pipeline) glatter_glIsProgramPipelineEXT_debug((pipeline), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsProgramPipelineEXT_debug(GLuint pipeline, const char* file, int line);
#ifndef glProgramParameteriEXT
#define glProgramParameteriEXT(program, pname, value) glatter_glProgramParameteriEXT_debug((program), (pname), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramParameteriEXT_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#ifndef glProgramUniform1fEXT
#define glProgramUniform1fEXT(program, location, v0) glatter_glProgramUniform1fEXT_debug((program), (location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1fEXT_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#ifndef glProgramUniform1fvEXT
#define glProgramUniform1fvEXT(program, location, count, value) glatter_glProgramUniform1fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniform1iEXT
#define glProgramUniform1iEXT(program, location, v0) glatter_glProgramUniform1iEXT_debug((program), (location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1iEXT_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#ifndef glProgramUniform1ivEXT
#define glProgramUniform1ivEXT(program, location, count, value) glatter_glProgramUniform1ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glProgramUniform1uiEXT
#define glProgramUniform1uiEXT(program, location, v0) glatter_glProgramUniform1uiEXT_debug((program), (location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1uiEXT_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#ifndef glProgramUniform1uivEXT
#define glProgramUniform1uivEXT(program, location, count, value) glatter_glProgramUniform1uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glProgramUniform2fEXT
#define glProgramUniform2fEXT(program, location, v0, v1) glatter_glProgramUniform2fEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#ifndef glProgramUniform2fvEXT
#define glProgramUniform2fvEXT(program, location, count, value) glatter_glProgramUniform2fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniform2iEXT
#define glProgramUniform2iEXT(program, location, v0, v1) glatter_glProgramUniform2iEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#ifndef glProgramUniform2ivEXT
#define glProgramUniform2ivEXT(program, location, count, value) glatter_glProgramUniform2ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glProgramUniform2uiEXT
#define glProgramUniform2uiEXT(program, location, v0, v1) glatter_glProgramUniform2uiEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#ifndef glProgramUniform2uivEXT
#define glProgramUniform2uivEXT(program, location, count, value) glatter_glProgramUniform2uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glProgramUniform3fEXT
#define glProgramUniform3fEXT(program, location, v0, v1, v2) glatter_glProgramUniform3fEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#ifndef glProgramUniform3fvEXT
#define glProgramUniform3fvEXT(program, location, count, value) glatter_glProgramUniform3fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniform3iEXT
#define glProgramUniform3iEXT(program, location, v0, v1, v2) glatter_glProgramUniform3iEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#ifndef glProgramUniform3ivEXT
#define glProgramUniform3ivEXT(program, location, count, value) glatter_glProgramUniform3ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glProgramUniform3uiEXT
#define glProgramUniform3uiEXT(program, location, v0, v1, v2) glatter_glProgramUniform3uiEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#ifndef glProgramUniform3uivEXT
#define glProgramUniform3uivEXT(program, location, count, value) glatter_glProgramUniform3uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glProgramUniform4fEXT
#define glProgramUniform4fEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4fEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#ifndef glProgramUniform4fvEXT
#define glProgramUniform4fvEXT(program, location, count, value) glatter_glProgramUniform4fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniform4iEXT
#define glProgramUniform4iEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4iEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#ifndef glProgramUniform4ivEXT
#define glProgramUniform4ivEXT(program, location, count, value) glatter_glProgramUniform4ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glProgramUniform4uiEXT
#define glProgramUniform4uiEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4uiEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#ifndef glProgramUniform4uivEXT
#define glProgramUniform4uivEXT(program, location, count, value) glatter_glProgramUniform4uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glProgramUniformMatrix2fvEXT
#define glProgramUniformMatrix2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix2x3fvEXT
#define glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix2x3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix2x4fvEXT
#define glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix2x4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix3fvEXT
#define glProgramUniformMatrix3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix3x2fvEXT
#define glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix3x2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix3x4fvEXT
#define glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix3x4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix4fvEXT
#define glProgramUniformMatrix4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix4x2fvEXT
#define glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix4x2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glProgramUniformMatrix4x3fvEXT
#define glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformMatrix4x3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUseProgramStagesEXT
#define glUseProgramStagesEXT(pipeline, stages, program) glatter_glUseProgramStagesEXT_debug((pipeline), (stages), (program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUseProgramStagesEXT_debug(GLuint pipeline, GLbitfield stages, GLuint program, const char* file, int line);
#ifndef glValidateProgramPipelineEXT
#define glValidateProgramPipelineEXT(pipeline) glatter_glValidateProgramPipelineEXT_debug((pipeline), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glValidateProgramPipelineEXT_debug(GLuint pipeline, const char* file, int line);
#endif // defined(GL_EXT_separate_shader_objects)
#if defined(GL_EXT_shader_framebuffer_fetch_non_coherent)
#ifndef glFramebufferFetchBarrierEXT
#define glFramebufferFetchBarrierEXT() glatter_glFramebufferFetchBarrierEXT_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferFetchBarrierEXT_debug(const char* file, int line);
#endif // defined(GL_EXT_shader_framebuffer_fetch_non_coherent)
#if defined(GL_EXT_shader_pixel_local_storage2)
#ifndef glClearPixelLocalStorageuiEXT
#define glClearPixelLocalStorageuiEXT(offset, n, values) glatter_glClearPixelLocalStorageuiEXT_debug((offset), (n), (values), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearPixelLocalStorageuiEXT_debug(GLsizei offset, GLsizei n, const GLuint *values, const char* file, int line);
#ifndef glFramebufferPixelLocalStorageSizeEXT
#define glFramebufferPixelLocalStorageSizeEXT(target, size) glatter_glFramebufferPixelLocalStorageSizeEXT_debug((target), (size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferPixelLocalStorageSizeEXT_debug(GLuint target, GLsizei size, const char* file, int line);
#ifndef glGetFramebufferPixelLocalStorageSizeEXT
#define glGetFramebufferPixelLocalStorageSizeEXT(target) glatter_glGetFramebufferPixelLocalStorageSizeEXT_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLsizei glatter_glGetFramebufferPixelLocalStorageSizeEXT_debug(GLuint target, const char* file, int line);
#endif // defined(GL_EXT_shader_pixel_local_storage2)
#if defined(GL_EXT_sparse_texture)
#ifndef glTexPageCommitmentEXT
#define glTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexPageCommitmentEXT_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexPageCommitmentEXT_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit, const char* file, int line);
#endif // defined(GL_EXT_sparse_texture)
#if defined(GL_EXT_tessellation_shader)
#ifndef glPatchParameteriEXT
#define glPatchParameteriEXT(pname, value) glatter_glPatchParameteriEXT_debug((pname), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPatchParameteriEXT_debug(GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_EXT_tessellation_shader)
#if defined(GL_EXT_texture_border_clamp)
#ifndef glGetSamplerParameterIivEXT
#define glGetSamplerParameterIivEXT(sampler, pname, params) glatter_glGetSamplerParameterIivEXT_debug((sampler), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSamplerParameterIivEXT_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetSamplerParameterIuivEXT
#define glGetSamplerParameterIuivEXT(sampler, pname, params) glatter_glGetSamplerParameterIuivEXT_debug((sampler), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSamplerParameterIuivEXT_debug(GLuint sampler, GLenum pname, GLuint *params, const char* file, int line);
#ifndef glGetTexParameterIivEXT
#define glGetTexParameterIivEXT(target, pname, params) glatter_glGetTexParameterIivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameterIivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetTexParameterIuivEXT
#define glGetTexParameterIuivEXT(target, pname, params) glatter_glGetTexParameterIuivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameterIuivEXT_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#ifndef glSamplerParameterIivEXT
#define glSamplerParameterIivEXT(sampler, pname, param) glatter_glSamplerParameterIivEXT_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameterIivEXT_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#ifndef glSamplerParameterIuivEXT
#define glSamplerParameterIuivEXT(sampler, pname, param) glatter_glSamplerParameterIuivEXT_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameterIuivEXT_debug(GLuint sampler, GLenum pname, const GLuint *param, const char* file, int line);
#ifndef glTexParameterIivEXT
#define glTexParameterIivEXT(target, pname, params) glatter_glTexParameterIivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterIivEXT_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#ifndef glTexParameterIuivEXT
#define glTexParameterIuivEXT(target, pname, params) glatter_glTexParameterIuivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterIuivEXT_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#endif // defined(GL_EXT_texture_border_clamp)
#if defined(GL_EXT_texture_buffer)
#ifndef glTexBufferEXT
#define glTexBufferEXT(target, internalformat, buffer) glatter_glTexBufferEXT_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexBufferEXT_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#ifndef glTexBufferRangeEXT
#define glTexBufferRangeEXT(target, internalformat, buffer, offset, size) glatter_glTexBufferRangeEXT_debug((target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexBufferRangeEXT_debug(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#endif // defined(GL_EXT_texture_buffer)
#if defined(GL_EXT_texture_storage)
#ifndef glTexStorage1DEXT
#define glTexStorage1DEXT(target, levels, internalformat, width) glatter_glTexStorage1DEXT_debug((target), (levels), (internalformat), (width), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage1DEXT_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#ifndef glTexStorage2DEXT
#define glTexStorage2DEXT(target, levels, internalformat, width, height) glatter_glTexStorage2DEXT_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage2DEXT_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glTexStorage3DEXT
#define glTexStorage3DEXT(target, levels, internalformat, width, height, depth) glatter_glTexStorage3DEXT_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage3DEXT_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#ifndef glTextureStorage1DEXT
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) glatter_glTextureStorage1DEXT_debug((texture), (target), (levels), (internalformat), (width), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTextureStorage1DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#ifndef glTextureStorage2DEXT
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) glatter_glTextureStorage2DEXT_debug((texture), (target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTextureStorage2DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glTextureStorage3DEXT
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) glatter_glTextureStorage3DEXT_debug((texture), (target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTextureStorage3DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(GL_EXT_texture_storage)
#if defined(GL_EXT_texture_view)
#ifndef glTextureViewEXT
#define glTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureViewEXT_debug((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTextureViewEXT_debug(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, const char* file, int line);
#endif // defined(GL_EXT_texture_view)
#if defined(GL_EXT_win32_keyed_mutex)
#ifndef glAcquireKeyedMutexWin32EXT
#define glAcquireKeyedMutexWin32EXT(memory, key, timeout) glatter_glAcquireKeyedMutexWin32EXT_debug((memory), (key), (timeout), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glAcquireKeyedMutexWin32EXT_debug(GLuint memory, GLuint64 key, GLuint timeout, const char* file, int line);
#ifndef glReleaseKeyedMutexWin32EXT
#define glReleaseKeyedMutexWin32EXT(memory, key) glatter_glReleaseKeyedMutexWin32EXT_debug((memory), (key), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glReleaseKeyedMutexWin32EXT_debug(GLuint memory, GLuint64 key, const char* file, int line);
#endif // defined(GL_EXT_win32_keyed_mutex)
#if defined(GL_EXT_window_rectangles)
#ifndef glWindowRectanglesEXT
#define glWindowRectanglesEXT(mode, count, box) glatter_glWindowRectanglesEXT_debug((mode), (count), (box), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glWindowRectanglesEXT_debug(GLenum mode, GLsizei count, const GLint *box, const char* file, int line);
#endif // defined(GL_EXT_window_rectangles)
#if defined(GL_IMG_bindless_texture)
#ifndef glGetTextureHandleIMG
#define glGetTextureHandleIMG(texture) glatter_glGetTextureHandleIMG_debug((texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint64 glatter_glGetTextureHandleIMG_debug(GLuint texture, const char* file, int line);
#ifndef glGetTextureSamplerHandleIMG
#define glGetTextureSamplerHandleIMG(texture, sampler) glatter_glGetTextureSamplerHandleIMG_debug((texture), (sampler), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint64 glatter_glGetTextureSamplerHandleIMG_debug(GLuint texture, GLuint sampler, const char* file, int line);
#ifndef glProgramUniformHandleui64IMG
#define glProgramUniformHandleui64IMG(program, location, value) glatter_glProgramUniformHandleui64IMG_debug((program), (location), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformHandleui64IMG_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#ifndef glProgramUniformHandleui64vIMG
#define glProgramUniformHandleui64vIMG(program, location, count, values) glatter_glProgramUniformHandleui64vIMG_debug((program), (location), (count), (values), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformHandleui64vIMG_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#ifndef glUniformHandleui64IMG
#define glUniformHandleui64IMG(location, value) glatter_glUniformHandleui64IMG_debug((location), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformHandleui64IMG_debug(GLint location, GLuint64 value, const char* file, int line);
#ifndef glUniformHandleui64vIMG
#define glUniformHandleui64vIMG(location, count, value) glatter_glUniformHandleui64vIMG_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformHandleui64vIMG_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#endif // defined(GL_IMG_bindless_texture)
#if defined(GL_IMG_framebuffer_downsample)
#ifndef glFramebufferTexture2DDownsampleIMG
#define glFramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale) glatter_glFramebufferTexture2DDownsampleIMG_debug((target), (attachment), (textarget), (texture), (level), (xscale), (yscale), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTexture2DDownsampleIMG_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale, const char* file, int line);
#ifndef glFramebufferTextureLayerDownsampleIMG
#define glFramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale) glatter_glFramebufferTextureLayerDownsampleIMG_debug((target), (attachment), (texture), (level), (layer), (xscale), (yscale), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTextureLayerDownsampleIMG_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale, const char* file, int line);
#endif // defined(GL_IMG_framebuffer_downsample)
#if defined(GL_IMG_multisampled_render_to_texture)
#ifndef glFramebufferTexture2DMultisampleIMG
#define glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples) glatter_glFramebufferTexture2DMultisampleIMG_debug((target), (attachment), (textarget), (texture), (level), (samples), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTexture2DMultisampleIMG_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples, const char* file, int line);
#ifndef glRenderbufferStorageMultisampleIMG
#define glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleIMG_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorageMultisampleIMG_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_IMG_multisampled_render_to_texture)
#if defined(GL_INTEL_framebuffer_CMAA)
#ifndef glApplyFramebufferAttachmentCMAAINTEL
#define glApplyFramebufferAttachmentCMAAINTEL() glatter_glApplyFramebufferAttachmentCMAAINTEL_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glApplyFramebufferAttachmentCMAAINTEL_debug(const char* file, int line);
#endif // defined(GL_INTEL_framebuffer_CMAA)
#if defined(GL_INTEL_performance_query)
#ifndef glBeginPerfQueryINTEL
#define glBeginPerfQueryINTEL(queryHandle) glatter_glBeginPerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBeginPerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#ifndef glCreatePerfQueryINTEL
#define glCreatePerfQueryINTEL(queryId, queryHandle) glatter_glCreatePerfQueryINTEL_debug((queryId), (queryHandle), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCreatePerfQueryINTEL_debug(GLuint queryId, GLuint *queryHandle, const char* file, int line);
#ifndef glDeletePerfQueryINTEL
#define glDeletePerfQueryINTEL(queryHandle) glatter_glDeletePerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeletePerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#ifndef glEndPerfQueryINTEL
#define glEndPerfQueryINTEL(queryHandle) glatter_glEndPerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEndPerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#ifndef glGetFirstPerfQueryIdINTEL
#define glGetFirstPerfQueryIdINTEL(queryId) glatter_glGetFirstPerfQueryIdINTEL_debug((queryId), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFirstPerfQueryIdINTEL_debug(GLuint *queryId, const char* file, int line);
#ifndef glGetNextPerfQueryIdINTEL
#define glGetNextPerfQueryIdINTEL(queryId, nextQueryId) glatter_glGetNextPerfQueryIdINTEL_debug((queryId), (nextQueryId), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetNextPerfQueryIdINTEL_debug(GLuint queryId, GLuint *nextQueryId, const char* file, int line);
#ifndef glGetPerfCounterInfoINTEL
#define glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) glatter_glGetPerfCounterInfoINTEL_debug((queryId), (counterId), (counterNameLength), (counterName), (counterDescLength), (counterDesc), (counterOffset), (counterDataSize), (counterTypeEnum), (counterDataTypeEnum), (rawCounterMaxValue), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPerfCounterInfoINTEL_debug(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue, const char* file, int line);
#ifndef glGetPerfQueryDataINTEL
#define glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten) glatter_glGetPerfQueryDataINTEL_debug((queryHandle), (flags), (dataSize), (data), (bytesWritten), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPerfQueryDataINTEL_debug(GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten, const char* file, int line);
#ifndef glGetPerfQueryIdByNameINTEL
#define glGetPerfQueryIdByNameINTEL(queryName, queryId) glatter_glGetPerfQueryIdByNameINTEL_debug((queryName), (queryId), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPerfQueryIdByNameINTEL_debug(GLchar *queryName, GLuint *queryId, const char* file, int line);
#ifndef glGetPerfQueryInfoINTEL
#define glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) glatter_glGetPerfQueryInfoINTEL_debug((queryId), (queryNameLength), (queryName), (dataSize), (noCounters), (noInstances), (capsMask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPerfQueryInfoINTEL_debug(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask, const char* file, int line);
#endif // defined(GL_INTEL_performance_query)
#if defined(GL_KHR_blend_equation_advanced)
#ifndef glBlendBarrierKHR
#define glBlendBarrierKHR() glatter_glBlendBarrierKHR_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendBarrierKHR_debug(const char* file, int line);
#endif // defined(GL_KHR_blend_equation_advanced)
#if defined(GL_KHR_debug)
#ifndef glDebugMessageCallbackKHR
#define glDebugMessageCallbackKHR(callback, userParam) glatter_glDebugMessageCallbackKHR_debug((callback), (userParam), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDebugMessageCallbackKHR_debug(GLDEBUGPROCKHR callback, const void *userParam, const char* file, int line);
#ifndef glDebugMessageControlKHR
#define glDebugMessageControlKHR(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlKHR_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDebugMessageControlKHR_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#ifndef glDebugMessageInsertKHR
#define glDebugMessageInsertKHR(source, type, id, severity, length, buf) glatter_glDebugMessageInsertKHR_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDebugMessageInsertKHR_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#ifndef glGetDebugMessageLogKHR
#define glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogKHR_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glGetDebugMessageLogKHR_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#ifndef glGetObjectLabelKHR
#define glGetObjectLabelKHR(identifier, name, bufSize, length, label) glatter_glGetObjectLabelKHR_debug((identifier), (name), (bufSize), (length), (label), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetObjectLabelKHR_debug(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#ifndef glGetObjectPtrLabelKHR
#define glGetObjectPtrLabelKHR(ptr, bufSize, length, label) glatter_glGetObjectPtrLabelKHR_debug((ptr), (bufSize), (length), (label), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetObjectPtrLabelKHR_debug(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#ifndef glGetPointervKHR
#define glGetPointervKHR(pname, params) glatter_glGetPointervKHR_debug((pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPointervKHR_debug(GLenum pname, void **params, const char* file, int line);
#ifndef glObjectLabelKHR
#define glObjectLabelKHR(identifier, name, length, label) glatter_glObjectLabelKHR_debug((identifier), (name), (length), (label), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glObjectLabelKHR_debug(GLenum identifier, GLuint name, GLsizei length, const GLchar *label, const char* file, int line);
#ifndef glObjectPtrLabelKHR
#define glObjectPtrLabelKHR(ptr, length, label) glatter_glObjectPtrLabelKHR_debug((ptr), (length), (label), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glObjectPtrLabelKHR_debug(const void *ptr, GLsizei length, const GLchar *label, const char* file, int line);
#ifndef glPopDebugGroupKHR
#define glPopDebugGroupKHR() glatter_glPopDebugGroupKHR_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPopDebugGroupKHR_debug(const char* file, int line);
#ifndef glPushDebugGroupKHR
#define glPushDebugGroupKHR(source, id, length, message) glatter_glPushDebugGroupKHR_debug((source), (id), (length), (message), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPushDebugGroupKHR_debug(GLenum source, GLuint id, GLsizei length, const GLchar *message, const char* file, int line);
#endif // defined(GL_KHR_debug)
#if defined(GL_KHR_parallel_shader_compile)
#ifndef glMaxShaderCompilerThreadsKHR
#define glMaxShaderCompilerThreadsKHR(count) glatter_glMaxShaderCompilerThreadsKHR_debug((count), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMaxShaderCompilerThreadsKHR_debug(GLuint count, const char* file, int line);
#endif // defined(GL_KHR_parallel_shader_compile)
#if defined(GL_KHR_robustness)
#ifndef glGetGraphicsResetStatusKHR
#define glGetGraphicsResetStatusKHR() glatter_glGetGraphicsResetStatusKHR_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glGetGraphicsResetStatusKHR_debug(const char* file, int line);
#ifndef glGetnUniformfvKHR
#define glGetnUniformfvKHR(program, location, bufSize, params) glatter_glGetnUniformfvKHR_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetnUniformfvKHR_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#ifndef glGetnUniformivKHR
#define glGetnUniformivKHR(program, location, bufSize, params) glatter_glGetnUniformivKHR_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetnUniformivKHR_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#ifndef glGetnUniformuivKHR
#define glGetnUniformuivKHR(program, location, bufSize, params) glatter_glGetnUniformuivKHR_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetnUniformuivKHR_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#ifndef glReadnPixelsKHR
#define glReadnPixelsKHR(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsKHR_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReadnPixelsKHR_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#endif // defined(GL_KHR_robustness)
#if defined(GL_NV_bindless_texture)
#ifndef glGetImageHandleNV
#define glGetImageHandleNV(texture, level, layered, layer, format) glatter_glGetImageHandleNV_debug((texture), (level), (layered), (layer), (format), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint64 glatter_glGetImageHandleNV_debug(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format, const char* file, int line);
#ifndef glGetTextureHandleNV
#define glGetTextureHandleNV(texture) glatter_glGetTextureHandleNV_debug((texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint64 glatter_glGetTextureHandleNV_debug(GLuint texture, const char* file, int line);
#ifndef glGetTextureSamplerHandleNV
#define glGetTextureSamplerHandleNV(texture, sampler) glatter_glGetTextureSamplerHandleNV_debug((texture), (sampler), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint64 glatter_glGetTextureSamplerHandleNV_debug(GLuint texture, GLuint sampler, const char* file, int line);
#ifndef glIsImageHandleResidentNV
#define glIsImageHandleResidentNV(handle) glatter_glIsImageHandleResidentNV_debug((handle), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsImageHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#ifndef glIsTextureHandleResidentNV
#define glIsTextureHandleResidentNV(handle) glatter_glIsTextureHandleResidentNV_debug((handle), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsTextureHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#ifndef glMakeImageHandleNonResidentNV
#define glMakeImageHandleNonResidentNV(handle) glatter_glMakeImageHandleNonResidentNV_debug((handle), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMakeImageHandleNonResidentNV_debug(GLuint64 handle, const char* file, int line);
#ifndef glMakeImageHandleResidentNV
#define glMakeImageHandleResidentNV(handle, access) glatter_glMakeImageHandleResidentNV_debug((handle), (access), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMakeImageHandleResidentNV_debug(GLuint64 handle, GLenum access, const char* file, int line);
#ifndef glMakeTextureHandleNonResidentNV
#define glMakeTextureHandleNonResidentNV(handle) glatter_glMakeTextureHandleNonResidentNV_debug((handle), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMakeTextureHandleNonResidentNV_debug(GLuint64 handle, const char* file, int line);
#ifndef glMakeTextureHandleResidentNV
#define glMakeTextureHandleResidentNV(handle) glatter_glMakeTextureHandleResidentNV_debug((handle), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMakeTextureHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#ifndef glProgramUniformHandleui64NV
#define glProgramUniformHandleui64NV(program, location, value) glatter_glProgramUniformHandleui64NV_debug((program), (location), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformHandleui64NV_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#ifndef glProgramUniformHandleui64vNV
#define glProgramUniformHandleui64vNV(program, location, count, values) glatter_glProgramUniformHandleui64vNV_debug((program), (location), (count), (values), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniformHandleui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#ifndef glUniformHandleui64NV
#define glUniformHandleui64NV(location, value) glatter_glUniformHandleui64NV_debug((location), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformHandleui64NV_debug(GLint location, GLuint64 value, const char* file, int line);
#ifndef glUniformHandleui64vNV
#define glUniformHandleui64vNV(location, count, value) glatter_glUniformHandleui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformHandleui64vNV_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#endif // defined(GL_NV_bindless_texture)
#if defined(GL_NV_blend_equation_advanced)
#ifndef glBlendBarrierNV
#define glBlendBarrierNV() glatter_glBlendBarrierNV_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendBarrierNV_debug(const char* file, int line);
#ifndef glBlendParameteriNV
#define glBlendParameteriNV(pname, value) glatter_glBlendParameteriNV_debug((pname), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendParameteriNV_debug(GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_NV_blend_equation_advanced)
#if defined(GL_NV_clip_space_w_scaling)
#ifndef glViewportPositionWScaleNV
#define glViewportPositionWScaleNV(index, xcoeff, ycoeff) glatter_glViewportPositionWScaleNV_debug((index), (xcoeff), (ycoeff), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glViewportPositionWScaleNV_debug(GLuint index, GLfloat xcoeff, GLfloat ycoeff, const char* file, int line);
#endif // defined(GL_NV_clip_space_w_scaling)
#if defined(GL_NV_conditional_render)
#ifndef glBeginConditionalRenderNV
#define glBeginConditionalRenderNV(id, mode) glatter_glBeginConditionalRenderNV_debug((id), (mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBeginConditionalRenderNV_debug(GLuint id, GLenum mode, const char* file, int line);
#ifndef glEndConditionalRenderNV
#define glEndConditionalRenderNV() glatter_glEndConditionalRenderNV_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEndConditionalRenderNV_debug(const char* file, int line);
#endif // defined(GL_NV_conditional_render)
#if defined(GL_NV_conservative_raster)
#ifndef glSubpixelPrecisionBiasNV
#define glSubpixelPrecisionBiasNV(xbits, ybits) glatter_glSubpixelPrecisionBiasNV_debug((xbits), (ybits), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSubpixelPrecisionBiasNV_debug(GLuint xbits, GLuint ybits, const char* file, int line);
#endif // defined(GL_NV_conservative_raster)
#if defined(GL_NV_conservative_raster_pre_snap_triangles)
#ifndef glConservativeRasterParameteriNV
#define glConservativeRasterParameteriNV(pname, param) glatter_glConservativeRasterParameteriNV_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glConservativeRasterParameteriNV_debug(GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_NV_conservative_raster_pre_snap_triangles)
#if defined(GL_NV_copy_buffer)
#ifndef glCopyBufferSubDataNV
#define glCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubDataNV_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyBufferSubDataNV_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#endif // defined(GL_NV_copy_buffer)
#if defined(GL_NV_coverage_sample)
#ifndef glCoverageMaskNV
#define glCoverageMaskNV(mask) glatter_glCoverageMaskNV_debug((mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCoverageMaskNV_debug(GLboolean mask, const char* file, int line);
#ifndef glCoverageOperationNV
#define glCoverageOperationNV(operation) glatter_glCoverageOperationNV_debug((operation), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCoverageOperationNV_debug(GLenum operation, const char* file, int line);
#endif // defined(GL_NV_coverage_sample)
#if defined(GL_NV_draw_buffers)
#ifndef glDrawBuffersNV
#define glDrawBuffersNV(n, bufs) glatter_glDrawBuffersNV_debug((n), (bufs), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawBuffersNV_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#endif // defined(GL_NV_draw_buffers)
#if defined(GL_NV_draw_instanced)
#ifndef glDrawArraysInstancedNV
#define glDrawArraysInstancedNV(mode, first, count, primcount) glatter_glDrawArraysInstancedNV_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawArraysInstancedNV_debug(GLenum mode, GLint first, GLsizei count, GLsizei primcount, const char* file, int line);
#ifndef glDrawElementsInstancedNV
#define glDrawElementsInstancedNV(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedNV_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsInstancedNV_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_NV_draw_instanced)
#if defined(GL_NV_draw_vulkan_image)
#ifndef glDrawVkImageNV
#define glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) glatter_glDrawVkImageNV_debug((vkImage), (sampler), (x0), (y0), (x1), (y1), (z), (s0), (t0), (s1), (t1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawVkImageNV_debug(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1, const char* file, int line);
#ifndef glGetVkProcAddrNV
#define glGetVkProcAddrNV(name) glatter_glGetVkProcAddrNV_debug((name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLVULKANPROCNV glatter_glGetVkProcAddrNV_debug(const GLchar *name, const char* file, int line);
#ifndef glSignalVkFenceNV
#define glSignalVkFenceNV(vkFence) glatter_glSignalVkFenceNV_debug((vkFence), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSignalVkFenceNV_debug(GLuint64 vkFence, const char* file, int line);
#ifndef glSignalVkSemaphoreNV
#define glSignalVkSemaphoreNV(vkSemaphore) glatter_glSignalVkSemaphoreNV_debug((vkSemaphore), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSignalVkSemaphoreNV_debug(GLuint64 vkSemaphore, const char* file, int line);
#ifndef glWaitVkSemaphoreNV
#define glWaitVkSemaphoreNV(vkSemaphore) glatter_glWaitVkSemaphoreNV_debug((vkSemaphore), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glWaitVkSemaphoreNV_debug(GLuint64 vkSemaphore, const char* file, int line);
#endif // defined(GL_NV_draw_vulkan_image)
#if defined(GL_NV_fence)
#ifndef glDeleteFencesNV
#define glDeleteFencesNV(n, fences) glatter_glDeleteFencesNV_debug((n), (fences), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteFencesNV_debug(GLsizei n, const GLuint *fences, const char* file, int line);
#ifndef glFinishFenceNV
#define glFinishFenceNV(fence) glatter_glFinishFenceNV_debug((fence), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFinishFenceNV_debug(GLuint fence, const char* file, int line);
#ifndef glGenFencesNV
#define glGenFencesNV(n, fences) glatter_glGenFencesNV_debug((n), (fences), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenFencesNV_debug(GLsizei n, GLuint *fences, const char* file, int line);
#ifndef glGetFenceivNV
#define glGetFenceivNV(fence, pname, params) glatter_glGetFenceivNV_debug((fence), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFenceivNV_debug(GLuint fence, GLenum pname, GLint *params, const char* file, int line);
#ifndef glIsFenceNV
#define glIsFenceNV(fence) glatter_glIsFenceNV_debug((fence), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsFenceNV_debug(GLuint fence, const char* file, int line);
#ifndef glSetFenceNV
#define glSetFenceNV(fence, condition) glatter_glSetFenceNV_debug((fence), (condition), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSetFenceNV_debug(GLuint fence, GLenum condition, const char* file, int line);
#ifndef glTestFenceNV
#define glTestFenceNV(fence) glatter_glTestFenceNV_debug((fence), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glTestFenceNV_debug(GLuint fence, const char* file, int line);
#endif // defined(GL_NV_fence)
#if defined(GL_NV_fragment_coverage_to_color)
#ifndef glFragmentCoverageColorNV
#define glFragmentCoverageColorNV(color) glatter_glFragmentCoverageColorNV_debug((color), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFragmentCoverageColorNV_debug(GLuint color, const char* file, int line);
#endif // defined(GL_NV_fragment_coverage_to_color)
#if defined(GL_NV_framebuffer_blit)
#ifndef glBlitFramebufferNV
#define glBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferNV_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlitFramebufferNV_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#endif // defined(GL_NV_framebuffer_blit)
#if defined(GL_NV_framebuffer_mixed_samples)
#ifndef glCoverageModulationNV
#define glCoverageModulationNV(components) glatter_glCoverageModulationNV_debug((components), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCoverageModulationNV_debug(GLenum components, const char* file, int line);
#ifndef glCoverageModulationTableNV
#define glCoverageModulationTableNV(n, v) glatter_glCoverageModulationTableNV_debug((n), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCoverageModulationTableNV_debug(GLsizei n, const GLfloat *v, const char* file, int line);
#ifndef glGetCoverageModulationTableNV
#define glGetCoverageModulationTableNV(bufsize, v) glatter_glGetCoverageModulationTableNV_debug((bufsize), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetCoverageModulationTableNV_debug(GLsizei bufsize, GLfloat *v, const char* file, int line);
#endif // defined(GL_NV_framebuffer_mixed_samples)
#if defined(GL_NV_framebuffer_multisample)
#ifndef glRenderbufferStorageMultisampleNV
#define glRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleNV_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorageMultisampleNV_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_NV_framebuffer_multisample)
#if defined(GL_NV_gpu_shader5)
#ifndef glGetUniformi64vNV
#define glGetUniformi64vNV(program, location, params) glatter_glGetUniformi64vNV_debug((program), (location), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformi64vNV_debug(GLuint program, GLint location, GLint64EXT *params, const char* file, int line);
#ifndef glProgramUniform1i64NV
#define glProgramUniform1i64NV(program, location, x) glatter_glProgramUniform1i64NV_debug((program), (location), (x), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1i64NV_debug(GLuint program, GLint location, GLint64EXT x, const char* file, int line);
#ifndef glProgramUniform1i64vNV
#define glProgramUniform1i64vNV(program, location, count, value) glatter_glProgramUniform1i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#ifndef glProgramUniform1ui64NV
#define glProgramUniform1ui64NV(program, location, x) glatter_glProgramUniform1ui64NV_debug((program), (location), (x), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, const char* file, int line);
#ifndef glProgramUniform1ui64vNV
#define glProgramUniform1ui64vNV(program, location, count, value) glatter_glProgramUniform1ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform1ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#ifndef glProgramUniform2i64NV
#define glProgramUniform2i64NV(program, location, x, y) glatter_glProgramUniform2i64NV_debug((program), (location), (x), (y), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, const char* file, int line);
#ifndef glProgramUniform2i64vNV
#define glProgramUniform2i64vNV(program, location, count, value) glatter_glProgramUniform2i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#ifndef glProgramUniform2ui64NV
#define glProgramUniform2ui64NV(program, location, x, y) glatter_glProgramUniform2ui64NV_debug((program), (location), (x), (y), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#ifndef glProgramUniform2ui64vNV
#define glProgramUniform2ui64vNV(program, location, count, value) glatter_glProgramUniform2ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform2ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#ifndef glProgramUniform3i64NV
#define glProgramUniform3i64NV(program, location, x, y, z) glatter_glProgramUniform3i64NV_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#ifndef glProgramUniform3i64vNV
#define glProgramUniform3i64vNV(program, location, count, value) glatter_glProgramUniform3i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#ifndef glProgramUniform3ui64NV
#define glProgramUniform3ui64NV(program, location, x, y, z) glatter_glProgramUniform3ui64NV_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#ifndef glProgramUniform3ui64vNV
#define glProgramUniform3ui64vNV(program, location, count, value) glatter_glProgramUniform3ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform3ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#ifndef glProgramUniform4i64NV
#define glProgramUniform4i64NV(program, location, x, y, z, w) glatter_glProgramUniform4i64NV_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#ifndef glProgramUniform4i64vNV
#define glProgramUniform4i64vNV(program, location, count, value) glatter_glProgramUniform4i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#ifndef glProgramUniform4ui64NV
#define glProgramUniform4ui64NV(program, location, x, y, z, w) glatter_glProgramUniform4ui64NV_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#ifndef glProgramUniform4ui64vNV
#define glProgramUniform4ui64vNV(program, location, count, value) glatter_glProgramUniform4ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramUniform4ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#ifndef glUniform1i64NV
#define glUniform1i64NV(location, x) glatter_glUniform1i64NV_debug((location), (x), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1i64NV_debug(GLint location, GLint64EXT x, const char* file, int line);
#ifndef glUniform1i64vNV
#define glUniform1i64vNV(location, count, value) glatter_glUniform1i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#ifndef glUniform1ui64NV
#define glUniform1ui64NV(location, x) glatter_glUniform1ui64NV_debug((location), (x), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1ui64NV_debug(GLint location, GLuint64EXT x, const char* file, int line);
#ifndef glUniform1ui64vNV
#define glUniform1ui64vNV(location, count, value) glatter_glUniform1ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#ifndef glUniform2i64NV
#define glUniform2i64NV(location, x, y) glatter_glUniform2i64NV_debug((location), (x), (y), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, const char* file, int line);
#ifndef glUniform2i64vNV
#define glUniform2i64vNV(location, count, value) glatter_glUniform2i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#ifndef glUniform2ui64NV
#define glUniform2ui64NV(location, x, y) glatter_glUniform2ui64NV_debug((location), (x), (y), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#ifndef glUniform2ui64vNV
#define glUniform2ui64vNV(location, count, value) glatter_glUniform2ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#ifndef glUniform3i64NV
#define glUniform3i64NV(location, x, y, z) glatter_glUniform3i64NV_debug((location), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#ifndef glUniform3i64vNV
#define glUniform3i64vNV(location, count, value) glatter_glUniform3i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#ifndef glUniform3ui64NV
#define glUniform3ui64NV(location, x, y, z) glatter_glUniform3ui64NV_debug((location), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#ifndef glUniform3ui64vNV
#define glUniform3ui64vNV(location, count, value) glatter_glUniform3ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#ifndef glUniform4i64NV
#define glUniform4i64NV(location, x, y, z, w) glatter_glUniform4i64NV_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#ifndef glUniform4i64vNV
#define glUniform4i64vNV(location, count, value) glatter_glUniform4i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#ifndef glUniform4ui64NV
#define glUniform4ui64NV(location, x, y, z, w) glatter_glUniform4ui64NV_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#ifndef glUniform4ui64vNV
#define glUniform4ui64vNV(location, count, value) glatter_glUniform4ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#endif // defined(GL_NV_gpu_shader5)
#if defined(GL_NV_instanced_arrays)
#ifndef glVertexAttribDivisorNV
#define glVertexAttribDivisorNV(index, divisor) glatter_glVertexAttribDivisorNV_debug((index), (divisor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribDivisorNV_debug(GLuint index, GLuint divisor, const char* file, int line);
#endif // defined(GL_NV_instanced_arrays)
#if defined(GL_NV_internalformat_sample_query)
#ifndef glGetInternalformatSampleivNV
#define glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params) glatter_glGetInternalformatSampleivNV_debug((target), (internalformat), (samples), (pname), (bufSize), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetInternalformatSampleivNV_debug(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#endif // defined(GL_NV_internalformat_sample_query)
#if defined(GL_NV_non_square_matrices)
#ifndef glUniformMatrix2x3fvNV
#define glUniformMatrix2x3fvNV(location, count, transpose, value) glatter_glUniformMatrix2x3fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix2x3fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix2x4fvNV
#define glUniformMatrix2x4fvNV(location, count, transpose, value) glatter_glUniformMatrix2x4fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix2x4fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix3x2fvNV
#define glUniformMatrix3x2fvNV(location, count, transpose, value) glatter_glUniformMatrix3x2fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix3x2fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix3x4fvNV
#define glUniformMatrix3x4fvNV(location, count, transpose, value) glatter_glUniformMatrix3x4fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix3x4fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix4x2fvNV
#define glUniformMatrix4x2fvNV(location, count, transpose, value) glatter_glUniformMatrix4x2fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix4x2fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix4x3fvNV
#define glUniformMatrix4x3fvNV(location, count, transpose, value) glatter_glUniformMatrix4x3fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix4x3fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#endif // defined(GL_NV_non_square_matrices)
#if defined(GL_NV_path_rendering)
#ifndef glCopyPathNV
#define glCopyPathNV(resultPath, srcPath) glatter_glCopyPathNV_debug((resultPath), (srcPath), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyPathNV_debug(GLuint resultPath, GLuint srcPath, const char* file, int line);
#ifndef glCoverFillPathInstancedNV
#define glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCoverFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#ifndef glCoverFillPathNV
#define glCoverFillPathNV(path, coverMode) glatter_glCoverFillPathNV_debug((path), (coverMode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCoverFillPathNV_debug(GLuint path, GLenum coverMode, const char* file, int line);
#ifndef glCoverStrokePathInstancedNV
#define glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCoverStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#ifndef glCoverStrokePathNV
#define glCoverStrokePathNV(path, coverMode) glatter_glCoverStrokePathNV_debug((path), (coverMode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCoverStrokePathNV_debug(GLuint path, GLenum coverMode, const char* file, int line);
#ifndef glDeletePathsNV
#define glDeletePathsNV(path, range) glatter_glDeletePathsNV_debug((path), (range), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeletePathsNV_debug(GLuint path, GLsizei range, const char* file, int line);
#ifndef glGenPathsNV
#define glGenPathsNV(range) glatter_glGenPathsNV_debug((range), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glGenPathsNV_debug(GLsizei range, const char* file, int line);
#ifndef glGetPathCommandsNV
#define glGetPathCommandsNV(path, commands) glatter_glGetPathCommandsNV_debug((path), (commands), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPathCommandsNV_debug(GLuint path, GLubyte *commands, const char* file, int line);
#ifndef glGetPathCoordsNV
#define glGetPathCoordsNV(path, coords) glatter_glGetPathCoordsNV_debug((path), (coords), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPathCoordsNV_debug(GLuint path, GLfloat *coords, const char* file, int line);
#ifndef glGetPathDashArrayNV
#define glGetPathDashArrayNV(path, dashArray) glatter_glGetPathDashArrayNV_debug((path), (dashArray), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPathDashArrayNV_debug(GLuint path, GLfloat *dashArray, const char* file, int line);
#ifndef glGetPathLengthNV
#define glGetPathLengthNV(path, startSegment, numSegments) glatter_glGetPathLengthNV_debug((path), (startSegment), (numSegments), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLfloat glatter_glGetPathLengthNV_debug(GLuint path, GLsizei startSegment, GLsizei numSegments, const char* file, int line);
#ifndef glGetPathMetricRangeNV
#define glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) glatter_glGetPathMetricRangeNV_debug((metricQueryMask), (firstPathName), (numPaths), (stride), (metrics), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPathMetricRangeNV_debug(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics, const char* file, int line);
#ifndef glGetPathMetricsNV
#define glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) glatter_glGetPathMetricsNV_debug((metricQueryMask), (numPaths), (pathNameType), (paths), (pathBase), (stride), (metrics), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPathMetricsNV_debug(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics, const char* file, int line);
#ifndef glGetPathParameterfvNV
#define glGetPathParameterfvNV(path, pname, value) glatter_glGetPathParameterfvNV_debug((path), (pname), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPathParameterfvNV_debug(GLuint path, GLenum pname, GLfloat *value, const char* file, int line);
#ifndef glGetPathParameterivNV
#define glGetPathParameterivNV(path, pname, value) glatter_glGetPathParameterivNV_debug((path), (pname), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPathParameterivNV_debug(GLuint path, GLenum pname, GLint *value, const char* file, int line);
#ifndef glGetPathSpacingNV
#define glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) glatter_glGetPathSpacingNV_debug((pathListMode), (numPaths), (pathNameType), (paths), (pathBase), (advanceScale), (kerningScale), (transformType), (returnedSpacing), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPathSpacingNV_debug(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing, const char* file, int line);
#ifndef glGetProgramResourcefvNV
#define glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourcefvNV_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramResourcefvNV_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params, const char* file, int line);
#ifndef glInterpolatePathsNV
#define glInterpolatePathsNV(resultPath, pathA, pathB, weight) glatter_glInterpolatePathsNV_debug((resultPath), (pathA), (pathB), (weight), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glInterpolatePathsNV_debug(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight, const char* file, int line);
#ifndef glIsPathNV
#define glIsPathNV(path) glatter_glIsPathNV_debug((path), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsPathNV_debug(GLuint path, const char* file, int line);
#ifndef glIsPointInFillPathNV
#define glIsPointInFillPathNV(path, mask, x, y) glatter_glIsPointInFillPathNV_debug((path), (mask), (x), (y), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsPointInFillPathNV_debug(GLuint path, GLuint mask, GLfloat x, GLfloat y, const char* file, int line);
#ifndef glIsPointInStrokePathNV
#define glIsPointInStrokePathNV(path, x, y) glatter_glIsPointInStrokePathNV_debug((path), (x), (y), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsPointInStrokePathNV_debug(GLuint path, GLfloat x, GLfloat y, const char* file, int line);
#ifndef glMatrixFrustumEXT
#define glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixFrustumEXT_debug((mode), (left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixFrustumEXT_debug(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, const char* file, int line);
#ifndef glMatrixLoad3x2fNV
#define glMatrixLoad3x2fNV(matrixMode, m) glatter_glMatrixLoad3x2fNV_debug((matrixMode), (m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixLoad3x2fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#ifndef glMatrixLoad3x3fNV
#define glMatrixLoad3x3fNV(matrixMode, m) glatter_glMatrixLoad3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixLoad3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#ifndef glMatrixLoadIdentityEXT
#define glMatrixLoadIdentityEXT(mode) glatter_glMatrixLoadIdentityEXT_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixLoadIdentityEXT_debug(GLenum mode, const char* file, int line);
#ifndef glMatrixLoadTranspose3x3fNV
#define glMatrixLoadTranspose3x3fNV(matrixMode, m) glatter_glMatrixLoadTranspose3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixLoadTranspose3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#ifndef glMatrixLoadTransposedEXT
#define glMatrixLoadTransposedEXT(mode, m) glatter_glMatrixLoadTransposedEXT_debug((mode), (m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixLoadTransposedEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#ifndef glMatrixLoadTransposefEXT
#define glMatrixLoadTransposefEXT(mode, m) glatter_glMatrixLoadTransposefEXT_debug((mode), (m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixLoadTransposefEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#ifndef glMatrixLoaddEXT
#define glMatrixLoaddEXT(mode, m) glatter_glMatrixLoaddEXT_debug((mode), (m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixLoaddEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#ifndef glMatrixLoadfEXT
#define glMatrixLoadfEXT(mode, m) glatter_glMatrixLoadfEXT_debug((mode), (m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixLoadfEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#ifndef glMatrixMult3x2fNV
#define glMatrixMult3x2fNV(matrixMode, m) glatter_glMatrixMult3x2fNV_debug((matrixMode), (m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixMult3x2fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#ifndef glMatrixMult3x3fNV
#define glMatrixMult3x3fNV(matrixMode, m) glatter_glMatrixMult3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixMult3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#ifndef glMatrixMultTranspose3x3fNV
#define glMatrixMultTranspose3x3fNV(matrixMode, m) glatter_glMatrixMultTranspose3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixMultTranspose3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#ifndef glMatrixMultTransposedEXT
#define glMatrixMultTransposedEXT(mode, m) glatter_glMatrixMultTransposedEXT_debug((mode), (m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixMultTransposedEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#ifndef glMatrixMultTransposefEXT
#define glMatrixMultTransposefEXT(mode, m) glatter_glMatrixMultTransposefEXT_debug((mode), (m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixMultTransposefEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#ifndef glMatrixMultdEXT
#define glMatrixMultdEXT(mode, m) glatter_glMatrixMultdEXT_debug((mode), (m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixMultdEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#ifndef glMatrixMultfEXT
#define glMatrixMultfEXT(mode, m) glatter_glMatrixMultfEXT_debug((mode), (m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixMultfEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#ifndef glMatrixOrthoEXT
#define glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixOrthoEXT_debug((mode), (left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixOrthoEXT_debug(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, const char* file, int line);
#ifndef glMatrixPopEXT
#define glMatrixPopEXT(mode) glatter_glMatrixPopEXT_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixPopEXT_debug(GLenum mode, const char* file, int line);
#ifndef glMatrixPushEXT
#define glMatrixPushEXT(mode) glatter_glMatrixPushEXT_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixPushEXT_debug(GLenum mode, const char* file, int line);
#ifndef glMatrixRotatedEXT
#define glMatrixRotatedEXT(mode, angle, x, y, z) glatter_glMatrixRotatedEXT_debug((mode), (angle), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixRotatedEXT_debug(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#ifndef glMatrixRotatefEXT
#define glMatrixRotatefEXT(mode, angle, x, y, z) glatter_glMatrixRotatefEXT_debug((mode), (angle), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixRotatefEXT_debug(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#ifndef glMatrixScaledEXT
#define glMatrixScaledEXT(mode, x, y, z) glatter_glMatrixScaledEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixScaledEXT_debug(GLenum mode, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#ifndef glMatrixScalefEXT
#define glMatrixScalefEXT(mode, x, y, z) glatter_glMatrixScalefEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixScalefEXT_debug(GLenum mode, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#ifndef glMatrixTranslatedEXT
#define glMatrixTranslatedEXT(mode, x, y, z) glatter_glMatrixTranslatedEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixTranslatedEXT_debug(GLenum mode, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#ifndef glMatrixTranslatefEXT
#define glMatrixTranslatefEXT(mode, x, y, z) glatter_glMatrixTranslatefEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixTranslatefEXT_debug(GLenum mode, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#ifndef glPathCommandsNV
#define glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) glatter_glPathCommandsNV_debug((path), (numCommands), (commands), (numCoords), (coordType), (coords), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathCommandsNV_debug(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#ifndef glPathCoordsNV
#define glPathCoordsNV(path, numCoords, coordType, coords) glatter_glPathCoordsNV_debug((path), (numCoords), (coordType), (coords), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathCoordsNV_debug(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#ifndef glPathCoverDepthFuncNV
#define glPathCoverDepthFuncNV(func) glatter_glPathCoverDepthFuncNV_debug((func), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathCoverDepthFuncNV_debug(GLenum func, const char* file, int line);
#ifndef glPathDashArrayNV
#define glPathDashArrayNV(path, dashCount, dashArray) glatter_glPathDashArrayNV_debug((path), (dashCount), (dashArray), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathDashArrayNV_debug(GLuint path, GLsizei dashCount, const GLfloat *dashArray, const char* file, int line);
#ifndef glPathGlyphIndexArrayNV
#define glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphIndexArrayNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glPathGlyphIndexArrayNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#ifndef glPathGlyphIndexRangeNV
#define glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) glatter_glPathGlyphIndexRangeNV_debug((fontTarget), (fontName), (fontStyle), (pathParameterTemplate), (emScale), (baseAndCount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glPathGlyphIndexRangeNV_debug(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2], const char* file, int line);
#ifndef glPathGlyphRangeNV
#define glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphRangeNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyph), (numGlyphs), (handleMissingGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathGlyphRangeNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#ifndef glPathGlyphsNV
#define glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphsNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (numGlyphs), (type), (charcodes), (handleMissingGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathGlyphsNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#ifndef glPathMemoryGlyphIndexArrayNV
#define glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathMemoryGlyphIndexArrayNV_debug((firstPathName), (fontTarget), (fontSize), (fontData), (faceIndex), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glPathMemoryGlyphIndexArrayNV_debug(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#ifndef glPathParameterfNV
#define glPathParameterfNV(path, pname, value) glatter_glPathParameterfNV_debug((path), (pname), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathParameterfNV_debug(GLuint path, GLenum pname, GLfloat value, const char* file, int line);
#ifndef glPathParameterfvNV
#define glPathParameterfvNV(path, pname, value) glatter_glPathParameterfvNV_debug((path), (pname), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathParameterfvNV_debug(GLuint path, GLenum pname, const GLfloat *value, const char* file, int line);
#ifndef glPathParameteriNV
#define glPathParameteriNV(path, pname, value) glatter_glPathParameteriNV_debug((path), (pname), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathParameteriNV_debug(GLuint path, GLenum pname, GLint value, const char* file, int line);
#ifndef glPathParameterivNV
#define glPathParameterivNV(path, pname, value) glatter_glPathParameterivNV_debug((path), (pname), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathParameterivNV_debug(GLuint path, GLenum pname, const GLint *value, const char* file, int line);
#ifndef glPathStencilDepthOffsetNV
#define glPathStencilDepthOffsetNV(factor, units) glatter_glPathStencilDepthOffsetNV_debug((factor), (units), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathStencilDepthOffsetNV_debug(GLfloat factor, GLfloat units, const char* file, int line);
#ifndef glPathStencilFuncNV
#define glPathStencilFuncNV(func, ref, mask) glatter_glPathStencilFuncNV_debug((func), (ref), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathStencilFuncNV_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#ifndef glPathStringNV
#define glPathStringNV(path, format, length, pathString) glatter_glPathStringNV_debug((path), (format), (length), (pathString), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathStringNV_debug(GLuint path, GLenum format, GLsizei length, const void *pathString, const char* file, int line);
#ifndef glPathSubCommandsNV
#define glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) glatter_glPathSubCommandsNV_debug((path), (commandStart), (commandsToDelete), (numCommands), (commands), (numCoords), (coordType), (coords), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathSubCommandsNV_debug(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#ifndef glPathSubCoordsNV
#define glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) glatter_glPathSubCoordsNV_debug((path), (coordStart), (numCoords), (coordType), (coords), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPathSubCoordsNV_debug(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#ifndef glPointAlongPathNV
#define glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) glatter_glPointAlongPathNV_debug((path), (startSegment), (numSegments), (distance), (x), (y), (tangentX), (tangentY), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glPointAlongPathNV_debug(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY, const char* file, int line);
#ifndef glProgramPathFragmentInputGenNV
#define glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) glatter_glProgramPathFragmentInputGenNV_debug((program), (location), (genMode), (components), (coeffs), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramPathFragmentInputGenNV_debug(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs, const char* file, int line);
#ifndef glStencilFillPathInstancedNV
#define glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) glatter_glStencilFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (transformType), (transformValues), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#ifndef glStencilFillPathNV
#define glStencilFillPathNV(path, fillMode, mask) glatter_glStencilFillPathNV_debug((path), (fillMode), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilFillPathNV_debug(GLuint path, GLenum fillMode, GLuint mask, const char* file, int line);
#ifndef glStencilStrokePathInstancedNV
#define glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) glatter_glStencilStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (transformType), (transformValues), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#ifndef glStencilStrokePathNV
#define glStencilStrokePathNV(path, reference, mask) glatter_glStencilStrokePathNV_debug((path), (reference), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilStrokePathNV_debug(GLuint path, GLint reference, GLuint mask, const char* file, int line);
#ifndef glStencilThenCoverFillPathInstancedNV
#define glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilThenCoverFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#ifndef glStencilThenCoverFillPathNV
#define glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode) glatter_glStencilThenCoverFillPathNV_debug((path), (fillMode), (mask), (coverMode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilThenCoverFillPathNV_debug(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode, const char* file, int line);
#ifndef glStencilThenCoverStrokePathInstancedNV
#define glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilThenCoverStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#ifndef glStencilThenCoverStrokePathNV
#define glStencilThenCoverStrokePathNV(path, reference, mask, coverMode) glatter_glStencilThenCoverStrokePathNV_debug((path), (reference), (mask), (coverMode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilThenCoverStrokePathNV_debug(GLuint path, GLint reference, GLuint mask, GLenum coverMode, const char* file, int line);
#ifndef glTransformPathNV
#define glTransformPathNV(resultPath, srcPath, transformType, transformValues) glatter_glTransformPathNV_debug((resultPath), (srcPath), (transformType), (transformValues), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTransformPathNV_debug(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#ifndef glWeightPathsNV
#define glWeightPathsNV(resultPath, numPaths, paths, weights) glatter_glWeightPathsNV_debug((resultPath), (numPaths), (paths), (weights), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glWeightPathsNV_debug(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights, const char* file, int line);
#endif // defined(GL_NV_path_rendering)
#if defined(GL_NV_polygon_mode)
#ifndef glPolygonModeNV
#define glPolygonModeNV(face, mode) glatter_glPolygonModeNV_debug((face), (mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPolygonModeNV_debug(GLenum face, GLenum mode, const char* file, int line);
#endif // defined(GL_NV_polygon_mode)
#if defined(GL_NV_read_buffer)
#ifndef glReadBufferNV
#define glReadBufferNV(mode) glatter_glReadBufferNV_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReadBufferNV_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_NV_read_buffer)
#if defined(GL_NV_sample_locations)
#ifndef glFramebufferSampleLocationsfvNV
#define glFramebufferSampleLocationsfvNV(target, start, count, v) glatter_glFramebufferSampleLocationsfvNV_debug((target), (start), (count), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferSampleLocationsfvNV_debug(GLenum target, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#ifndef glNamedFramebufferSampleLocationsfvNV
#define glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvNV_debug((framebuffer), (start), (count), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glNamedFramebufferSampleLocationsfvNV_debug(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#ifndef glResolveDepthValuesNV
#define glResolveDepthValuesNV() glatter_glResolveDepthValuesNV_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glResolveDepthValuesNV_debug(const char* file, int line);
#endif // defined(GL_NV_sample_locations)
#if defined(GL_NV_viewport_array)
#ifndef glDepthRangeArrayfvNV
#define glDepthRangeArrayfvNV(first, count, v) glatter_glDepthRangeArrayfvNV_debug((first), (count), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthRangeArrayfvNV_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#ifndef glDepthRangeIndexedfNV
#define glDepthRangeIndexedfNV(index, n, f) glatter_glDepthRangeIndexedfNV_debug((index), (n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthRangeIndexedfNV_debug(GLuint index, GLfloat n, GLfloat f, const char* file, int line);
#ifndef glDisableiNV
#define glDisableiNV(target, index) glatter_glDisableiNV_debug((target), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisableiNV_debug(GLenum target, GLuint index, const char* file, int line);
#ifndef glEnableiNV
#define glEnableiNV(target, index) glatter_glEnableiNV_debug((target), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnableiNV_debug(GLenum target, GLuint index, const char* file, int line);
#ifndef glGetFloati_vNV
#define glGetFloati_vNV(target, index, data) glatter_glGetFloati_vNV_debug((target), (index), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFloati_vNV_debug(GLenum target, GLuint index, GLfloat *data, const char* file, int line);
#ifndef glIsEnablediNV
#define glIsEnablediNV(target, index) glatter_glIsEnablediNV_debug((target), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsEnablediNV_debug(GLenum target, GLuint index, const char* file, int line);
#ifndef glScissorArrayvNV
#define glScissorArrayvNV(first, count, v) glatter_glScissorArrayvNV_debug((first), (count), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glScissorArrayvNV_debug(GLuint first, GLsizei count, const GLint *v, const char* file, int line);
#ifndef glScissorIndexedNV
#define glScissorIndexedNV(index, left, bottom, width, height) glatter_glScissorIndexedNV_debug((index), (left), (bottom), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glScissorIndexedNV_debug(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glScissorIndexedvNV
#define glScissorIndexedvNV(index, v) glatter_glScissorIndexedvNV_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glScissorIndexedvNV_debug(GLuint index, const GLint *v, const char* file, int line);
#ifndef glViewportArrayvNV
#define glViewportArrayvNV(first, count, v) glatter_glViewportArrayvNV_debug((first), (count), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glViewportArrayvNV_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#ifndef glViewportIndexedfNV
#define glViewportIndexedfNV(index, x, y, w, h) glatter_glViewportIndexedfNV_debug((index), (x), (y), (w), (h), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glViewportIndexedfNV_debug(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, const char* file, int line);
#ifndef glViewportIndexedfvNV
#define glViewportIndexedfvNV(index, v) glatter_glViewportIndexedfvNV_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glViewportIndexedfvNV_debug(GLuint index, const GLfloat *v, const char* file, int line);
#endif // defined(GL_NV_viewport_array)
#if defined(GL_NV_viewport_swizzle)
#ifndef glViewportSwizzleNV
#define glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew) glatter_glViewportSwizzleNV_debug((index), (swizzlex), (swizzley), (swizzlez), (swizzlew), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glViewportSwizzleNV_debug(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew, const char* file, int line);
#endif // defined(GL_NV_viewport_swizzle)
#if defined(GL_OES_EGL_image)
#ifndef glEGLImageTargetRenderbufferStorageOES
#define glEGLImageTargetRenderbufferStorageOES(target, image) glatter_glEGLImageTargetRenderbufferStorageOES_debug((target), (image), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEGLImageTargetRenderbufferStorageOES_debug(GLenum target, GLeglImageOES image, const char* file, int line);
#ifndef glEGLImageTargetTexture2DOES
#define glEGLImageTargetTexture2DOES(target, image) glatter_glEGLImageTargetTexture2DOES_debug((target), (image), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEGLImageTargetTexture2DOES_debug(GLenum target, GLeglImageOES image, const char* file, int line);
#endif // defined(GL_OES_EGL_image)
#if defined(GL_OES_copy_image)
#ifndef glCopyImageSubDataOES
#define glCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubDataOES_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyImageSubDataOES_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#endif // defined(GL_OES_copy_image)
#if defined(GL_OES_draw_buffers_indexed)
#ifndef glBlendEquationSeparateiOES
#define glBlendEquationSeparateiOES(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiOES_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquationSeparateiOES_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#ifndef glBlendEquationiOES
#define glBlendEquationiOES(buf, mode) glatter_glBlendEquationiOES_debug((buf), (mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquationiOES_debug(GLuint buf, GLenum mode, const char* file, int line);
#ifndef glBlendFuncSeparateiOES
#define glBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiOES_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFuncSeparateiOES_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#ifndef glBlendFunciOES
#define glBlendFunciOES(buf, src, dst) glatter_glBlendFunciOES_debug((buf), (src), (dst), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFunciOES_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#ifndef glColorMaskiOES
#define glColorMaskiOES(index, r, g, b, a) glatter_glColorMaskiOES_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glColorMaskiOES_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#ifndef glDisableiOES
#define glDisableiOES(target, index) glatter_glDisableiOES_debug((target), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisableiOES_debug(GLenum target, GLuint index, const char* file, int line);
#ifndef glEnableiOES
#define glEnableiOES(target, index) glatter_glEnableiOES_debug((target), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnableiOES_debug(GLenum target, GLuint index, const char* file, int line);
#ifndef glIsEnablediOES
#define glIsEnablediOES(target, index) glatter_glIsEnablediOES_debug((target), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsEnablediOES_debug(GLenum target, GLuint index, const char* file, int line);
#endif // defined(GL_OES_draw_buffers_indexed)
#if defined(GL_OES_draw_elements_base_vertex)
#ifndef glDrawElementsBaseVertexOES
#define glDrawElementsBaseVertexOES(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertexOES_debug((mode), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsBaseVertexOES_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#ifndef glDrawElementsInstancedBaseVertexOES
#define glDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertexOES_debug((mode), (count), (type), (indices), (instancecount), (basevertex), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsInstancedBaseVertexOES_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, const char* file, int line);
#ifndef glDrawRangeElementsBaseVertexOES
#define glDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertexOES_debug((mode), (start), (end), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawRangeElementsBaseVertexOES_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#ifndef glMultiDrawElementsBaseVertexEXT
#define glMultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex) glatter_glMultiDrawElementsBaseVertexEXT_debug((mode), (count), (type), (indices), (primcount), (basevertex), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMultiDrawElementsBaseVertexEXT_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex, const char* file, int line);
#endif // defined(GL_OES_draw_elements_base_vertex)
#if defined(GL_OES_geometry_shader)
#ifndef glFramebufferTextureOES
#define glFramebufferTextureOES(target, attachment, texture, level) glatter_glFramebufferTextureOES_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTextureOES_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#endif // defined(GL_OES_geometry_shader)
#if defined(GL_OES_get_program_binary)
#ifndef glGetProgramBinaryOES
#define glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinaryOES_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramBinaryOES_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#ifndef glProgramBinaryOES
#define glProgramBinaryOES(program, binaryFormat, binary, length) glatter_glProgramBinaryOES_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramBinaryOES_debug(GLuint program, GLenum binaryFormat, const void *binary, GLint length, const char* file, int line);
#endif // defined(GL_OES_get_program_binary)
#if defined(GL_OES_mapbuffer)
#ifndef glGetBufferPointervOES
#define glGetBufferPointervOES(target, pname, params) glatter_glGetBufferPointervOES_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBufferPointervOES_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#ifndef glMapBufferOES
#define glMapBufferOES(target, access) glatter_glMapBufferOES_debug((target), (access), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void * glatter_glMapBufferOES_debug(GLenum target, GLenum access, const char* file, int line);
#ifndef glUnmapBufferOES
#define glUnmapBufferOES(target) glatter_glUnmapBufferOES_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glUnmapBufferOES_debug(GLenum target, const char* file, int line);
#endif // defined(GL_OES_mapbuffer)
#if defined(GL_OES_primitive_bounding_box)
#ifndef glPrimitiveBoundingBoxOES
#define glPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxOES_debug((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPrimitiveBoundingBoxOES_debug(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, const char* file, int line);
#endif // defined(GL_OES_primitive_bounding_box)
#if defined(GL_OES_sample_shading)
#ifndef glMinSampleShadingOES
#define glMinSampleShadingOES(value) glatter_glMinSampleShadingOES_debug((value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMinSampleShadingOES_debug(GLfloat value, const char* file, int line);
#endif // defined(GL_OES_sample_shading)
#if defined(GL_OES_tessellation_shader)
#ifndef glPatchParameteriOES
#define glPatchParameteriOES(pname, value) glatter_glPatchParameteriOES_debug((pname), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPatchParameteriOES_debug(GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_OES_tessellation_shader)
#if defined(GL_OES_texture_3D)
#ifndef glCompressedTexImage3DOES
#define glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3DOES_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexImage3DOES_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCompressedTexSubImage3DOES
#define glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3DOES_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexSubImage3DOES_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCopyTexSubImage3DOES
#define glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3DOES_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTexSubImage3DOES_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glFramebufferTexture3DOES
#define glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3DOES_debug((target), (attachment), (textarget), (texture), (level), (zoffset), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTexture3DOES_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, const char* file, int line);
#ifndef glTexImage3DOES
#define glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3DOES_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexImage3DOES_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glTexSubImage3DOES
#define glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3DOES_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexSubImage3DOES_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_OES_texture_3D)
#if defined(GL_OES_texture_border_clamp)
#ifndef glGetSamplerParameterIivOES
#define glGetSamplerParameterIivOES(sampler, pname, params) glatter_glGetSamplerParameterIivOES_debug((sampler), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSamplerParameterIivOES_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetSamplerParameterIuivOES
#define glGetSamplerParameterIuivOES(sampler, pname, params) glatter_glGetSamplerParameterIuivOES_debug((sampler), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSamplerParameterIuivOES_debug(GLuint sampler, GLenum pname, GLuint *params, const char* file, int line);
#ifndef glGetTexParameterIivOES
#define glGetTexParameterIivOES(target, pname, params) glatter_glGetTexParameterIivOES_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameterIivOES_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetTexParameterIuivOES
#define glGetTexParameterIuivOES(target, pname, params) glatter_glGetTexParameterIuivOES_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameterIuivOES_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#ifndef glSamplerParameterIivOES
#define glSamplerParameterIivOES(sampler, pname, param) glatter_glSamplerParameterIivOES_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameterIivOES_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#ifndef glSamplerParameterIuivOES
#define glSamplerParameterIuivOES(sampler, pname, param) glatter_glSamplerParameterIuivOES_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameterIuivOES_debug(GLuint sampler, GLenum pname, const GLuint *param, const char* file, int line);
#ifndef glTexParameterIivOES
#define glTexParameterIivOES(target, pname, params) glatter_glTexParameterIivOES_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterIivOES_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#ifndef glTexParameterIuivOES
#define glTexParameterIuivOES(target, pname, params) glatter_glTexParameterIuivOES_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterIuivOES_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#endif // defined(GL_OES_texture_border_clamp)
#if defined(GL_OES_texture_buffer)
#ifndef glTexBufferOES
#define glTexBufferOES(target, internalformat, buffer) glatter_glTexBufferOES_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexBufferOES_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#ifndef glTexBufferRangeOES
#define glTexBufferRangeOES(target, internalformat, buffer, offset, size) glatter_glTexBufferRangeOES_debug((target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexBufferRangeOES_debug(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#endif // defined(GL_OES_texture_buffer)
#if defined(GL_OES_texture_storage_multisample_2d_array)
#ifndef glTexStorage3DMultisampleOES
#define glTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisampleOES_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage3DMultisampleOES_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#endif // defined(GL_OES_texture_storage_multisample_2d_array)
#if defined(GL_OES_texture_view)
#ifndef glTextureViewOES
#define glTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureViewOES_debug((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTextureViewOES_debug(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, const char* file, int line);
#endif // defined(GL_OES_texture_view)
#if defined(GL_OES_vertex_array_object)
#ifndef glBindVertexArrayOES
#define glBindVertexArrayOES(array) glatter_glBindVertexArrayOES_debug((array), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindVertexArrayOES_debug(GLuint array, const char* file, int line);
#ifndef glDeleteVertexArraysOES
#define glDeleteVertexArraysOES(n, arrays) glatter_glDeleteVertexArraysOES_debug((n), (arrays), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteVertexArraysOES_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#ifndef glGenVertexArraysOES
#define glGenVertexArraysOES(n, arrays) glatter_glGenVertexArraysOES_debug((n), (arrays), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenVertexArraysOES_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#ifndef glIsVertexArrayOES
#define glIsVertexArrayOES(array) glatter_glIsVertexArrayOES_debug((array), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsVertexArrayOES_debug(GLuint array, const char* file, int line);
#endif // defined(GL_OES_vertex_array_object)
#if defined(GL_OES_viewport_array)
#ifndef glDepthRangeArrayfvOES
#define glDepthRangeArrayfvOES(first, count, v) glatter_glDepthRangeArrayfvOES_debug((first), (count), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthRangeArrayfvOES_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#ifndef glDepthRangeIndexedfOES
#define glDepthRangeIndexedfOES(index, n, f) glatter_glDepthRangeIndexedfOES_debug((index), (n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthRangeIndexedfOES_debug(GLuint index, GLfloat n, GLfloat f, const char* file, int line);
#ifndef glGetFloati_vOES
#define glGetFloati_vOES(target, index, data) glatter_glGetFloati_vOES_debug((target), (index), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFloati_vOES_debug(GLenum target, GLuint index, GLfloat *data, const char* file, int line);
#ifndef glScissorArrayvOES
#define glScissorArrayvOES(first, count, v) glatter_glScissorArrayvOES_debug((first), (count), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glScissorArrayvOES_debug(GLuint first, GLsizei count, const GLint *v, const char* file, int line);
#ifndef glScissorIndexedOES
#define glScissorIndexedOES(index, left, bottom, width, height) glatter_glScissorIndexedOES_debug((index), (left), (bottom), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glScissorIndexedOES_debug(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glScissorIndexedvOES
#define glScissorIndexedvOES(index, v) glatter_glScissorIndexedvOES_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glScissorIndexedvOES_debug(GLuint index, const GLint *v, const char* file, int line);
#ifndef glViewportArrayvOES
#define glViewportArrayvOES(first, count, v) glatter_glViewportArrayvOES_debug((first), (count), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glViewportArrayvOES_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#ifndef glViewportIndexedfOES
#define glViewportIndexedfOES(index, x, y, w, h) glatter_glViewportIndexedfOES_debug((index), (x), (y), (w), (h), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glViewportIndexedfOES_debug(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, const char* file, int line);
#ifndef glViewportIndexedfvOES
#define glViewportIndexedfvOES(index, v) glatter_glViewportIndexedfvOES_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glViewportIndexedfvOES_debug(GLuint index, const GLfloat *v, const char* file, int line);
#endif // defined(GL_OES_viewport_array)
#if defined(GL_OVR_multiview)
#ifndef glFramebufferTextureMultiviewOVR
#define glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) glatter_glFramebufferTextureMultiviewOVR_debug((target), (attachment), (texture), (level), (baseViewIndex), (numViews), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTextureMultiviewOVR_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews, const char* file, int line);
#endif // defined(GL_OVR_multiview)
#if defined(GL_OVR_multiview_multisampled_render_to_texture)
#ifndef glFramebufferTextureMultisampleMultiviewOVR
#define glFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews) glatter_glFramebufferTextureMultisampleMultiviewOVR_debug((target), (attachment), (texture), (level), (samples), (baseViewIndex), (numViews), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTextureMultisampleMultiviewOVR_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews, const char* file, int line);
#endif // defined(GL_OVR_multiview_multisampled_render_to_texture)
#if defined(GL_QCOM_alpha_test)
#ifndef glAlphaFuncQCOM
#define glAlphaFuncQCOM(func, ref) glatter_glAlphaFuncQCOM_debug((func), (ref), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glAlphaFuncQCOM_debug(GLenum func, GLclampf ref, const char* file, int line);
#endif // defined(GL_QCOM_alpha_test)
#if defined(GL_QCOM_driver_control)
#ifndef glDisableDriverControlQCOM
#define glDisableDriverControlQCOM(driverControl) glatter_glDisableDriverControlQCOM_debug((driverControl), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisableDriverControlQCOM_debug(GLuint driverControl, const char* file, int line);
#ifndef glEnableDriverControlQCOM
#define glEnableDriverControlQCOM(driverControl) glatter_glEnableDriverControlQCOM_debug((driverControl), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnableDriverControlQCOM_debug(GLuint driverControl, const char* file, int line);
#ifndef glGetDriverControlStringQCOM
#define glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString) glatter_glGetDriverControlStringQCOM_debug((driverControl), (bufSize), (length), (driverControlString), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetDriverControlStringQCOM_debug(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString, const char* file, int line);
#ifndef glGetDriverControlsQCOM
#define glGetDriverControlsQCOM(num, size, driverControls) glatter_glGetDriverControlsQCOM_debug((num), (size), (driverControls), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetDriverControlsQCOM_debug(GLint *num, GLsizei size, GLuint *driverControls, const char* file, int line);
#endif // defined(GL_QCOM_driver_control)
#if defined(GL_QCOM_extended_get)
#ifndef glExtGetBufferPointervQCOM
#define glExtGetBufferPointervQCOM(target, params) glatter_glExtGetBufferPointervQCOM_debug((target), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetBufferPointervQCOM_debug(GLenum target, void **params, const char* file, int line);
#ifndef glExtGetBuffersQCOM
#define glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers) glatter_glExtGetBuffersQCOM_debug((buffers), (maxBuffers), (numBuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetBuffersQCOM_debug(GLuint *buffers, GLint maxBuffers, GLint *numBuffers, const char* file, int line);
#ifndef glExtGetFramebuffersQCOM
#define glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers) glatter_glExtGetFramebuffersQCOM_debug((framebuffers), (maxFramebuffers), (numFramebuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetFramebuffersQCOM_debug(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers, const char* file, int line);
#ifndef glExtGetRenderbuffersQCOM
#define glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers) glatter_glExtGetRenderbuffersQCOM_debug((renderbuffers), (maxRenderbuffers), (numRenderbuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetRenderbuffersQCOM_debug(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers, const char* file, int line);
#ifndef glExtGetTexLevelParameterivQCOM
#define glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params) glatter_glExtGetTexLevelParameterivQCOM_debug((texture), (face), (level), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetTexLevelParameterivQCOM_debug(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params, const char* file, int line);
#ifndef glExtGetTexSubImageQCOM
#define glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels) glatter_glExtGetTexSubImageQCOM_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (texels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetTexSubImageQCOM_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels, const char* file, int line);
#ifndef glExtGetTexturesQCOM
#define glExtGetTexturesQCOM(textures, maxTextures, numTextures) glatter_glExtGetTexturesQCOM_debug((textures), (maxTextures), (numTextures), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetTexturesQCOM_debug(GLuint *textures, GLint maxTextures, GLint *numTextures, const char* file, int line);
#ifndef glExtTexObjectStateOverrideiQCOM
#define glExtTexObjectStateOverrideiQCOM(target, pname, param) glatter_glExtTexObjectStateOverrideiQCOM_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtTexObjectStateOverrideiQCOM_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_QCOM_extended_get)
#if defined(GL_QCOM_extended_get2)
#ifndef glExtGetProgramBinarySourceQCOM
#define glExtGetProgramBinarySourceQCOM(program, shadertype, source, length) glatter_glExtGetProgramBinarySourceQCOM_debug((program), (shadertype), (source), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetProgramBinarySourceQCOM_debug(GLuint program, GLenum shadertype, GLchar *source, GLint *length, const char* file, int line);
#ifndef glExtGetProgramsQCOM
#define glExtGetProgramsQCOM(programs, maxPrograms, numPrograms) glatter_glExtGetProgramsQCOM_debug((programs), (maxPrograms), (numPrograms), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetProgramsQCOM_debug(GLuint *programs, GLint maxPrograms, GLint *numPrograms, const char* file, int line);
#ifndef glExtGetShadersQCOM
#define glExtGetShadersQCOM(shaders, maxShaders, numShaders) glatter_glExtGetShadersQCOM_debug((shaders), (maxShaders), (numShaders), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetShadersQCOM_debug(GLuint *shaders, GLint maxShaders, GLint *numShaders, const char* file, int line);
#ifndef glExtIsProgramBinaryQCOM
#define glExtIsProgramBinaryQCOM(program) glatter_glExtIsProgramBinaryQCOM_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glExtIsProgramBinaryQCOM_debug(GLuint program, const char* file, int line);
#endif // defined(GL_QCOM_extended_get2)
#if defined(GL_QCOM_framebuffer_foveated)
#ifndef glFramebufferFoveationConfigQCOM
#define glFramebufferFoveationConfigQCOM(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures) glatter_glFramebufferFoveationConfigQCOM_debug((framebuffer), (numLayers), (focalPointsPerLayer), (requestedFeatures), (providedFeatures), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferFoveationConfigQCOM_debug(GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint *providedFeatures, const char* file, int line);
#ifndef glFramebufferFoveationParametersQCOM
#define glFramebufferFoveationParametersQCOM(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea) glatter_glFramebufferFoveationParametersQCOM_debug((framebuffer), (layer), (focalPoint), (focalX), (focalY), (gainX), (gainY), (foveaArea), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferFoveationParametersQCOM_debug(GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea, const char* file, int line);
#endif // defined(GL_QCOM_framebuffer_foveated)
#if defined(GL_QCOM_shader_framebuffer_fetch_noncoherent)
#ifndef glFramebufferFetchBarrierQCOM
#define glFramebufferFetchBarrierQCOM() glatter_glFramebufferFetchBarrierQCOM_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferFetchBarrierQCOM_debug(const char* file, int line);
#endif // defined(GL_QCOM_shader_framebuffer_fetch_noncoherent)
#if defined(GL_QCOM_texture_foveated)
#ifndef glTextureFoveationParametersQCOM
#define glTextureFoveationParametersQCOM(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea) glatter_glTextureFoveationParametersQCOM_debug((texture), (layer), (focalPoint), (focalX), (focalY), (gainX), (gainY), (foveaArea), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTextureFoveationParametersQCOM_debug(GLuint texture, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea, const char* file, int line);
#endif // defined(GL_QCOM_texture_foveated)
#if defined(GL_QCOM_tiled_rendering)
#ifndef glEndTilingQCOM
#define glEndTilingQCOM(preserveMask) glatter_glEndTilingQCOM_debug((preserveMask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEndTilingQCOM_debug(GLbitfield preserveMask, const char* file, int line);
#ifndef glStartTilingQCOM
#define glStartTilingQCOM(x, y, width, height, preserveMask) glatter_glStartTilingQCOM_debug((x), (y), (width), (height), (preserveMask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStartTilingQCOM_debug(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask, const char* file, int line);
#endif // defined(GL_QCOM_tiled_rendering)
#endif // defined(__gles2_gl2ext_h_)
#if defined(__gles2_gl3_h_)
#if defined(GL_ES_VERSION_2_0)
#ifndef glActiveTexture
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#ifndef glAttachShader
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#ifndef glBindAttribLocation
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#ifndef glBindBuffer
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#ifndef glBindFramebuffer
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#ifndef glBindRenderbuffer
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#ifndef glBindTexture
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#ifndef glBlendColor
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#ifndef glBlendEquation
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#ifndef glBlendEquationSeparate
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#ifndef glBlendFunc
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#ifndef glBlendFuncSeparate
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#ifndef glBufferData
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#ifndef glBufferSubData
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#ifndef glCheckFramebufferStatus
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#ifndef glClear
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#ifndef glClearColor
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#ifndef glClearDepthf
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#ifndef glClearStencil
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#ifndef glColorMask
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#ifndef glCompileShader
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#ifndef glCompressedTexImage2D
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCompressedTexSubImage2D
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCopyTexImage2D
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#ifndef glCopyTexSubImage2D
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glCreateProgram
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glCreateProgram_debug(const char* file, int line);
#ifndef glCreateShader
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#ifndef glCullFace
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#ifndef glDeleteBuffers
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#ifndef glDeleteFramebuffers
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#ifndef glDeleteProgram
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#ifndef glDeleteRenderbuffers
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#ifndef glDeleteShader
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#ifndef glDeleteTextures
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#ifndef glDepthFunc
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#ifndef glDepthMask
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#ifndef glDepthRangef
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#ifndef glDetachShader
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#ifndef glDisable
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#ifndef glDisableVertexAttribArray
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#ifndef glDrawArrays
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#ifndef glDrawElements
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#ifndef glEnable
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#ifndef glEnableVertexAttribArray
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#ifndef glFinish
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFinish_debug(const char* file, int line);
#ifndef glFlush
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFlush_debug(const char* file, int line);
#ifndef glFramebufferRenderbuffer
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#ifndef glFramebufferTexture2D
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#ifndef glFrontFace
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#ifndef glGenBuffers
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#ifndef glGenFramebuffers
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#ifndef glGenRenderbuffers
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#ifndef glGenTextures
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#ifndef glGenerateMipmap
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#ifndef glGetActiveAttrib
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#ifndef glGetActiveUniform
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#ifndef glGetAttachedShaders
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#ifndef glGetAttribLocation
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#ifndef glGetBooleanv
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#ifndef glGetBufferParameteriv
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetError
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glGetError_debug(const char* file, int line);
#ifndef glGetFloatv
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#ifndef glGetFramebufferAttachmentParameteriv
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetIntegerv
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#ifndef glGetProgramInfoLog
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#ifndef glGetProgramiv
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetRenderbufferParameteriv
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetShaderInfoLog
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#ifndef glGetShaderPrecisionFormat
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#ifndef glGetShaderSource
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#ifndef glGetShaderiv
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetString
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#ifndef glGetTexParameterfv
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetTexParameteriv
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetUniformLocation
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#ifndef glGetUniformfv
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#ifndef glGetUniformiv
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#ifndef glGetVertexAttribPointerv
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#ifndef glGetVertexAttribfv
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetVertexAttribiv
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#ifndef glHint
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#ifndef glIsBuffer
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#ifndef glIsEnabled
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#ifndef glIsFramebuffer
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#ifndef glIsProgram
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#ifndef glIsRenderbuffer
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#ifndef glIsShader
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#ifndef glIsTexture
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#ifndef glLineWidth
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#ifndef glLinkProgram
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#ifndef glPixelStorei
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#ifndef glPolygonOffset
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#ifndef glReadPixels
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#ifndef glReleaseShaderCompiler
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#ifndef glRenderbufferStorage
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glSampleCoverage
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#ifndef glScissor
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glShaderBinary
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#ifndef glShaderSource
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#ifndef glStencilFunc
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#ifndef glStencilFuncSeparate
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#ifndef glStencilMask
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#ifndef glStencilMaskSeparate
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#ifndef glStencilOp
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#ifndef glStencilOpSeparate
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#ifndef glTexImage2D
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glTexParameterf
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#ifndef glTexParameterfv
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#ifndef glTexParameteri
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#ifndef glTexParameteriv
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#ifndef glTexSubImage2D
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glUniform1f
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#ifndef glUniform1fv
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform1i
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#ifndef glUniform1iv
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniform2f
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#ifndef glUniform2fv
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform2i
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#ifndef glUniform2iv
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniform3f
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#ifndef glUniform3fv
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform3i
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#ifndef glUniform3iv
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniform4f
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#ifndef glUniform4fv
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#ifndef glUniform4i
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#ifndef glUniform4iv
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#ifndef glUniformMatrix2fv
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix3fv
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix4fv
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUseProgram
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#ifndef glValidateProgram
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#ifndef glVertexAttrib1f
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#ifndef glVertexAttrib1fv
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttrib2f
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#ifndef glVertexAttrib2fv
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttrib3f
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#ifndef glVertexAttrib3fv
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttrib4f
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#ifndef glVertexAttrib4fv
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#ifndef glVertexAttribPointer
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#ifndef glViewport
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#ifndef glBeginQuery
#define glBeginQuery(target, id) glatter_glBeginQuery_debug((target), (id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBeginQuery_debug(GLenum target, GLuint id, const char* file, int line);
#ifndef glBeginTransformFeedback
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_debug((primitiveMode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBeginTransformFeedback_debug(GLenum primitiveMode, const char* file, int line);
#ifndef glBindBufferBase
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_debug((target), (index), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindBufferBase_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#ifndef glBindBufferRange
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindBufferRange_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#ifndef glBindSampler
#define glBindSampler(unit, sampler) glatter_glBindSampler_debug((unit), (sampler), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindSampler_debug(GLuint unit, GLuint sampler, const char* file, int line);
#ifndef glBindTransformFeedback
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_debug((target), (id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindTransformFeedback_debug(GLenum target, GLuint id, const char* file, int line);
#ifndef glBindVertexArray
#define glBindVertexArray(array) glatter_glBindVertexArray_debug((array), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindVertexArray_debug(GLuint array, const char* file, int line);
#ifndef glBlitFramebuffer
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlitFramebuffer_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#ifndef glClearBufferfi
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_debug((buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearBufferfi_debug(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#ifndef glClearBufferfv
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearBufferfv_debug(GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#ifndef glClearBufferiv
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearBufferiv_debug(GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#ifndef glClearBufferuiv
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearBufferuiv_debug(GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#ifndef glClientWaitSync
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glClientWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#ifndef glCompressedTexImage3D
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCompressedTexSubImage3D
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCopyBufferSubData
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyBufferSubData_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#ifndef glCopyTexSubImage3D
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glDeleteQueries
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_debug((n), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteQueries_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#ifndef glDeleteSamplers
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_debug((count), (samplers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteSamplers_debug(GLsizei count, const GLuint *samplers, const char* file, int line);
#ifndef glDeleteSync
#define glDeleteSync(sync) glatter_glDeleteSync_debug((sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteSync_debug(GLsync sync, const char* file, int line);
#ifndef glDeleteTransformFeedbacks
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteTransformFeedbacks_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#ifndef glDeleteVertexArrays
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteVertexArrays_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#ifndef glDrawArraysInstanced
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_debug((mode), (first), (count), (instancecount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawArraysInstanced_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, const char* file, int line);
#ifndef glDrawBuffers
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_debug((n), (bufs), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawBuffers_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#ifndef glDrawElementsInstanced
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_debug((mode), (count), (type), (indices), (instancecount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElementsInstanced_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, const char* file, int line);
#ifndef glDrawRangeElements
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#ifndef glEndQuery
#define glEndQuery(target) glatter_glEndQuery_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEndQuery_debug(GLenum target, const char* file, int line);
#ifndef glEndTransformFeedback
#define glEndTransformFeedback() glatter_glEndTransformFeedback_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEndTransformFeedback_debug(const char* file, int line);
#ifndef glFenceSync
#define glFenceSync(condition, flags) glatter_glFenceSync_debug((condition), (flags), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLsync glatter_glFenceSync_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#ifndef glFlushMappedBufferRange
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_debug((target), (offset), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFlushMappedBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#ifndef glFramebufferTextureLayer
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTextureLayer_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#ifndef glGenQueries
#define glGenQueries(n, ids) glatter_glGenQueries_debug((n), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenQueries_debug(GLsizei n, GLuint *ids, const char* file, int line);
#ifndef glGenSamplers
#define glGenSamplers(count, samplers) glatter_glGenSamplers_debug((count), (samplers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenSamplers_debug(GLsizei count, GLuint *samplers, const char* file, int line);
#ifndef glGenTransformFeedbacks
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#ifndef glGenVertexArrays
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#ifndef glGetActiveUniformBlockName
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_debug((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveUniformBlockName_debug(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, const char* file, int line);
#ifndef glGetActiveUniformBlockiv
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_debug((program), (uniformBlockIndex), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveUniformBlockiv_debug(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetActiveUniformsiv
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_debug((program), (uniformCount), (uniformIndices), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetActiveUniformsiv_debug(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetBufferParameteri64v
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBufferParameteri64v_debug(GLenum target, GLenum pname, GLint64 *params, const char* file, int line);
#ifndef glGetBufferPointerv
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBufferPointerv_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#ifndef glGetFragDataLocation
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_debug((program), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLint glatter_glGetFragDataLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#ifndef glGetInteger64i_v
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_debug((target), (index), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetInteger64i_v_debug(GLenum target, GLuint index, GLint64 *data, const char* file, int line);
#ifndef glGetInteger64v
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetInteger64v_debug(GLenum pname, GLint64 *data, const char* file, int line);
#ifndef glGetIntegeri_v
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_debug((target), (index), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetIntegeri_v_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#ifndef glGetInternalformativ
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetInternalformativ_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#ifndef glGetProgramBinary
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetProgramBinary_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#ifndef glGetQueryObjectuiv
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_debug((id), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetQueryObjectuiv_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#ifndef glGetQueryiv
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetQueryiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetSamplerParameterfv
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_debug((sampler), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSamplerParameterfv_debug(GLuint sampler, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetSamplerParameteriv
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_debug((sampler), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSamplerParameteriv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetStringi
#define glGetStringi(name, index) glatter_glGetStringi_debug((name), (index), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const GLubyte * glatter_glGetStringi_debug(GLenum name, GLuint index, const char* file, int line);
#ifndef glGetSynciv
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSynciv_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#ifndef glGetTransformFeedbackVarying
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTransformFeedbackVarying_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#ifndef glGetUniformBlockIndex
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_debug((program), (uniformBlockName), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLuint glatter_glGetUniformBlockIndex_debug(GLuint program, const GLchar *uniformBlockName, const char* file, int line);
#ifndef glGetUniformIndices
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_debug((program), (uniformCount), (uniformNames), (uniformIndices), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformIndices_debug(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices, const char* file, int line);
#ifndef glGetUniformuiv
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_debug((program), (location), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetUniformuiv_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#ifndef glGetVertexAttribIiv
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_debug((index), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribIiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetVertexAttribIuiv
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_debug((index), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetVertexAttribIuiv_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#ifndef glInvalidateFramebuffer
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glInvalidateFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#ifndef glInvalidateSubFramebuffer
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_debug((target), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glInvalidateSubFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glIsQuery
#define glIsQuery(id) glatter_glIsQuery_debug((id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsQuery_debug(GLuint id, const char* file, int line);
#ifndef glIsSampler
#define glIsSampler(sampler) glatter_glIsSampler_debug((sampler), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsSampler_debug(GLuint sampler, const char* file, int line);
#ifndef glIsSync
#define glIsSync(sync) glatter_glIsSync_debug((sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsSync_debug(GLsync sync, const char* file, int line);
#ifndef glIsTransformFeedback
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_debug((id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsTransformFeedback_debug(GLuint id, const char* file, int line);
#ifndef glIsVertexArray
#define glIsVertexArray(array) glatter_glIsVertexArray_debug((array), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsVertexArray_debug(GLuint array, const char* file, int line);
#ifndef glMapBufferRange
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_debug((target), (offset), (length), (access), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void * glatter_glMapBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#ifndef glPauseTransformFeedback
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPauseTransformFeedback_debug(const char* file, int line);
#ifndef glProgramBinary
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramBinary_debug(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length, const char* file, int line);
#ifndef glProgramParameteri
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_debug((program), (pname), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glProgramParameteri_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#ifndef glReadBuffer
#define glReadBuffer(src) glatter_glReadBuffer_debug((src), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReadBuffer_debug(GLenum src, const char* file, int line);
#ifndef glRenderbufferStorageMultisample
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorageMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glResumeTransformFeedback
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glResumeTransformFeedback_debug(const char* file, int line);
#ifndef glSamplerParameterf
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameterf_debug(GLuint sampler, GLenum pname, GLfloat param, const char* file, int line);
#ifndef glSamplerParameterfv
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameterfv_debug(GLuint sampler, GLenum pname, const GLfloat *param, const char* file, int line);
#ifndef glSamplerParameteri
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameteri_debug(GLuint sampler, GLenum pname, GLint param, const char* file, int line);
#ifndef glSamplerParameteriv
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_debug((sampler), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSamplerParameteriv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#ifndef glTexImage3D
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glTexStorage2D
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage2D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glTexStorage3D
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage3D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#ifndef glTexSubImage3D
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glTransformFeedbackVaryings
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTransformFeedbackVaryings_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#ifndef glUniform1ui
#define glUniform1ui(location, v0) glatter_glUniform1ui_debug((location), (v0), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1ui_debug(GLint location, GLuint v0, const char* file, int line);
#ifndef glUniform1uiv
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform1uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glUniform2ui
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_debug((location), (v0), (v1), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2ui_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#ifndef glUniform2uiv
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform2uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glUniform3ui
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#ifndef glUniform3uiv
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform3uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glUniform4ui
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#ifndef glUniform4uiv
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_debug((location), (count), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniform4uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#ifndef glUniformBlockBinding
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_debug((program), (uniformBlockIndex), (uniformBlockBinding), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformBlockBinding_debug(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, const char* file, int line);
#ifndef glUniformMatrix2x3fv
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix2x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix2x4fv
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix2x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix3x2fv
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix3x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix3x4fv
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix3x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix4x2fv
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix4x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUniformMatrix4x3fv
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glUniformMatrix4x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#ifndef glUnmapBuffer
#define glUnmapBuffer(target) glatter_glUnmapBuffer_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glUnmapBuffer_debug(GLenum target, const char* file, int line);
#ifndef glVertexAttribDivisor
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_debug((index), (divisor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribDivisor_debug(GLuint index, GLuint divisor, const char* file, int line);
#ifndef glVertexAttribI4i
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribI4i_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#ifndef glVertexAttribI4iv
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribI4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#ifndef glVertexAttribI4ui
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribI4ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#ifndef glVertexAttribI4uiv
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_debug((index), (v), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribI4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#ifndef glVertexAttribIPointer
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexAttribIPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#ifndef glWaitSync
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(__gles2_gl3_h_)
#endif // defined(GL_ES_VERSION_3_0)
#endif // GLATTER_GL

