/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_EGL
#if defined(__egl_h_)
#if defined(EGL_VERSION_1_0)
#ifndef eglChooseConfig
#define eglChooseConfig(dpy, attrib_list, configs, config_size, num_config) glatter_eglChooseConfig_debug((dpy), (attrib_list), (configs), (config_size), (num_config), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglChooseConfig_debug(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config, const char* file, int line);
#ifndef eglCopyBuffers
#define eglCopyBuffers(dpy, surface, target) glatter_eglCopyBuffers_debug((dpy), (surface), (target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglCopyBuffers_debug(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target, const char* file, int line);
#ifndef eglCreateContext
#define eglCreateContext(dpy, config, share_context, attrib_list) glatter_eglCreateContext_debug((dpy), (config), (share_context), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLContext glatter_eglCreateContext_debug(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list, const char* file, int line);
#ifndef eglCreatePbufferSurface
#define eglCreatePbufferSurface(dpy, config, attrib_list) glatter_eglCreatePbufferSurface_debug((dpy), (config), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSurface glatter_eglCreatePbufferSurface_debug(EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list, const char* file, int line);
#ifndef eglCreatePixmapSurface
#define eglCreatePixmapSurface(dpy, config, pixmap, attrib_list) glatter_eglCreatePixmapSurface_debug((dpy), (config), (pixmap), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSurface glatter_eglCreatePixmapSurface_debug(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list, const char* file, int line);
#ifndef eglCreateWindowSurface
#define eglCreateWindowSurface(dpy, config, win, attrib_list) glatter_eglCreateWindowSurface_debug((dpy), (config), (win), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSurface glatter_eglCreateWindowSurface_debug(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list, const char* file, int line);
#ifndef eglDestroyContext
#define eglDestroyContext(dpy, ctx) glatter_eglDestroyContext_debug((dpy), (ctx), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglDestroyContext_debug(EGLDisplay dpy, EGLContext ctx, const char* file, int line);
#ifndef eglDestroySurface
#define eglDestroySurface(dpy, surface) glatter_eglDestroySurface_debug((dpy), (surface), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglDestroySurface_debug(EGLDisplay dpy, EGLSurface surface, const char* file, int line);
#ifndef eglGetConfigAttrib
#define eglGetConfigAttrib(dpy, config, attribute, value) glatter_eglGetConfigAttrib_debug((dpy), (config), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglGetConfigAttrib_debug(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value, const char* file, int line);
#ifndef eglGetConfigs
#define eglGetConfigs(dpy, configs, config_size, num_config) glatter_eglGetConfigs_debug((dpy), (configs), (config_size), (num_config), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglGetConfigs_debug(EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config, const char* file, int line);
#ifndef eglGetCurrentDisplay
#define eglGetCurrentDisplay() glatter_eglGetCurrentDisplay_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLDisplay glatter_eglGetCurrentDisplay_debug(const char* file, int line);
#ifndef eglGetCurrentSurface
#define eglGetCurrentSurface(readdraw) glatter_eglGetCurrentSurface_debug((readdraw), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSurface glatter_eglGetCurrentSurface_debug(EGLint readdraw, const char* file, int line);
#ifndef eglGetDisplay
#define eglGetDisplay(display_id) glatter_eglGetDisplay_debug((display_id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLDisplay glatter_eglGetDisplay_debug(EGLNativeDisplayType display_id, const char* file, int line);
#ifndef eglGetError
#define eglGetError() glatter_eglGetError_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLint glatter_eglGetError_debug(const char* file, int line);
#ifndef eglGetProcAddress
#define eglGetProcAddress(procname) glatter_eglGetProcAddress_debug((procname), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT __eglMustCastToProperFunctionPointerType glatter_eglGetProcAddress_debug(const char *procname, const char* file, int line);
#ifndef eglInitialize
#define eglInitialize(dpy, major, minor) glatter_eglInitialize_debug((dpy), (major), (minor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglInitialize_debug(EGLDisplay dpy, EGLint *major, EGLint *minor, const char* file, int line);
#ifndef eglMakeCurrent
#define eglMakeCurrent(dpy, draw, read, ctx) glatter_eglMakeCurrent_debug((dpy), (draw), (read), (ctx), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglMakeCurrent_debug(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx, const char* file, int line);
#ifndef eglQueryContext
#define eglQueryContext(dpy, ctx, attribute, value) glatter_eglQueryContext_debug((dpy), (ctx), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryContext_debug(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value, const char* file, int line);
#ifndef eglQueryString
#define eglQueryString(dpy, name) glatter_eglQueryString_debug((dpy), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const char * glatter_eglQueryString_debug(EGLDisplay dpy, EGLint name, const char* file, int line);
#ifndef eglQuerySurface
#define eglQuerySurface(dpy, surface, attribute, value) glatter_eglQuerySurface_debug((dpy), (surface), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQuerySurface_debug(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value, const char* file, int line);
#ifndef eglSwapBuffers
#define eglSwapBuffers(dpy, surface) glatter_eglSwapBuffers_debug((dpy), (surface), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglSwapBuffers_debug(EGLDisplay dpy, EGLSurface surface, const char* file, int line);
#ifndef eglTerminate
#define eglTerminate(dpy) glatter_eglTerminate_debug((dpy), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglTerminate_debug(EGLDisplay dpy, const char* file, int line);
#ifndef eglWaitGL
#define eglWaitGL() glatter_eglWaitGL_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglWaitGL_debug(const char* file, int line);
#ifndef eglWaitNative
#define eglWaitNative(engine) glatter_eglWaitNative_debug((engine), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglWaitNative_debug(EGLint engine, const char* file, int line);
#endif // defined(EGL_VERSION_1_0)
#if defined(EGL_VERSION_1_1)
#ifndef eglBindTexImage
#define eglBindTexImage(dpy, surface, buffer) glatter_eglBindTexImage_debug((dpy), (surface), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglBindTexImage_debug(EGLDisplay dpy, EGLSurface surface, EGLint buffer, const char* file, int line);
#ifndef eglReleaseTexImage
#define eglReleaseTexImage(dpy, surface, buffer) glatter_eglReleaseTexImage_debug((dpy), (surface), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglReleaseTexImage_debug(EGLDisplay dpy, EGLSurface surface, EGLint buffer, const char* file, int line);
#ifndef eglSurfaceAttrib
#define eglSurfaceAttrib(dpy, surface, attribute, value) glatter_eglSurfaceAttrib_debug((dpy), (surface), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglSurfaceAttrib_debug(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value, const char* file, int line);
#ifndef eglSwapInterval
#define eglSwapInterval(dpy, interval) glatter_eglSwapInterval_debug((dpy), (interval), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglSwapInterval_debug(EGLDisplay dpy, EGLint interval, const char* file, int line);
#endif // defined(EGL_VERSION_1_1)
#if defined(EGL_VERSION_1_2)
#ifndef eglBindAPI
#define eglBindAPI(api) glatter_eglBindAPI_debug((api), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglBindAPI_debug(EGLenum api, const char* file, int line);
#ifndef eglCreatePbufferFromClientBuffer
#define eglCreatePbufferFromClientBuffer(dpy, buftype, buffer, config, attrib_list) glatter_eglCreatePbufferFromClientBuffer_debug((dpy), (buftype), (buffer), (config), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSurface glatter_eglCreatePbufferFromClientBuffer_debug(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list, const char* file, int line);
#ifndef eglQueryAPI
#define eglQueryAPI() glatter_eglQueryAPI_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLenum glatter_eglQueryAPI_debug(const char* file, int line);
#ifndef eglReleaseThread
#define eglReleaseThread() glatter_eglReleaseThread_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglReleaseThread_debug(const char* file, int line);
#ifndef eglWaitClient
#define eglWaitClient() glatter_eglWaitClient_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglWaitClient_debug(const char* file, int line);
#endif // defined(EGL_VERSION_1_2)
#if defined(EGL_VERSION_1_4)
#ifndef eglGetCurrentContext
#define eglGetCurrentContext() glatter_eglGetCurrentContext_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLContext glatter_eglGetCurrentContext_debug(const char* file, int line);
#endif // defined(EGL_VERSION_1_4)
#if defined(EGL_VERSION_1_5)
#ifndef eglClientWaitSync
#define eglClientWaitSync(dpy, sync, flags, timeout) glatter_eglClientWaitSync_debug((dpy), (sync), (flags), (timeout), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLint glatter_eglClientWaitSync_debug(EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout, const char* file, int line);
#ifndef eglCreateImage
#define eglCreateImage(dpy, ctx, target, buffer, attrib_list) glatter_eglCreateImage_debug((dpy), (ctx), (target), (buffer), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLImage glatter_eglCreateImage_debug(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib *attrib_list, const char* file, int line);
#ifndef eglCreatePlatformPixmapSurface
#define eglCreatePlatformPixmapSurface(dpy, config, native_pixmap, attrib_list) glatter_eglCreatePlatformPixmapSurface_debug((dpy), (config), (native_pixmap), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSurface glatter_eglCreatePlatformPixmapSurface_debug(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLAttrib *attrib_list, const char* file, int line);
#ifndef eglCreatePlatformWindowSurface
#define eglCreatePlatformWindowSurface(dpy, config, native_window, attrib_list) glatter_eglCreatePlatformWindowSurface_debug((dpy), (config), (native_window), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSurface glatter_eglCreatePlatformWindowSurface_debug(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLAttrib *attrib_list, const char* file, int line);
#ifndef eglCreateSync
#define eglCreateSync(dpy, type, attrib_list) glatter_eglCreateSync_debug((dpy), (type), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSync glatter_eglCreateSync_debug(EGLDisplay dpy, EGLenum type, const EGLAttrib *attrib_list, const char* file, int line);
#ifndef eglDestroyImage
#define eglDestroyImage(dpy, image) glatter_eglDestroyImage_debug((dpy), (image), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglDestroyImage_debug(EGLDisplay dpy, EGLImage image, const char* file, int line);
#ifndef eglDestroySync
#define eglDestroySync(dpy, sync) glatter_eglDestroySync_debug((dpy), (sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglDestroySync_debug(EGLDisplay dpy, EGLSync sync, const char* file, int line);
#ifndef eglGetPlatformDisplay
#define eglGetPlatformDisplay(platform, native_display, attrib_list) glatter_eglGetPlatformDisplay_debug((platform), (native_display), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLDisplay glatter_eglGetPlatformDisplay_debug(EGLenum platform, void *native_display, const EGLAttrib *attrib_list, const char* file, int line);
#ifndef eglGetSyncAttrib
#define eglGetSyncAttrib(dpy, sync, attribute, value) glatter_eglGetSyncAttrib_debug((dpy), (sync), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglGetSyncAttrib_debug(EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib *value, const char* file, int line);
#ifndef eglWaitSync
#define eglWaitSync(dpy, sync, flags) glatter_eglWaitSync_debug((dpy), (sync), (flags), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglWaitSync_debug(EGLDisplay dpy, EGLSync sync, EGLint flags, const char* file, int line);
#endif // defined(EGL_VERSION_1_5)
#endif // defined(__egl_h_)
#if defined(__eglext_h_)
#if defined(EGL_ANDROID_blob_cache)
#ifndef eglSetBlobCacheFuncsANDROID
#define eglSetBlobCacheFuncsANDROID(dpy, set, get) glatter_eglSetBlobCacheFuncsANDROID_debug((dpy), (set), (get), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_eglSetBlobCacheFuncsANDROID_debug(EGLDisplay dpy, EGLSetBlobFuncANDROID set, EGLGetBlobFuncANDROID get, const char* file, int line);
#endif // defined(EGL_ANDROID_blob_cache)
#if defined(EGL_ANDROID_create_native_client_buffer)
#ifndef eglCreateNativeClientBufferANDROID
#define eglCreateNativeClientBufferANDROID(attrib_list) glatter_eglCreateNativeClientBufferANDROID_debug((attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLClientBuffer glatter_eglCreateNativeClientBufferANDROID_debug(const EGLint *attrib_list, const char* file, int line);
#endif // defined(EGL_ANDROID_create_native_client_buffer)
#if defined(EGL_ANDROID_native_fence_sync)
#ifndef eglDupNativeFenceFDANDROID
#define eglDupNativeFenceFDANDROID(dpy, sync) glatter_eglDupNativeFenceFDANDROID_debug((dpy), (sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLint glatter_eglDupNativeFenceFDANDROID_debug(EGLDisplay dpy, EGLSyncKHR sync, const char* file, int line);
#endif // defined(EGL_ANDROID_native_fence_sync)
#if defined(EGL_ANDROID_presentation_time)
#ifndef eglPresentationTimeANDROID
#define eglPresentationTimeANDROID(dpy, surface, time) glatter_eglPresentationTimeANDROID_debug((dpy), (surface), (time), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglPresentationTimeANDROID_debug(EGLDisplay dpy, EGLSurface surface, EGLnsecsANDROID time, const char* file, int line);
#endif // defined(EGL_ANDROID_presentation_time)
#if defined(EGL_ANGLE_query_surface_pointer)
#ifndef eglQuerySurfacePointerANGLE
#define eglQuerySurfacePointerANGLE(dpy, surface, attribute, value) glatter_eglQuerySurfacePointerANGLE_debug((dpy), (surface), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQuerySurfacePointerANGLE_debug(EGLDisplay dpy, EGLSurface surface, EGLint attribute, void **value, const char* file, int line);
#endif // defined(EGL_ANGLE_query_surface_pointer)
#if defined(EGL_EXT_compositor)
#ifndef eglCompositorBindTexWindowEXT
#define eglCompositorBindTexWindowEXT(external_win_id) glatter_eglCompositorBindTexWindowEXT_debug((external_win_id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglCompositorBindTexWindowEXT_debug(EGLint external_win_id, const char* file, int line);
#ifndef eglCompositorSetContextAttributesEXT
#define eglCompositorSetContextAttributesEXT(external_ref_id, context_attributes, num_entries) glatter_eglCompositorSetContextAttributesEXT_debug((external_ref_id), (context_attributes), (num_entries), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglCompositorSetContextAttributesEXT_debug(EGLint external_ref_id, const EGLint *context_attributes, EGLint num_entries, const char* file, int line);
#ifndef eglCompositorSetContextListEXT
#define eglCompositorSetContextListEXT(external_ref_ids, num_entries) glatter_eglCompositorSetContextListEXT_debug((external_ref_ids), (num_entries), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglCompositorSetContextListEXT_debug(const EGLint *external_ref_ids, EGLint num_entries, const char* file, int line);
#ifndef eglCompositorSetSizeEXT
#define eglCompositorSetSizeEXT(external_win_id, width, height) glatter_eglCompositorSetSizeEXT_debug((external_win_id), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglCompositorSetSizeEXT_debug(EGLint external_win_id, EGLint width, EGLint height, const char* file, int line);
#ifndef eglCompositorSetWindowAttributesEXT
#define eglCompositorSetWindowAttributesEXT(external_win_id, window_attributes, num_entries) glatter_eglCompositorSetWindowAttributesEXT_debug((external_win_id), (window_attributes), (num_entries), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglCompositorSetWindowAttributesEXT_debug(EGLint external_win_id, const EGLint *window_attributes, EGLint num_entries, const char* file, int line);
#ifndef eglCompositorSetWindowListEXT
#define eglCompositorSetWindowListEXT(external_ref_id, external_win_ids, num_entries) glatter_eglCompositorSetWindowListEXT_debug((external_ref_id), (external_win_ids), (num_entries), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglCompositorSetWindowListEXT_debug(EGLint external_ref_id, const EGLint *external_win_ids, EGLint num_entries, const char* file, int line);
#ifndef eglCompositorSwapPolicyEXT
#define eglCompositorSwapPolicyEXT(external_win_id, policy) glatter_eglCompositorSwapPolicyEXT_debug((external_win_id), (policy), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglCompositorSwapPolicyEXT_debug(EGLint external_win_id, EGLint policy, const char* file, int line);
#endif // defined(EGL_EXT_compositor)
#if defined(EGL_EXT_device_base)
#ifndef eglQueryDeviceAttribEXT
#define eglQueryDeviceAttribEXT(device, attribute, value) glatter_eglQueryDeviceAttribEXT_debug((device), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryDeviceAttribEXT_debug(EGLDeviceEXT device, EGLint attribute, EGLAttrib *value, const char* file, int line);
#ifndef eglQueryDeviceStringEXT
#define eglQueryDeviceStringEXT(device, name) glatter_eglQueryDeviceStringEXT_debug((device), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const char * glatter_eglQueryDeviceStringEXT_debug(EGLDeviceEXT device, EGLint name, const char* file, int line);
#ifndef eglQueryDevicesEXT
#define eglQueryDevicesEXT(max_devices, devices, num_devices) glatter_eglQueryDevicesEXT_debug((max_devices), (devices), (num_devices), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryDevicesEXT_debug(EGLint max_devices, EGLDeviceEXT *devices, EGLint *num_devices, const char* file, int line);
#ifndef eglQueryDisplayAttribEXT
#define eglQueryDisplayAttribEXT(dpy, attribute, value) glatter_eglQueryDisplayAttribEXT_debug((dpy), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryDisplayAttribEXT_debug(EGLDisplay dpy, EGLint attribute, EGLAttrib *value, const char* file, int line);
#endif // defined(EGL_EXT_device_base)
#if defined(EGL_EXT_image_dma_buf_import_modifiers)
#ifndef eglQueryDmaBufFormatsEXT
#define eglQueryDmaBufFormatsEXT(dpy, max_formats, formats, num_formats) glatter_eglQueryDmaBufFormatsEXT_debug((dpy), (max_formats), (formats), (num_formats), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryDmaBufFormatsEXT_debug(EGLDisplay dpy, EGLint max_formats, EGLint *formats, EGLint *num_formats, const char* file, int line);
#ifndef eglQueryDmaBufModifiersEXT
#define eglQueryDmaBufModifiersEXT(dpy, format, max_modifiers, modifiers, external_only, num_modifiers) glatter_eglQueryDmaBufModifiersEXT_debug((dpy), (format), (max_modifiers), (modifiers), (external_only), (num_modifiers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryDmaBufModifiersEXT_debug(EGLDisplay dpy, EGLint format, EGLint max_modifiers, EGLuint64KHR *modifiers, EGLBoolean *external_only, EGLint *num_modifiers, const char* file, int line);
#endif // defined(EGL_EXT_image_dma_buf_import_modifiers)
#if defined(EGL_EXT_output_base)
#ifndef eglGetOutputLayersEXT
#define eglGetOutputLayersEXT(dpy, attrib_list, layers, max_layers, num_layers) glatter_eglGetOutputLayersEXT_debug((dpy), (attrib_list), (layers), (max_layers), (num_layers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglGetOutputLayersEXT_debug(EGLDisplay dpy, const EGLAttrib *attrib_list, EGLOutputLayerEXT *layers, EGLint max_layers, EGLint *num_layers, const char* file, int line);
#ifndef eglGetOutputPortsEXT
#define eglGetOutputPortsEXT(dpy, attrib_list, ports, max_ports, num_ports) glatter_eglGetOutputPortsEXT_debug((dpy), (attrib_list), (ports), (max_ports), (num_ports), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglGetOutputPortsEXT_debug(EGLDisplay dpy, const EGLAttrib *attrib_list, EGLOutputPortEXT *ports, EGLint max_ports, EGLint *num_ports, const char* file, int line);
#ifndef eglOutputLayerAttribEXT
#define eglOutputLayerAttribEXT(dpy, layer, attribute, value) glatter_eglOutputLayerAttribEXT_debug((dpy), (layer), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglOutputLayerAttribEXT_debug(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib value, const char* file, int line);
#ifndef eglOutputPortAttribEXT
#define eglOutputPortAttribEXT(dpy, port, attribute, value) glatter_eglOutputPortAttribEXT_debug((dpy), (port), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglOutputPortAttribEXT_debug(EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib value, const char* file, int line);
#ifndef eglQueryOutputLayerAttribEXT
#define eglQueryOutputLayerAttribEXT(dpy, layer, attribute, value) glatter_eglQueryOutputLayerAttribEXT_debug((dpy), (layer), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryOutputLayerAttribEXT_debug(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib *value, const char* file, int line);
#ifndef eglQueryOutputLayerStringEXT
#define eglQueryOutputLayerStringEXT(dpy, layer, name) glatter_eglQueryOutputLayerStringEXT_debug((dpy), (layer), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const char * glatter_eglQueryOutputLayerStringEXT_debug(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint name, const char* file, int line);
#ifndef eglQueryOutputPortAttribEXT
#define eglQueryOutputPortAttribEXT(dpy, port, attribute, value) glatter_eglQueryOutputPortAttribEXT_debug((dpy), (port), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryOutputPortAttribEXT_debug(EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib *value, const char* file, int line);
#ifndef eglQueryOutputPortStringEXT
#define eglQueryOutputPortStringEXT(dpy, port, name) glatter_eglQueryOutputPortStringEXT_debug((dpy), (port), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const char * glatter_eglQueryOutputPortStringEXT_debug(EGLDisplay dpy, EGLOutputPortEXT port, EGLint name, const char* file, int line);
#endif // defined(EGL_EXT_output_base)
#if defined(EGL_EXT_platform_base)
#ifndef eglCreatePlatformPixmapSurfaceEXT
#define eglCreatePlatformPixmapSurfaceEXT(dpy, config, native_pixmap, attrib_list) glatter_eglCreatePlatformPixmapSurfaceEXT_debug((dpy), (config), (native_pixmap), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSurface glatter_eglCreatePlatformPixmapSurfaceEXT_debug(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLint *attrib_list, const char* file, int line);
#ifndef eglCreatePlatformWindowSurfaceEXT
#define eglCreatePlatformWindowSurfaceEXT(dpy, config, native_window, attrib_list) glatter_eglCreatePlatformWindowSurfaceEXT_debug((dpy), (config), (native_window), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSurface glatter_eglCreatePlatformWindowSurfaceEXT_debug(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLint *attrib_list, const char* file, int line);
#ifndef eglGetPlatformDisplayEXT
#define eglGetPlatformDisplayEXT(platform, native_display, attrib_list) glatter_eglGetPlatformDisplayEXT_debug((platform), (native_display), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLDisplay glatter_eglGetPlatformDisplayEXT_debug(EGLenum platform, void *native_display, const EGLint *attrib_list, const char* file, int line);
#endif // defined(EGL_EXT_platform_base)
#if defined(EGL_EXT_stream_consumer_egloutput)
#ifndef eglStreamConsumerOutputEXT
#define eglStreamConsumerOutputEXT(dpy, stream, layer) glatter_eglStreamConsumerOutputEXT_debug((dpy), (stream), (layer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglStreamConsumerOutputEXT_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLOutputLayerEXT layer, const char* file, int line);
#endif // defined(EGL_EXT_stream_consumer_egloutput)
#if defined(EGL_EXT_swap_buffers_with_damage)
#ifndef eglSwapBuffersWithDamageEXT
#define eglSwapBuffersWithDamageEXT(dpy, surface, rects, n_rects) glatter_eglSwapBuffersWithDamageEXT_debug((dpy), (surface), (rects), (n_rects), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglSwapBuffersWithDamageEXT_debug(EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects, const char* file, int line);
#endif // defined(EGL_EXT_swap_buffers_with_damage)
#if defined(EGL_HI_clientpixmap)
#ifndef eglCreatePixmapSurfaceHI
#define eglCreatePixmapSurfaceHI(dpy, config, pixmap) glatter_eglCreatePixmapSurfaceHI_debug((dpy), (config), (pixmap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSurface glatter_eglCreatePixmapSurfaceHI_debug(EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI *pixmap, const char* file, int line);
#endif // defined(EGL_HI_clientpixmap)
#if defined(EGL_KHR_cl_event2)
#ifndef eglCreateSync64KHR
#define eglCreateSync64KHR(dpy, type, attrib_list) glatter_eglCreateSync64KHR_debug((dpy), (type), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSyncKHR glatter_eglCreateSync64KHR_debug(EGLDisplay dpy, EGLenum type, const EGLAttribKHR *attrib_list, const char* file, int line);
#endif // defined(EGL_KHR_cl_event2)
#if defined(EGL_KHR_debug)
#ifndef eglDebugMessageControlKHR
#define eglDebugMessageControlKHR(callback, attrib_list) glatter_eglDebugMessageControlKHR_debug((callback), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLint glatter_eglDebugMessageControlKHR_debug(EGLDEBUGPROCKHR callback, const EGLAttrib *attrib_list, const char* file, int line);
#ifndef eglLabelObjectKHR
#define eglLabelObjectKHR(display, objectType, object, label) glatter_eglLabelObjectKHR_debug((display), (objectType), (object), (label), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLint glatter_eglLabelObjectKHR_debug(EGLDisplay display, EGLenum objectType, EGLObjectKHR object, EGLLabelKHR label, const char* file, int line);
#ifndef eglQueryDebugKHR
#define eglQueryDebugKHR(attribute, value) glatter_eglQueryDebugKHR_debug((attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryDebugKHR_debug(EGLint attribute, EGLAttrib *value, const char* file, int line);
#endif // defined(EGL_KHR_debug)
#if defined(EGL_KHR_fence_sync)
#if defined(KHRONOS_SUPPORT_INT64)
#ifndef eglClientWaitSyncKHR
#define eglClientWaitSyncKHR(dpy, sync, flags, timeout) glatter_eglClientWaitSyncKHR_debug((dpy), (sync), (flags), (timeout), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLint glatter_eglClientWaitSyncKHR_debug(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout, const char* file, int line);
#ifndef eglCreateSyncKHR
#define eglCreateSyncKHR(dpy, type, attrib_list) glatter_eglCreateSyncKHR_debug((dpy), (type), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSyncKHR glatter_eglCreateSyncKHR_debug(EGLDisplay dpy, EGLenum type, const EGLint *attrib_list, const char* file, int line);
#ifndef eglDestroySyncKHR
#define eglDestroySyncKHR(dpy, sync) glatter_eglDestroySyncKHR_debug((dpy), (sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglDestroySyncKHR_debug(EGLDisplay dpy, EGLSyncKHR sync, const char* file, int line);
#ifndef eglGetSyncAttribKHR
#define eglGetSyncAttribKHR(dpy, sync, attribute, value) glatter_eglGetSyncAttribKHR_debug((dpy), (sync), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglGetSyncAttribKHR_debug(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *value, const char* file, int line);
#endif // defined(KHRONOS_SUPPORT_INT64)
#endif // defined(EGL_KHR_fence_sync)
#if defined(EGL_KHR_image)
#ifndef eglCreateImageKHR
#define eglCreateImageKHR(dpy, ctx, target, buffer, attrib_list) glatter_eglCreateImageKHR_debug((dpy), (ctx), (target), (buffer), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLImageKHR glatter_eglCreateImageKHR_debug(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list, const char* file, int line);
#ifndef eglDestroyImageKHR
#define eglDestroyImageKHR(dpy, image) glatter_eglDestroyImageKHR_debug((dpy), (image), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglDestroyImageKHR_debug(EGLDisplay dpy, EGLImageKHR image, const char* file, int line);
#endif // defined(EGL_KHR_image)
#if defined(EGL_KHR_lock_surface)
#ifndef eglLockSurfaceKHR
#define eglLockSurfaceKHR(dpy, surface, attrib_list) glatter_eglLockSurfaceKHR_debug((dpy), (surface), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglLockSurfaceKHR_debug(EGLDisplay dpy, EGLSurface surface, const EGLint *attrib_list, const char* file, int line);
#ifndef eglUnlockSurfaceKHR
#define eglUnlockSurfaceKHR(dpy, surface) glatter_eglUnlockSurfaceKHR_debug((dpy), (surface), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglUnlockSurfaceKHR_debug(EGLDisplay dpy, EGLSurface surface, const char* file, int line);
#endif // defined(EGL_KHR_lock_surface)
#if defined(EGL_KHR_lock_surface3)
#ifndef eglQuerySurface64KHR
#define eglQuerySurface64KHR(dpy, surface, attribute, value) glatter_eglQuerySurface64KHR_debug((dpy), (surface), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQuerySurface64KHR_debug(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLAttribKHR *value, const char* file, int line);
#endif // defined(EGL_KHR_lock_surface3)
#if defined(EGL_KHR_partial_update)
#ifndef eglSetDamageRegionKHR
#define eglSetDamageRegionKHR(dpy, surface, rects, n_rects) glatter_eglSetDamageRegionKHR_debug((dpy), (surface), (rects), (n_rects), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglSetDamageRegionKHR_debug(EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects, const char* file, int line);
#endif // defined(EGL_KHR_partial_update)
#if defined(EGL_KHR_reusable_sync)
#if defined(KHRONOS_SUPPORT_INT64)
#ifndef eglSignalSyncKHR
#define eglSignalSyncKHR(dpy, sync, mode) glatter_eglSignalSyncKHR_debug((dpy), (sync), (mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglSignalSyncKHR_debug(EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode, const char* file, int line);
#endif // defined(KHRONOS_SUPPORT_INT64)
#endif // defined(EGL_KHR_reusable_sync)
#if defined(EGL_KHR_stream)
#if defined(KHRONOS_SUPPORT_INT64)
#ifndef eglCreateStreamKHR
#define eglCreateStreamKHR(dpy, attrib_list) glatter_eglCreateStreamKHR_debug((dpy), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLStreamKHR glatter_eglCreateStreamKHR_debug(EGLDisplay dpy, const EGLint *attrib_list, const char* file, int line);
#ifndef eglDestroyStreamKHR
#define eglDestroyStreamKHR(dpy, stream) glatter_eglDestroyStreamKHR_debug((dpy), (stream), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglDestroyStreamKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, const char* file, int line);
#ifndef eglQueryStreamKHR
#define eglQueryStreamKHR(dpy, stream, attribute, value) glatter_eglQueryStreamKHR_debug((dpy), (stream), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryStreamKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint *value, const char* file, int line);
#ifndef eglQueryStreamu64KHR
#define eglQueryStreamu64KHR(dpy, stream, attribute, value) glatter_eglQueryStreamu64KHR_debug((dpy), (stream), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryStreamu64KHR_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR *value, const char* file, int line);
#ifndef eglStreamAttribKHR
#define eglStreamAttribKHR(dpy, stream, attribute, value) glatter_eglStreamAttribKHR_debug((dpy), (stream), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglStreamAttribKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value, const char* file, int line);
#endif // defined(KHRONOS_SUPPORT_INT64)
#endif // defined(EGL_KHR_stream)
#if defined(EGL_KHR_stream_attrib)
#if defined(KHRONOS_SUPPORT_INT64)
#ifndef eglCreateStreamAttribKHR
#define eglCreateStreamAttribKHR(dpy, attrib_list) glatter_eglCreateStreamAttribKHR_debug((dpy), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLStreamKHR glatter_eglCreateStreamAttribKHR_debug(EGLDisplay dpy, const EGLAttrib *attrib_list, const char* file, int line);
#ifndef eglQueryStreamAttribKHR
#define eglQueryStreamAttribKHR(dpy, stream, attribute, value) glatter_eglQueryStreamAttribKHR_debug((dpy), (stream), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryStreamAttribKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib *value, const char* file, int line);
#ifndef eglSetStreamAttribKHR
#define eglSetStreamAttribKHR(dpy, stream, attribute, value) glatter_eglSetStreamAttribKHR_debug((dpy), (stream), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglSetStreamAttribKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib value, const char* file, int line);
#ifndef eglStreamConsumerAcquireAttribKHR
#define eglStreamConsumerAcquireAttribKHR(dpy, stream, attrib_list) glatter_eglStreamConsumerAcquireAttribKHR_debug((dpy), (stream), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglStreamConsumerAcquireAttribKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list, const char* file, int line);
#ifndef eglStreamConsumerReleaseAttribKHR
#define eglStreamConsumerReleaseAttribKHR(dpy, stream, attrib_list) glatter_eglStreamConsumerReleaseAttribKHR_debug((dpy), (stream), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglStreamConsumerReleaseAttribKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list, const char* file, int line);
#endif // defined(KHRONOS_SUPPORT_INT64)
#endif // defined(EGL_KHR_stream_attrib)
#if defined(EGL_KHR_stream_consumer_gltexture)
#if defined(EGL_KHR_stream)
#ifndef eglStreamConsumerAcquireKHR
#define eglStreamConsumerAcquireKHR(dpy, stream) glatter_eglStreamConsumerAcquireKHR_debug((dpy), (stream), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglStreamConsumerAcquireKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, const char* file, int line);
#ifndef eglStreamConsumerGLTextureExternalKHR
#define eglStreamConsumerGLTextureExternalKHR(dpy, stream) glatter_eglStreamConsumerGLTextureExternalKHR_debug((dpy), (stream), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglStreamConsumerGLTextureExternalKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, const char* file, int line);
#ifndef eglStreamConsumerReleaseKHR
#define eglStreamConsumerReleaseKHR(dpy, stream) glatter_eglStreamConsumerReleaseKHR_debug((dpy), (stream), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglStreamConsumerReleaseKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, const char* file, int line);
#endif // defined(EGL_KHR_stream)
#endif // defined(EGL_KHR_stream_consumer_gltexture)
#if defined(EGL_KHR_stream_cross_process_fd)
#if defined(EGL_KHR_stream)
#ifndef eglCreateStreamFromFileDescriptorKHR
#define eglCreateStreamFromFileDescriptorKHR(dpy, file_descriptor) glatter_eglCreateStreamFromFileDescriptorKHR_debug((dpy), (file_descriptor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLStreamKHR glatter_eglCreateStreamFromFileDescriptorKHR_debug(EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor, const char* file, int line);
#ifndef eglGetStreamFileDescriptorKHR
#define eglGetStreamFileDescriptorKHR(dpy, stream) glatter_eglGetStreamFileDescriptorKHR_debug((dpy), (stream), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLNativeFileDescriptorKHR glatter_eglGetStreamFileDescriptorKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, const char* file, int line);
#endif // defined(EGL_KHR_stream)
#endif // defined(EGL_KHR_stream_cross_process_fd)
#if defined(EGL_KHR_stream_fifo)
#if defined(EGL_KHR_stream)
#ifndef eglQueryStreamTimeKHR
#define eglQueryStreamTimeKHR(dpy, stream, attribute, value) glatter_eglQueryStreamTimeKHR_debug((dpy), (stream), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryStreamTimeKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR *value, const char* file, int line);
#endif // defined(EGL_KHR_stream)
#endif // defined(EGL_KHR_stream_fifo)
#if defined(EGL_KHR_stream_producer_eglsurface)
#if defined(EGL_KHR_stream)
#ifndef eglCreateStreamProducerSurfaceKHR
#define eglCreateStreamProducerSurfaceKHR(dpy, config, stream, attrib_list) glatter_eglCreateStreamProducerSurfaceKHR_debug((dpy), (config), (stream), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSurface glatter_eglCreateStreamProducerSurfaceKHR_debug(EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list, const char* file, int line);
#endif // defined(EGL_KHR_stream)
#endif // defined(EGL_KHR_stream_producer_eglsurface)
#if defined(EGL_KHR_swap_buffers_with_damage)
#ifndef eglSwapBuffersWithDamageKHR
#define eglSwapBuffersWithDamageKHR(dpy, surface, rects, n_rects) glatter_eglSwapBuffersWithDamageKHR_debug((dpy), (surface), (rects), (n_rects), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglSwapBuffersWithDamageKHR_debug(EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects, const char* file, int line);
#endif // defined(EGL_KHR_swap_buffers_with_damage)
#if defined(EGL_KHR_wait_sync)
#ifndef eglWaitSyncKHR
#define eglWaitSyncKHR(dpy, sync, flags) glatter_eglWaitSyncKHR_debug((dpy), (sync), (flags), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLint glatter_eglWaitSyncKHR_debug(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, const char* file, int line);
#endif // defined(EGL_KHR_wait_sync)
#if defined(EGL_MESA_drm_image)
#ifndef eglCreateDRMImageMESA
#define eglCreateDRMImageMESA(dpy, attrib_list) glatter_eglCreateDRMImageMESA_debug((dpy), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLImageKHR glatter_eglCreateDRMImageMESA_debug(EGLDisplay dpy, const EGLint *attrib_list, const char* file, int line);
#ifndef eglExportDRMImageMESA
#define eglExportDRMImageMESA(dpy, image, name, handle, stride) glatter_eglExportDRMImageMESA_debug((dpy), (image), (name), (handle), (stride), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglExportDRMImageMESA_debug(EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride, const char* file, int line);
#endif // defined(EGL_MESA_drm_image)
#if defined(EGL_MESA_image_dma_buf_export)
#ifndef eglExportDMABUFImageMESA
#define eglExportDMABUFImageMESA(dpy, image, fds, strides, offsets) glatter_eglExportDMABUFImageMESA_debug((dpy), (image), (fds), (strides), (offsets), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglExportDMABUFImageMESA_debug(EGLDisplay dpy, EGLImageKHR image, int *fds, EGLint *strides, EGLint *offsets, const char* file, int line);
#ifndef eglExportDMABUFImageQueryMESA
#define eglExportDMABUFImageQueryMESA(dpy, image, fourcc, num_planes, modifiers) glatter_eglExportDMABUFImageQueryMESA_debug((dpy), (image), (fourcc), (num_planes), (modifiers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglExportDMABUFImageQueryMESA_debug(EGLDisplay dpy, EGLImageKHR image, int *fourcc, int *num_planes, EGLuint64KHR *modifiers, const char* file, int line);
#endif // defined(EGL_MESA_image_dma_buf_export)
#if defined(EGL_NOK_swap_region)
#ifndef eglSwapBuffersRegionNOK
#define eglSwapBuffersRegionNOK(dpy, surface, numRects, rects) glatter_eglSwapBuffersRegionNOK_debug((dpy), (surface), (numRects), (rects), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglSwapBuffersRegionNOK_debug(EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *rects, const char* file, int line);
#endif // defined(EGL_NOK_swap_region)
#if defined(EGL_NOK_swap_region2)
#ifndef eglSwapBuffersRegion2NOK
#define eglSwapBuffersRegion2NOK(dpy, surface, numRects, rects) glatter_eglSwapBuffersRegion2NOK_debug((dpy), (surface), (numRects), (rects), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglSwapBuffersRegion2NOK_debug(EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *rects, const char* file, int line);
#endif // defined(EGL_NOK_swap_region2)
#if defined(EGL_NV_native_query)
#ifndef eglQueryNativeDisplayNV
#define eglQueryNativeDisplayNV(dpy, display_id) glatter_eglQueryNativeDisplayNV_debug((dpy), (display_id), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryNativeDisplayNV_debug(EGLDisplay dpy, EGLNativeDisplayType *display_id, const char* file, int line);
#ifndef eglQueryNativePixmapNV
#define eglQueryNativePixmapNV(dpy, surf, pixmap) glatter_eglQueryNativePixmapNV_debug((dpy), (surf), (pixmap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryNativePixmapNV_debug(EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType *pixmap, const char* file, int line);
#ifndef eglQueryNativeWindowNV
#define eglQueryNativeWindowNV(dpy, surf, window) glatter_eglQueryNativeWindowNV_debug((dpy), (surf), (window), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryNativeWindowNV_debug(EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType *window, const char* file, int line);
#endif // defined(EGL_NV_native_query)
#if defined(EGL_NV_post_sub_buffer)
#ifndef eglPostSubBufferNV
#define eglPostSubBufferNV(dpy, surface, x, y, width, height) glatter_eglPostSubBufferNV_debug((dpy), (surface), (x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglPostSubBufferNV_debug(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height, const char* file, int line);
#endif // defined(EGL_NV_post_sub_buffer)
#if defined(EGL_NV_stream_consumer_gltexture_yuv)
#ifndef eglStreamConsumerGLTextureExternalAttribsNV
#define eglStreamConsumerGLTextureExternalAttribsNV(dpy, stream, attrib_list) glatter_eglStreamConsumerGLTextureExternalAttribsNV_debug((dpy), (stream), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglStreamConsumerGLTextureExternalAttribsNV_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLAttrib *attrib_list, const char* file, int line);
#endif // defined(EGL_NV_stream_consumer_gltexture_yuv)
#if defined(EGL_NV_stream_metadata)
#ifndef eglQueryDisplayAttribNV
#define eglQueryDisplayAttribNV(dpy, attribute, value) glatter_eglQueryDisplayAttribNV_debug((dpy), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryDisplayAttribNV_debug(EGLDisplay dpy, EGLint attribute, EGLAttrib *value, const char* file, int line);
#ifndef eglQueryStreamMetadataNV
#define eglQueryStreamMetadataNV(dpy, stream, name, n, offset, size, data) glatter_eglQueryStreamMetadataNV_debug((dpy), (stream), (name), (n), (offset), (size), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglQueryStreamMetadataNV_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum name, EGLint n, EGLint offset, EGLint size, void *data, const char* file, int line);
#ifndef eglSetStreamMetadataNV
#define eglSetStreamMetadataNV(dpy, stream, n, offset, size, data) glatter_eglSetStreamMetadataNV_debug((dpy), (stream), (n), (offset), (size), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglSetStreamMetadataNV_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLint n, EGLint offset, EGLint size, const void *data, const char* file, int line);
#endif // defined(EGL_NV_stream_metadata)
#if defined(EGL_NV_stream_reset)
#ifndef eglResetStreamNV
#define eglResetStreamNV(dpy, stream) glatter_eglResetStreamNV_debug((dpy), (stream), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglResetStreamNV_debug(EGLDisplay dpy, EGLStreamKHR stream, const char* file, int line);
#endif // defined(EGL_NV_stream_reset)
#if defined(EGL_NV_stream_sync)
#ifndef eglCreateStreamSyncNV
#define eglCreateStreamSyncNV(dpy, stream, type, attrib_list) glatter_eglCreateStreamSyncNV_debug((dpy), (stream), (type), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSyncKHR glatter_eglCreateStreamSyncNV_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum type, const EGLint *attrib_list, const char* file, int line);
#endif // defined(EGL_NV_stream_sync)
#if defined(EGL_NV_sync)
#if defined(KHRONOS_SUPPORT_INT64)
#ifndef eglClientWaitSyncNV
#define eglClientWaitSyncNV(sync, flags, timeout) glatter_eglClientWaitSyncNV_debug((sync), (flags), (timeout), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLint glatter_eglClientWaitSyncNV_debug(EGLSyncNV sync, EGLint flags, EGLTimeNV timeout, const char* file, int line);
#ifndef eglCreateFenceSyncNV
#define eglCreateFenceSyncNV(dpy, condition, attrib_list) glatter_eglCreateFenceSyncNV_debug((dpy), (condition), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLSyncNV glatter_eglCreateFenceSyncNV_debug(EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list, const char* file, int line);
#ifndef eglDestroySyncNV
#define eglDestroySyncNV(sync) glatter_eglDestroySyncNV_debug((sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglDestroySyncNV_debug(EGLSyncNV sync, const char* file, int line);
#ifndef eglFenceNV
#define eglFenceNV(sync) glatter_eglFenceNV_debug((sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglFenceNV_debug(EGLSyncNV sync, const char* file, int line);
#ifndef eglGetSyncAttribNV
#define eglGetSyncAttribNV(sync, attribute, value) glatter_eglGetSyncAttribNV_debug((sync), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglGetSyncAttribNV_debug(EGLSyncNV sync, EGLint attribute, EGLint *value, const char* file, int line);
#ifndef eglSignalSyncNV
#define eglSignalSyncNV(sync, mode) glatter_eglSignalSyncNV_debug((sync), (mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLBoolean glatter_eglSignalSyncNV_debug(EGLSyncNV sync, EGLenum mode, const char* file, int line);
#endif // defined(KHRONOS_SUPPORT_INT64)
#endif // defined(EGL_NV_sync)
#if defined(EGL_NV_system_time)
#if defined(KHRONOS_SUPPORT_INT64)
#ifndef eglGetSystemTimeFrequencyNV
#define eglGetSystemTimeFrequencyNV() glatter_eglGetSystemTimeFrequencyNV_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLuint64NV glatter_eglGetSystemTimeFrequencyNV_debug(const char* file, int line);
#ifndef eglGetSystemTimeNV
#define eglGetSystemTimeNV() glatter_eglGetSystemTimeNV_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT EGLuint64NV glatter_eglGetSystemTimeNV_debug(const char* file, int line);
#endif // defined(__eglext_h_)
#endif // defined(EGL_NV_system_time)
#endif // defined(KHRONOS_SUPPORT_INT64)
#endif // GLATTER_EGL

