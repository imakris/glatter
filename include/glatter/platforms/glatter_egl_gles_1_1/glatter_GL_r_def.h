/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_GL
#if defined(__gles1_gl_h_)
#if defined(GL_OES_point_size_array)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPointSizePointerOES, (type, stride, pointer), (GLenum type, GLsizei stride, const void *pointer))
#define glPointSizePointerOES_defined
#endif // defined(GL_OES_point_size_array)
#if defined(GL_VERSION_ES_CM_1_0)
#ifndef glActiveTexture_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glActiveTexture, (texture), (GLenum texture))
#define glActiveTexture_defined
#endif
#ifndef glAlphaFunc_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glAlphaFunc, (func, ref), (GLenum func, GLfloat ref))
#define glAlphaFunc_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glAlphaFuncx, (func, ref), (GLenum func, GLfixed ref))
#define glAlphaFuncx_defined
#ifndef glBindBuffer_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glBindBuffer, (target, buffer), (GLenum target, GLuint buffer))
#define glBindBuffer_defined
#endif
#ifndef glBindTexture_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glBindTexture, (target, texture), (GLenum target, GLuint texture))
#define glBindTexture_defined
#endif
#ifndef glBlendFunc_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glBlendFunc, (sfactor, dfactor), (GLenum sfactor, GLenum dfactor))
#define glBlendFunc_defined
#endif
#ifndef glBufferData_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glBufferData, (target, size, data, usage), (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#define glBufferData_defined
#endif
#ifndef glBufferSubData_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glBufferSubData, (target, offset, size, data), (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#define glBufferSubData_defined
#endif
#ifndef glClear_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClear, (mask), (GLbitfield mask))
#define glClear_defined
#endif
#ifndef glClearColor_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClearColor, (red, green, blue, alpha), (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearColor_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClearColorx, (red, green, blue, alpha), (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#define glClearColorx_defined
#ifndef glClearDepthf_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClearDepthf, (d), (GLfloat d))
#define glClearDepthf_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClearDepthx, (depth), (GLfixed depth))
#define glClearDepthx_defined
#ifndef glClearStencil_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClearStencil, (s), (GLint s))
#define glClearStencil_defined
#endif
#ifndef glClientActiveTexture_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClientActiveTexture, (texture), (GLenum texture))
#define glClientActiveTexture_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClipPlanef, (p, eqn), (GLenum p, const GLfloat *eqn))
#define glClipPlanef_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClipPlanex, (plane, equation), (GLenum plane, const GLfixed *equation))
#define glClipPlanex_defined
#ifndef glColor4f_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glColor4f, (red, green, blue, alpha), (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glColor4f_defined
#endif
#ifndef glColor4ub_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glColor4ub, (red, green, blue, alpha), (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha))
#define glColor4ub_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glColor4x, (red, green, blue, alpha), (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#define glColor4x_defined
#ifndef glColorMask_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glColorMask, (red, green, blue, alpha), (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glColorMask_defined
#endif
#ifndef glColorPointer_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glColorPointer, (size, type, stride, pointer), (GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glColorPointer_defined
#endif
#ifndef glCompressedTexImage2D_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glCompressedTexImage2D, (target, level, internalformat, width, height, border, imageSize, data), (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage2D_defined
#endif
#ifndef glCompressedTexSubImage2D_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glCompressedTexSubImage2D, (target, level, xoffset, yoffset, width, height, format, imageSize, data), (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2D_defined
#endif
#ifndef glCopyTexImage2D_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glCopyTexImage2D, (target, level, internalformat, x, y, width, height, border), (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexImage2D_defined
#endif
#ifndef glCopyTexSubImage2D_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glCopyTexSubImage2D, (target, level, xoffset, yoffset, x, y, width, height), (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTexSubImage2D_defined
#endif
#ifndef glCullFace_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glCullFace, (mode), (GLenum mode))
#define glCullFace_defined
#endif
#ifndef glDeleteBuffers_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDeleteBuffers, (n, buffers), (GLsizei n, const GLuint *buffers))
#define glDeleteBuffers_defined
#endif
#ifndef glDeleteTextures_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDeleteTextures, (n, textures), (GLsizei n, const GLuint *textures))
#define glDeleteTextures_defined
#endif
#ifndef glDepthFunc_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDepthFunc, (func), (GLenum func))
#define glDepthFunc_defined
#endif
#ifndef glDepthMask_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDepthMask, (flag), (GLboolean flag))
#define glDepthMask_defined
#endif
#ifndef glDepthRangef_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDepthRangef, (n, f), (GLfloat n, GLfloat f))
#define glDepthRangef_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDepthRangex, (n, f), (GLfixed n, GLfixed f))
#define glDepthRangex_defined
#ifndef glDisable_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDisable, (cap), (GLenum cap))
#define glDisable_defined
#endif
#ifndef glDisableClientState_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDisableClientState, (array), (GLenum array))
#define glDisableClientState_defined
#endif
#ifndef glDrawArrays_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDrawArrays, (mode, first, count), (GLenum mode, GLint first, GLsizei count))
#define glDrawArrays_defined
#endif
#ifndef glDrawElements_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDrawElements, (mode, count, type, indices), (GLenum mode, GLsizei count, GLenum type, const void *indices))
#define glDrawElements_defined
#endif
#ifndef glEnable_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glEnable, (cap), (GLenum cap))
#define glEnable_defined
#endif
#ifndef glEnableClientState_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glEnableClientState, (array), (GLenum array))
#define glEnableClientState_defined
#endif
#ifndef glFinish_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFinish, (), (void))
#define glFinish_defined
#endif
#ifndef glFlush_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFlush, (), (void))
#define glFlush_defined
#endif
#ifndef glFogf_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFogf, (pname, param), (GLenum pname, GLfloat param))
#define glFogf_defined
#endif
#ifndef glFogfv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFogfv, (pname, params), (GLenum pname, const GLfloat *params))
#define glFogfv_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFogx, (pname, param), (GLenum pname, GLfixed param))
#define glFogx_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFogxv, (pname, param), (GLenum pname, const GLfixed *param))
#define glFogxv_defined
#ifndef glFrontFace_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFrontFace, (mode), (GLenum mode))
#define glFrontFace_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFrustumf, (l, r, b, t, n, f), (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f))
#define glFrustumf_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFrustumx, (l, r, b, t, n, f), (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f))
#define glFrustumx_defined
#ifndef glGenBuffers_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGenBuffers, (n, buffers), (GLsizei n, GLuint *buffers))
#define glGenBuffers_defined
#endif
#ifndef glGenTextures_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGenTextures, (n, textures), (GLsizei n, GLuint *textures))
#define glGenTextures_defined
#endif
#ifndef glGetBooleanv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetBooleanv, (pname, data), (GLenum pname, GLboolean *data))
#define glGetBooleanv_defined
#endif
#ifndef glGetBufferParameteriv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetBufferParameteriv, (target, pname, params), (GLenum target, GLenum pname, GLint *params))
#define glGetBufferParameteriv_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetClipPlanef, (plane, equation), (GLenum plane, GLfloat *equation))
#define glGetClipPlanef_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetClipPlanex, (plane, equation), (GLenum plane, GLfixed *equation))
#define glGetClipPlanex_defined
#ifndef glGetError_defined
GLATTER_FBLOCK(return, GL, GL_API, GLenum, GL_APIENTRY, glGetError, (), (void))
#define glGetError_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetFixedv, (pname, params), (GLenum pname, GLfixed *params))
#define glGetFixedv_defined
#ifndef glGetFloatv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetFloatv, (pname, data), (GLenum pname, GLfloat *data))
#define glGetFloatv_defined
#endif
#ifndef glGetIntegerv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetIntegerv, (pname, data), (GLenum pname, GLint *data))
#define glGetIntegerv_defined
#endif
#ifndef glGetLightfv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetLightfv, (light, pname, params), (GLenum light, GLenum pname, GLfloat *params))
#define glGetLightfv_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetLightxv, (light, pname, params), (GLenum light, GLenum pname, GLfixed *params))
#define glGetLightxv_defined
#ifndef glGetMaterialfv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetMaterialfv, (face, pname, params), (GLenum face, GLenum pname, GLfloat *params))
#define glGetMaterialfv_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetMaterialxv, (face, pname, params), (GLenum face, GLenum pname, GLfixed *params))
#define glGetMaterialxv_defined
#ifndef glGetPointerv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetPointerv, (pname, params), (GLenum pname, void **params))
#define glGetPointerv_defined
#endif
#ifndef glGetString_defined
GLATTER_FBLOCK(return, GL, GL_API, const GLubyte *, GL_APIENTRY, glGetString, (name), (GLenum name))
#define glGetString_defined
#endif
#ifndef glGetTexEnvfv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetTexEnvfv, (target, pname, params), (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexEnvfv_defined
#endif
#ifndef glGetTexEnviv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetTexEnviv, (target, pname, params), (GLenum target, GLenum pname, GLint *params))
#define glGetTexEnviv_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetTexEnvxv, (target, pname, params), (GLenum target, GLenum pname, GLfixed *params))
#define glGetTexEnvxv_defined
#ifndef glGetTexParameterfv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetTexParameterfv, (target, pname, params), (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameterfv_defined
#endif
#ifndef glGetTexParameteriv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetTexParameteriv, (target, pname, params), (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameteriv_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetTexParameterxv, (target, pname, params), (GLenum target, GLenum pname, GLfixed *params))
#define glGetTexParameterxv_defined
#ifndef glHint_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glHint, (target, mode), (GLenum target, GLenum mode))
#define glHint_defined
#endif
#ifndef glIsBuffer_defined
GLATTER_FBLOCK(return, GL, GL_API, GLboolean, GL_APIENTRY, glIsBuffer, (buffer), (GLuint buffer))
#define glIsBuffer_defined
#endif
#ifndef glIsEnabled_defined
GLATTER_FBLOCK(return, GL, GL_API, GLboolean, GL_APIENTRY, glIsEnabled, (cap), (GLenum cap))
#define glIsEnabled_defined
#endif
#ifndef glIsTexture_defined
GLATTER_FBLOCK(return, GL, GL_API, GLboolean, GL_APIENTRY, glIsTexture, (texture), (GLuint texture))
#define glIsTexture_defined
#endif
#ifndef glLightModelf_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLightModelf, (pname, param), (GLenum pname, GLfloat param))
#define glLightModelf_defined
#endif
#ifndef glLightModelfv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLightModelfv, (pname, params), (GLenum pname, const GLfloat *params))
#define glLightModelfv_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLightModelx, (pname, param), (GLenum pname, GLfixed param))
#define glLightModelx_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLightModelxv, (pname, param), (GLenum pname, const GLfixed *param))
#define glLightModelxv_defined
#ifndef glLightf_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLightf, (light, pname, param), (GLenum light, GLenum pname, GLfloat param))
#define glLightf_defined
#endif
#ifndef glLightfv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLightfv, (light, pname, params), (GLenum light, GLenum pname, const GLfloat *params))
#define glLightfv_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLightx, (light, pname, param), (GLenum light, GLenum pname, GLfixed param))
#define glLightx_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLightxv, (light, pname, params), (GLenum light, GLenum pname, const GLfixed *params))
#define glLightxv_defined
#ifndef glLineWidth_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLineWidth, (width), (GLfloat width))
#define glLineWidth_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLineWidthx, (width), (GLfixed width))
#define glLineWidthx_defined
#ifndef glLoadIdentity_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLoadIdentity, (), (void))
#define glLoadIdentity_defined
#endif
#ifndef glLoadMatrixf_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLoadMatrixf, (m), (const GLfloat *m))
#define glLoadMatrixf_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLoadMatrixx, (m), (const GLfixed *m))
#define glLoadMatrixx_defined
#ifndef glLogicOp_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLogicOp, (opcode), (GLenum opcode))
#define glLogicOp_defined
#endif
#ifndef glMaterialf_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMaterialf, (face, pname, param), (GLenum face, GLenum pname, GLfloat param))
#define glMaterialf_defined
#endif
#ifndef glMaterialfv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMaterialfv, (face, pname, params), (GLenum face, GLenum pname, const GLfloat *params))
#define glMaterialfv_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMaterialx, (face, pname, param), (GLenum face, GLenum pname, GLfixed param))
#define glMaterialx_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMaterialxv, (face, pname, param), (GLenum face, GLenum pname, const GLfixed *param))
#define glMaterialxv_defined
#ifndef glMatrixMode_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMatrixMode, (mode), (GLenum mode))
#define glMatrixMode_defined
#endif
#ifndef glMultMatrixf_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMultMatrixf, (m), (const GLfloat *m))
#define glMultMatrixf_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMultMatrixx, (m), (const GLfixed *m))
#define glMultMatrixx_defined
#ifndef glMultiTexCoord4f_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMultiTexCoord4f, (target, s, t, r, q), (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glMultiTexCoord4f_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMultiTexCoord4x, (texture, s, t, r, q), (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q))
#define glMultiTexCoord4x_defined
#ifndef glNormal3f_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glNormal3f, (nx, ny, nz), (GLfloat nx, GLfloat ny, GLfloat nz))
#define glNormal3f_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glNormal3x, (nx, ny, nz), (GLfixed nx, GLfixed ny, GLfixed nz))
#define glNormal3x_defined
#ifndef glNormalPointer_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glNormalPointer, (type, stride, pointer), (GLenum type, GLsizei stride, const void *pointer))
#define glNormalPointer_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glOrthof, (l, r, b, t, n, f), (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f))
#define glOrthof_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glOrthox, (l, r, b, t, n, f), (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f))
#define glOrthox_defined
#ifndef glPixelStorei_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPixelStorei, (pname, param), (GLenum pname, GLint param))
#define glPixelStorei_defined
#endif
#ifndef glPointParameterf_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPointParameterf, (pname, param), (GLenum pname, GLfloat param))
#define glPointParameterf_defined
#endif
#ifndef glPointParameterfv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPointParameterfv, (pname, params), (GLenum pname, const GLfloat *params))
#define glPointParameterfv_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPointParameterx, (pname, param), (GLenum pname, GLfixed param))
#define glPointParameterx_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPointParameterxv, (pname, params), (GLenum pname, const GLfixed *params))
#define glPointParameterxv_defined
#ifndef glPointSize_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPointSize, (size), (GLfloat size))
#define glPointSize_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPointSizex, (size), (GLfixed size))
#define glPointSizex_defined
#ifndef glPolygonOffset_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPolygonOffset, (factor, units), (GLfloat factor, GLfloat units))
#define glPolygonOffset_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPolygonOffsetx, (factor, units), (GLfixed factor, GLfixed units))
#define glPolygonOffsetx_defined
#ifndef glPopMatrix_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPopMatrix, (), (void))
#define glPopMatrix_defined
#endif
#ifndef glPushMatrix_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPushMatrix, (), (void))
#define glPushMatrix_defined
#endif
#ifndef glReadPixels_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glReadPixels, (x, y, width, height, format, type, pixels), (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels))
#define glReadPixels_defined
#endif
#ifndef glRotatef_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glRotatef, (angle, x, y, z), (GLfloat angle, GLfloat x, GLfloat y, GLfloat z))
#define glRotatef_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glRotatex, (angle, x, y, z), (GLfixed angle, GLfixed x, GLfixed y, GLfixed z))
#define glRotatex_defined
#ifndef glSampleCoverage_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glSampleCoverage, (value, invert), (GLfloat value, GLboolean invert))
#define glSampleCoverage_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glSampleCoveragex, (value, invert), (GLclampx value, GLboolean invert))
#define glSampleCoveragex_defined
#ifndef glScalef_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glScalef, (x, y, z), (GLfloat x, GLfloat y, GLfloat z))
#define glScalef_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glScalex, (x, y, z), (GLfixed x, GLfixed y, GLfixed z))
#define glScalex_defined
#ifndef glScissor_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glScissor, (x, y, width, height), (GLint x, GLint y, GLsizei width, GLsizei height))
#define glScissor_defined
#endif
#ifndef glShadeModel_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glShadeModel, (mode), (GLenum mode))
#define glShadeModel_defined
#endif
#ifndef glStencilFunc_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glStencilFunc, (func, ref, mask), (GLenum func, GLint ref, GLuint mask))
#define glStencilFunc_defined
#endif
#ifndef glStencilMask_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glStencilMask, (mask), (GLuint mask))
#define glStencilMask_defined
#endif
#ifndef glStencilOp_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glStencilOp, (fail, zfail, zpass), (GLenum fail, GLenum zfail, GLenum zpass))
#define glStencilOp_defined
#endif
#ifndef glTexCoordPointer_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexCoordPointer, (size, type, stride, pointer), (GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glTexCoordPointer_defined
#endif
#ifndef glTexEnvf_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexEnvf, (target, pname, param), (GLenum target, GLenum pname, GLfloat param))
#define glTexEnvf_defined
#endif
#ifndef glTexEnvfv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexEnvfv, (target, pname, params), (GLenum target, GLenum pname, const GLfloat *params))
#define glTexEnvfv_defined
#endif
#ifndef glTexEnvi_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexEnvi, (target, pname, param), (GLenum target, GLenum pname, GLint param))
#define glTexEnvi_defined
#endif
#ifndef glTexEnviv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexEnviv, (target, pname, params), (GLenum target, GLenum pname, const GLint *params))
#define glTexEnviv_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexEnvx, (target, pname, param), (GLenum target, GLenum pname, GLfixed param))
#define glTexEnvx_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexEnvxv, (target, pname, params), (GLenum target, GLenum pname, const GLfixed *params))
#define glTexEnvxv_defined
#ifndef glTexImage2D_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexImage2D, (target, level, internalformat, width, height, border, format, type, pixels), (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexImage2D_defined
#endif
#ifndef glTexParameterf_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexParameterf, (target, pname, param), (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterf_defined
#endif
#ifndef glTexParameterfv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexParameterfv, (target, pname, params), (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameterfv_defined
#endif
#ifndef glTexParameteri_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexParameteri, (target, pname, param), (GLenum target, GLenum pname, GLint param))
#define glTexParameteri_defined
#endif
#ifndef glTexParameteriv_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexParameteriv, (target, pname, params), (GLenum target, GLenum pname, const GLint *params))
#define glTexParameteriv_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexParameterx, (target, pname, param), (GLenum target, GLenum pname, GLfixed param))
#define glTexParameterx_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexParameterxv, (target, pname, params), (GLenum target, GLenum pname, const GLfixed *params))
#define glTexParameterxv_defined
#ifndef glTexSubImage2D_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexSubImage2D, (target, level, xoffset, yoffset, width, height, format, type, pixels), (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage2D_defined
#endif
#ifndef glTranslatef_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTranslatef, (x, y, z), (GLfloat x, GLfloat y, GLfloat z))
#define glTranslatef_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTranslatex, (x, y, z), (GLfixed x, GLfixed y, GLfixed z))
#define glTranslatex_defined
#ifndef glVertexPointer_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glVertexPointer, (size, type, stride, pointer), (GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glVertexPointer_defined
#endif
#ifndef glViewport_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glViewport, (x, y, width, height), (GLint x, GLint y, GLsizei width, GLsizei height))
#define glViewport_defined
#endif
#endif // defined(GL_VERSION_ES_CM_1_0)
#endif // defined(__gles1_gl_h_)
#if defined(__gles1_glext_h_)
#if defined(GL_APPLE_copy_texture_levels)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glCopyTextureLevelsAPPLE, (destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount), (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount))
#define glCopyTextureLevelsAPPLE_defined
#endif // defined(GL_APPLE_copy_texture_levels)
#if defined(GL_APPLE_framebuffer_multisample)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glRenderbufferStorageMultisampleAPPLE, (target, samples, internalformat, width, height), (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glRenderbufferStorageMultisampleAPPLE_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glResolveMultisampleFramebufferAPPLE, (), (void))
#define glResolveMultisampleFramebufferAPPLE_defined
#endif // defined(GL_APPLE_framebuffer_multisample)
#if defined(GL_APPLE_sync)
GLATTER_FBLOCK(return, GL, GL_API, GLenum, GL_APIENTRY, glClientWaitSyncAPPLE, (sync, flags, timeout), (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glClientWaitSyncAPPLE_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDeleteSyncAPPLE, (sync), (GLsync sync))
#define glDeleteSyncAPPLE_defined
GLATTER_FBLOCK(return, GL, GL_API, GLsync, GL_APIENTRY, glFenceSyncAPPLE, (condition, flags), (GLenum condition, GLbitfield flags))
#define glFenceSyncAPPLE_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetInteger64vAPPLE, (pname, params), (GLenum pname, GLint64 *params))
#define glGetInteger64vAPPLE_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetSyncivAPPLE, (sync, pname, bufSize, length, values), (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glGetSyncivAPPLE_defined
GLATTER_FBLOCK(return, GL, GL_API, GLboolean, GL_APIENTRY, glIsSyncAPPLE, (sync), (GLsync sync))
#define glIsSyncAPPLE_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glWaitSyncAPPLE, (sync, flags, timeout), (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glWaitSyncAPPLE_defined
#endif // defined(GL_APPLE_sync)
#if defined(GL_EXT_debug_marker)
#ifndef glInsertEventMarkerEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glInsertEventMarkerEXT, (length, marker), (GLsizei length, const GLchar *marker))
#define glInsertEventMarkerEXT_defined
#endif
#ifndef glPopGroupMarkerEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPopGroupMarkerEXT, (), (void))
#define glPopGroupMarkerEXT_defined
#endif
#ifndef glPushGroupMarkerEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPushGroupMarkerEXT, (length, marker), (GLsizei length, const GLchar *marker))
#define glPushGroupMarkerEXT_defined
#endif
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_discard_framebuffer)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDiscardFramebufferEXT, (target, numAttachments, attachments), (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#define glDiscardFramebufferEXT_defined
#endif // defined(GL_EXT_discard_framebuffer)
#if defined(GL_EXT_map_buffer_range)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFlushMappedBufferRangeEXT, (target, offset, length), (GLenum target, GLintptr offset, GLsizeiptr length))
#define glFlushMappedBufferRangeEXT_defined
GLATTER_FBLOCK(return, GL, GL_API, void *, GL_APIENTRY, glMapBufferRangeEXT, (target, offset, length, access), (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glMapBufferRangeEXT_defined
#endif // defined(GL_EXT_map_buffer_range)
#if defined(GL_EXT_multi_draw_arrays)
#ifndef glMultiDrawArraysEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMultiDrawArraysEXT, (mode, first, count, primcount), (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount))
#define glMultiDrawArraysEXT_defined
#endif
#ifndef glMultiDrawElementsEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMultiDrawElementsEXT, (mode, count, type, indices, primcount), (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount))
#define glMultiDrawElementsEXT_defined
#endif
#endif // defined(GL_EXT_multi_draw_arrays)
#if defined(GL_EXT_multisampled_render_to_texture)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFramebufferTexture2DMultisampleEXT, (target, attachment, textarget, texture, level, samples), (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples))
#define glFramebufferTexture2DMultisampleEXT_defined
#ifndef glRenderbufferStorageMultisampleEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glRenderbufferStorageMultisampleEXT, (target, samples, internalformat, width, height), (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glRenderbufferStorageMultisampleEXT_defined
#endif
#endif // defined(GL_EXT_multisampled_render_to_texture)
#if defined(GL_EXT_robustness)
GLATTER_FBLOCK(return, GL, GL_API, GLenum, GL_APIENTRY, glGetGraphicsResetStatusEXT, (), (void))
#define glGetGraphicsResetStatusEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetnUniformfvEXT, (program, location, bufSize, params), (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformfvEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetnUniformivEXT, (program, location, bufSize, params), (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformivEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glReadnPixelsEXT, (x, y, width, height, format, type, bufSize, data), (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#define glReadnPixelsEXT_defined
#endif // defined(GL_EXT_robustness)
#if defined(GL_EXT_texture_storage)
#ifndef glTexStorage1DEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexStorage1DEXT, (target, levels, internalformat, width), (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTexStorage1DEXT_defined
#endif
#ifndef glTexStorage2DEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexStorage2DEXT, (target, levels, internalformat, width, height), (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexStorage2DEXT_defined
#endif
#ifndef glTexStorage3DEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexStorage3DEXT, (target, levels, internalformat, width, height, depth), (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTexStorage3DEXT_defined
#endif
#ifndef glTextureStorage1DEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTextureStorage1DEXT, (texture, target, levels, internalformat, width), (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTextureStorage1DEXT_defined
#endif
#ifndef glTextureStorage2DEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTextureStorage2DEXT, (texture, target, levels, internalformat, width, height), (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTextureStorage2DEXT_defined
#endif
#ifndef glTextureStorage3DEXT_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTextureStorage3DEXT, (texture, target, levels, internalformat, width, height, depth), (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTextureStorage3DEXT_defined
#endif
#endif // defined(GL_EXT_texture_storage)
#if defined(GL_IMG_multisampled_render_to_texture)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFramebufferTexture2DMultisampleIMG, (target, attachment, textarget, texture, level, samples), (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples))
#define glFramebufferTexture2DMultisampleIMG_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glRenderbufferStorageMultisampleIMG, (target, samples, internalformat, width, height), (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glRenderbufferStorageMultisampleIMG_defined
#endif // defined(GL_IMG_multisampled_render_to_texture)
#if defined(GL_IMG_user_clip_plane)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClipPlanefIMG, (p, eqn), (GLenum p, const GLfloat *eqn))
#define glClipPlanefIMG_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClipPlanexIMG, (p, eqn), (GLenum p, const GLfixed *eqn))
#define glClipPlanexIMG_defined
#endif // defined(GL_IMG_user_clip_plane)
#if defined(GL_NV_fence)
#ifndef glDeleteFencesNV_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDeleteFencesNV, (n, fences), (GLsizei n, const GLuint *fences))
#define glDeleteFencesNV_defined
#endif
#ifndef glFinishFenceNV_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFinishFenceNV, (fence), (GLuint fence))
#define glFinishFenceNV_defined
#endif
#ifndef glGenFencesNV_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGenFencesNV, (n, fences), (GLsizei n, GLuint *fences))
#define glGenFencesNV_defined
#endif
#ifndef glGetFenceivNV_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetFenceivNV, (fence, pname, params), (GLuint fence, GLenum pname, GLint *params))
#define glGetFenceivNV_defined
#endif
#ifndef glIsFenceNV_defined
GLATTER_FBLOCK(return, GL, GL_API, GLboolean, GL_APIENTRY, glIsFenceNV, (fence), (GLuint fence))
#define glIsFenceNV_defined
#endif
#ifndef glSetFenceNV_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glSetFenceNV, (fence, condition), (GLuint fence, GLenum condition))
#define glSetFenceNV_defined
#endif
#ifndef glTestFenceNV_defined
GLATTER_FBLOCK(return, GL, GL_API, GLboolean, GL_APIENTRY, glTestFenceNV, (fence), (GLuint fence))
#define glTestFenceNV_defined
#endif
#endif // defined(GL_NV_fence)
#if defined(GL_OES_EGL_image)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glEGLImageTargetRenderbufferStorageOES, (target, image), (GLenum target, GLeglImageOES image))
#define glEGLImageTargetRenderbufferStorageOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glEGLImageTargetTexture2DOES, (target, image), (GLenum target, GLeglImageOES image))
#define glEGLImageTargetTexture2DOES_defined
#endif // defined(GL_OES_EGL_image)
#if defined(GL_OES_blend_equation_separate)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glBlendEquationSeparateOES, (modeRGB, modeAlpha), (GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationSeparateOES_defined
#endif // defined(GL_OES_blend_equation_separate)
#if defined(GL_OES_blend_func_separate)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glBlendFuncSeparateOES, (srcRGB, dstRGB, srcAlpha, dstAlpha), (GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFuncSeparateOES_defined
#endif // defined(GL_OES_blend_func_separate)
#if defined(GL_OES_blend_subtract)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glBlendEquationOES, (mode), (GLenum mode))
#define glBlendEquationOES_defined
#endif // defined(GL_OES_blend_subtract)
#if defined(GL_OES_draw_texture)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDrawTexfOES, (x, y, z, width, height), (GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height))
#define glDrawTexfOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDrawTexfvOES, (coords), (const GLfloat *coords))
#define glDrawTexfvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDrawTexiOES, (x, y, z, width, height), (GLint x, GLint y, GLint z, GLint width, GLint height))
#define glDrawTexiOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDrawTexivOES, (coords), (const GLint *coords))
#define glDrawTexivOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDrawTexsOES, (x, y, z, width, height), (GLshort x, GLshort y, GLshort z, GLshort width, GLshort height))
#define glDrawTexsOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDrawTexsvOES, (coords), (const GLshort *coords))
#define glDrawTexsvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDrawTexxOES, (x, y, z, width, height), (GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height))
#define glDrawTexxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDrawTexxvOES, (coords), (const GLfixed *coords))
#define glDrawTexxvOES_defined
#endif // defined(GL_OES_draw_texture)
#if defined(GL_OES_fixed_point)
#ifndef glAlphaFuncxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glAlphaFuncxOES, (func, ref), (GLenum func, GLfixed ref))
#define glAlphaFuncxOES_defined
#endif
#ifndef glClearColorxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClearColorxOES, (red, green, blue, alpha), (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#define glClearColorxOES_defined
#endif
#ifndef glClearDepthxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClearDepthxOES, (depth), (GLfixed depth))
#define glClearDepthxOES_defined
#endif
#ifndef glClipPlanexOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClipPlanexOES, (plane, equation), (GLenum plane, const GLfixed *equation))
#define glClipPlanexOES_defined
#endif
#ifndef glColor4xOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glColor4xOES, (red, green, blue, alpha), (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#define glColor4xOES_defined
#endif
#ifndef glDepthRangexOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDepthRangexOES, (n, f), (GLfixed n, GLfixed f))
#define glDepthRangexOES_defined
#endif
#ifndef glFogxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFogxOES, (pname, param), (GLenum pname, GLfixed param))
#define glFogxOES_defined
#endif
#ifndef glFogxvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFogxvOES, (pname, param), (GLenum pname, const GLfixed *param))
#define glFogxvOES_defined
#endif
#ifndef glFrustumxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFrustumxOES, (l, r, b, t, n, f), (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f))
#define glFrustumxOES_defined
#endif
#ifndef glGetClipPlanexOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetClipPlanexOES, (plane, equation), (GLenum plane, GLfixed *equation))
#define glGetClipPlanexOES_defined
#endif
#ifndef glGetFixedvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetFixedvOES, (pname, params), (GLenum pname, GLfixed *params))
#define glGetFixedvOES_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetLightxvOES, (light, pname, params), (GLenum light, GLenum pname, GLfixed *params))
#define glGetLightxvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetMaterialxvOES, (face, pname, params), (GLenum face, GLenum pname, GLfixed *params))
#define glGetMaterialxvOES_defined
#ifndef glGetTexEnvxvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetTexEnvxvOES, (target, pname, params), (GLenum target, GLenum pname, GLfixed *params))
#define glGetTexEnvxvOES_defined
#endif
#ifndef glGetTexGenxvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetTexGenxvOES, (coord, pname, params), (GLenum coord, GLenum pname, GLfixed *params))
#define glGetTexGenxvOES_defined
#endif
#ifndef glGetTexParameterxvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetTexParameterxvOES, (target, pname, params), (GLenum target, GLenum pname, GLfixed *params))
#define glGetTexParameterxvOES_defined
#endif
#ifndef glLightModelxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLightModelxOES, (pname, param), (GLenum pname, GLfixed param))
#define glLightModelxOES_defined
#endif
#ifndef glLightModelxvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLightModelxvOES, (pname, param), (GLenum pname, const GLfixed *param))
#define glLightModelxvOES_defined
#endif
#ifndef glLightxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLightxOES, (light, pname, param), (GLenum light, GLenum pname, GLfixed param))
#define glLightxOES_defined
#endif
#ifndef glLightxvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLightxvOES, (light, pname, params), (GLenum light, GLenum pname, const GLfixed *params))
#define glLightxvOES_defined
#endif
#ifndef glLineWidthxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLineWidthxOES, (width), (GLfixed width))
#define glLineWidthxOES_defined
#endif
#ifndef glLoadMatrixxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLoadMatrixxOES, (m), (const GLfixed *m))
#define glLoadMatrixxOES_defined
#endif
#ifndef glMaterialxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMaterialxOES, (face, pname, param), (GLenum face, GLenum pname, GLfixed param))
#define glMaterialxOES_defined
#endif
#ifndef glMaterialxvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMaterialxvOES, (face, pname, param), (GLenum face, GLenum pname, const GLfixed *param))
#define glMaterialxvOES_defined
#endif
#ifndef glMultMatrixxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMultMatrixxOES, (m), (const GLfixed *m))
#define glMultMatrixxOES_defined
#endif
#ifndef glMultiTexCoord4xOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMultiTexCoord4xOES, (texture, s, t, r, q), (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q))
#define glMultiTexCoord4xOES_defined
#endif
#ifndef glNormal3xOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glNormal3xOES, (nx, ny, nz), (GLfixed nx, GLfixed ny, GLfixed nz))
#define glNormal3xOES_defined
#endif
#ifndef glOrthoxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glOrthoxOES, (l, r, b, t, n, f), (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f))
#define glOrthoxOES_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPointParameterxOES, (pname, param), (GLenum pname, GLfixed param))
#define glPointParameterxOES_defined
#ifndef glPointParameterxvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPointParameterxvOES, (pname, params), (GLenum pname, const GLfixed *params))
#define glPointParameterxvOES_defined
#endif
#ifndef glPointSizexOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPointSizexOES, (size), (GLfixed size))
#define glPointSizexOES_defined
#endif
#ifndef glPolygonOffsetxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glPolygonOffsetxOES, (factor, units), (GLfixed factor, GLfixed units))
#define glPolygonOffsetxOES_defined
#endif
#ifndef glRotatexOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glRotatexOES, (angle, x, y, z), (GLfixed angle, GLfixed x, GLfixed y, GLfixed z))
#define glRotatexOES_defined
#endif
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glSampleCoveragexOES, (value, invert), (GLclampx value, GLboolean invert))
#define glSampleCoveragexOES_defined
#ifndef glScalexOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glScalexOES, (x, y, z), (GLfixed x, GLfixed y, GLfixed z))
#define glScalexOES_defined
#endif
#ifndef glTexEnvxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexEnvxOES, (target, pname, param), (GLenum target, GLenum pname, GLfixed param))
#define glTexEnvxOES_defined
#endif
#ifndef glTexEnvxvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexEnvxvOES, (target, pname, params), (GLenum target, GLenum pname, const GLfixed *params))
#define glTexEnvxvOES_defined
#endif
#ifndef glTexGenxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexGenxOES, (coord, pname, param), (GLenum coord, GLenum pname, GLfixed param))
#define glTexGenxOES_defined
#endif
#ifndef glTexGenxvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexGenxvOES, (coord, pname, params), (GLenum coord, GLenum pname, const GLfixed *params))
#define glTexGenxvOES_defined
#endif
#ifndef glTexParameterxOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexParameterxOES, (target, pname, param), (GLenum target, GLenum pname, GLfixed param))
#define glTexParameterxOES_defined
#endif
#ifndef glTexParameterxvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexParameterxvOES, (target, pname, params), (GLenum target, GLenum pname, const GLfixed *params))
#define glTexParameterxvOES_defined
#endif
#ifndef glTranslatexOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTranslatexOES, (x, y, z), (GLfixed x, GLfixed y, GLfixed z))
#define glTranslatexOES_defined
#endif
#endif // defined(GL_OES_fixed_point)
#if defined(GL_OES_framebuffer_object)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glBindFramebufferOES, (target, framebuffer), (GLenum target, GLuint framebuffer))
#define glBindFramebufferOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glBindRenderbufferOES, (target, renderbuffer), (GLenum target, GLuint renderbuffer))
#define glBindRenderbufferOES_defined
GLATTER_FBLOCK(return, GL, GL_API, GLenum, GL_APIENTRY, glCheckFramebufferStatusOES, (target), (GLenum target))
#define glCheckFramebufferStatusOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDeleteFramebuffersOES, (n, framebuffers), (GLsizei n, const GLuint *framebuffers))
#define glDeleteFramebuffersOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDeleteRenderbuffersOES, (n, renderbuffers), (GLsizei n, const GLuint *renderbuffers))
#define glDeleteRenderbuffersOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFramebufferRenderbufferOES, (target, attachment, renderbuffertarget, renderbuffer), (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferRenderbufferOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFramebufferTexture2DOES, (target, attachment, textarget, texture, level), (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture2DOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGenFramebuffersOES, (n, framebuffers), (GLsizei n, GLuint *framebuffers))
#define glGenFramebuffersOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGenRenderbuffersOES, (n, renderbuffers), (GLsizei n, GLuint *renderbuffers))
#define glGenRenderbuffersOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGenerateMipmapOES, (target), (GLenum target))
#define glGenerateMipmapOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetFramebufferAttachmentParameterivOES, (target, attachment, pname, params), (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetFramebufferAttachmentParameterivOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetRenderbufferParameterivOES, (target, pname, params), (GLenum target, GLenum pname, GLint *params))
#define glGetRenderbufferParameterivOES_defined
GLATTER_FBLOCK(return, GL, GL_API, GLboolean, GL_APIENTRY, glIsFramebufferOES, (framebuffer), (GLuint framebuffer))
#define glIsFramebufferOES_defined
GLATTER_FBLOCK(return, GL, GL_API, GLboolean, GL_APIENTRY, glIsRenderbufferOES, (renderbuffer), (GLuint renderbuffer))
#define glIsRenderbufferOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glRenderbufferStorageOES, (target, internalformat, width, height), (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#define glRenderbufferStorageOES_defined
#endif // defined(GL_OES_framebuffer_object)
#if defined(GL_OES_mapbuffer)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetBufferPointervOES, (target, pname, params), (GLenum target, GLenum pname, void **params))
#define glGetBufferPointervOES_defined
GLATTER_FBLOCK(return, GL, GL_API, void *, GL_APIENTRY, glMapBufferOES, (target, access), (GLenum target, GLenum access))
#define glMapBufferOES_defined
GLATTER_FBLOCK(return, GL, GL_API, GLboolean, GL_APIENTRY, glUnmapBufferOES, (target), (GLenum target))
#define glUnmapBufferOES_defined
#endif // defined(GL_OES_mapbuffer)
#if defined(GL_OES_matrix_palette)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glCurrentPaletteMatrixOES, (matrixpaletteindex), (GLuint matrixpaletteindex))
#define glCurrentPaletteMatrixOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glLoadPaletteFromModelViewMatrixOES, (), (void))
#define glLoadPaletteFromModelViewMatrixOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glMatrixIndexPointerOES, (size, type, stride, pointer), (GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glMatrixIndexPointerOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glWeightPointerOES, (size, type, stride, pointer), (GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glWeightPointerOES_defined
#endif // defined(GL_OES_matrix_palette)
#if defined(GL_OES_query_matrix)
#ifndef glQueryMatrixxOES_defined
GLATTER_FBLOCK(return, GL, GL_API, GLbitfield, GL_APIENTRY, glQueryMatrixxOES, (mantissa, exponent), (GLfixed *mantissa, GLint *exponent))
#define glQueryMatrixxOES_defined
#endif
#endif // defined(GL_OES_query_matrix)
#if defined(GL_OES_single_precision)
#ifndef glClearDepthfOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClearDepthfOES, (depth), (GLclampf depth))
#define glClearDepthfOES_defined
#endif
#ifndef glClipPlanefOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glClipPlanefOES, (plane, equation), (GLenum plane, const GLfloat *equation))
#define glClipPlanefOES_defined
#endif
#ifndef glDepthRangefOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDepthRangefOES, (n, f), (GLclampf n, GLclampf f))
#define glDepthRangefOES_defined
#endif
#ifndef glFrustumfOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glFrustumfOES, (l, r, b, t, n, f), (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f))
#define glFrustumfOES_defined
#endif
#ifndef glGetClipPlanefOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetClipPlanefOES, (plane, equation), (GLenum plane, GLfloat *equation))
#define glGetClipPlanefOES_defined
#endif
#ifndef glOrthofOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glOrthofOES, (l, r, b, t, n, f), (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f))
#define glOrthofOES_defined
#endif
#endif // defined(GL_OES_single_precision)
#if defined(GL_OES_texture_cube_map)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetTexGenfvOES, (coord, pname, params), (GLenum coord, GLenum pname, GLfloat *params))
#define glGetTexGenfvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetTexGenivOES, (coord, pname, params), (GLenum coord, GLenum pname, GLint *params))
#define glGetTexGenivOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexGenfOES, (coord, pname, param), (GLenum coord, GLenum pname, GLfloat param))
#define glTexGenfOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexGenfvOES, (coord, pname, params), (GLenum coord, GLenum pname, const GLfloat *params))
#define glTexGenfvOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexGeniOES, (coord, pname, param), (GLenum coord, GLenum pname, GLint param))
#define glTexGeniOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glTexGenivOES, (coord, pname, params), (GLenum coord, GLenum pname, const GLint *params))
#define glTexGenivOES_defined
#endif // defined(GL_OES_texture_cube_map)
#if defined(GL_OES_vertex_array_object)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glBindVertexArrayOES, (array), (GLuint array))
#define glBindVertexArrayOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDeleteVertexArraysOES, (n, arrays), (GLsizei n, const GLuint *arrays))
#define glDeleteVertexArraysOES_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGenVertexArraysOES, (n, arrays), (GLsizei n, GLuint *arrays))
#define glGenVertexArraysOES_defined
GLATTER_FBLOCK(return, GL, GL_API, GLboolean, GL_APIENTRY, glIsVertexArrayOES, (array), (GLuint array))
#define glIsVertexArrayOES_defined
#endif // defined(GL_OES_vertex_array_object)
#if defined(GL_QCOM_driver_control)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glDisableDriverControlQCOM, (driverControl), (GLuint driverControl))
#define glDisableDriverControlQCOM_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glEnableDriverControlQCOM, (driverControl), (GLuint driverControl))
#define glEnableDriverControlQCOM_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetDriverControlStringQCOM, (driverControl, bufSize, length, driverControlString), (GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString))
#define glGetDriverControlStringQCOM_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glGetDriverControlsQCOM, (num, size, driverControls), (GLint *num, GLsizei size, GLuint *driverControls))
#define glGetDriverControlsQCOM_defined
#endif // defined(GL_QCOM_driver_control)
#if defined(GL_QCOM_extended_get)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glExtGetBufferPointervQCOM, (target, params), (GLenum target, void **params))
#define glExtGetBufferPointervQCOM_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glExtGetBuffersQCOM, (buffers, maxBuffers, numBuffers), (GLuint *buffers, GLint maxBuffers, GLint *numBuffers))
#define glExtGetBuffersQCOM_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glExtGetFramebuffersQCOM, (framebuffers, maxFramebuffers, numFramebuffers), (GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers))
#define glExtGetFramebuffersQCOM_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glExtGetRenderbuffersQCOM, (renderbuffers, maxRenderbuffers, numRenderbuffers), (GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers))
#define glExtGetRenderbuffersQCOM_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glExtGetTexLevelParameterivQCOM, (texture, face, level, pname, params), (GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params))
#define glExtGetTexLevelParameterivQCOM_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glExtGetTexSubImageQCOM, (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels), (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels))
#define glExtGetTexSubImageQCOM_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glExtGetTexturesQCOM, (textures, maxTextures, numTextures), (GLuint *textures, GLint maxTextures, GLint *numTextures))
#define glExtGetTexturesQCOM_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glExtTexObjectStateOverrideiQCOM, (target, pname, param), (GLenum target, GLenum pname, GLint param))
#define glExtTexObjectStateOverrideiQCOM_defined
#endif // defined(GL_QCOM_extended_get)
#if defined(GL_QCOM_extended_get2)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glExtGetProgramBinarySourceQCOM, (program, shadertype, source, length), (GLuint program, GLenum shadertype, GLchar *source, GLint *length))
#define glExtGetProgramBinarySourceQCOM_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glExtGetProgramsQCOM, (programs, maxPrograms, numPrograms), (GLuint *programs, GLint maxPrograms, GLint *numPrograms))
#define glExtGetProgramsQCOM_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glExtGetShadersQCOM, (shaders, maxShaders, numShaders), (GLuint *shaders, GLint maxShaders, GLint *numShaders))
#define glExtGetShadersQCOM_defined
GLATTER_FBLOCK(return, GL, GL_API, GLboolean, GL_APIENTRY, glExtIsProgramBinaryQCOM, (program), (GLuint program))
#define glExtIsProgramBinaryQCOM_defined
#endif // defined(GL_QCOM_extended_get2)
#if defined(GL_QCOM_tiled_rendering)
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glEndTilingQCOM, (preserveMask), (GLbitfield preserveMask))
#define glEndTilingQCOM_defined
GLATTER_FBLOCK(, GL, GL_API, void, GL_APIENTRY, glStartTilingQCOM, (x, y, width, height, preserveMask), (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask))
#define glStartTilingQCOM_defined
#endif // defined(__gles1_glext_h_)
#endif // defined(GL_QCOM_tiled_rendering)
#endif // GLATTER_GL

