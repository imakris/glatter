/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_GLU
#if defined(__glu_h__)
#ifndef gluBeginCurve_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluBeginCurve, (nurb), (GLUnurbs* nurb))
#define gluBeginCurve_defined
#endif
#ifndef gluBeginPolygon_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluBeginPolygon, (tess), (GLUtesselator* tess))
#define gluBeginPolygon_defined
#endif
#ifndef gluBeginSurface_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluBeginSurface, (nurb), (GLUnurbs* nurb))
#define gluBeginSurface_defined
#endif
#ifndef gluBeginTrim_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluBeginTrim, (nurb), (GLUnurbs* nurb))
#define gluBeginTrim_defined
#endif
GLATTER_FBLOCK(return, GLU, GLAPI, GLint, GLAPIENTRY, gluBuild1DMipmapLevels, (target, internalFormat, width, format, type, level, base, max, data), (GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data))
#define gluBuild1DMipmapLevels_defined
#ifndef gluBuild1DMipmaps_defined
GLATTER_FBLOCK(return, GLU, GLAPI, GLint, GLAPIENTRY, gluBuild1DMipmaps, (target, internalFormat, width, format, type, data), (GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, const void *data))
#define gluBuild1DMipmaps_defined
#endif
GLATTER_FBLOCK(return, GLU, GLAPI, GLint, GLAPIENTRY, gluBuild2DMipmapLevels, (target, internalFormat, width, height, format, type, level, base, max, data), (GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data))
#define gluBuild2DMipmapLevels_defined
#ifndef gluBuild2DMipmaps_defined
GLATTER_FBLOCK(return, GLU, GLAPI, GLint, GLAPIENTRY, gluBuild2DMipmaps, (target, internalFormat, width, height, format, type, data), (GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *data))
#define gluBuild2DMipmaps_defined
#endif
GLATTER_FBLOCK(return, GLU, GLAPI, GLint, GLAPIENTRY, gluBuild3DMipmapLevels, (target, internalFormat, width, height, depth, format, type, level, base, max, data), (GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data))
#define gluBuild3DMipmapLevels_defined
GLATTER_FBLOCK(return, GLU, GLAPI, GLint, GLAPIENTRY, gluBuild3DMipmaps, (target, internalFormat, width, height, depth, format, type, data), (GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data))
#define gluBuild3DMipmaps_defined
GLATTER_FBLOCK(return, GLU, GLAPI, GLboolean, GLAPIENTRY, gluCheckExtension, (extName, extString), (const GLubyte *extName, const GLubyte *extString))
#define gluCheckExtension_defined
#ifndef gluCylinder_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluCylinder, (quad, base, top, height, slices, stacks), (GLUquadric* quad, GLdouble base, GLdouble top, GLdouble height, GLint slices, GLint stacks))
#define gluCylinder_defined
#endif
#ifndef gluDeleteNurbsRenderer_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluDeleteNurbsRenderer, (nurb), (GLUnurbs* nurb))
#define gluDeleteNurbsRenderer_defined
#endif
#ifndef gluDeleteQuadric_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluDeleteQuadric, (quad), (GLUquadric* quad))
#define gluDeleteQuadric_defined
#endif
#ifndef gluDeleteTess_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluDeleteTess, (tess), (GLUtesselator* tess))
#define gluDeleteTess_defined
#endif
#ifndef gluDisk_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluDisk, (quad, inner, outer, slices, loops), (GLUquadric* quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops))
#define gluDisk_defined
#endif
#ifndef gluEndCurve_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluEndCurve, (nurb), (GLUnurbs* nurb))
#define gluEndCurve_defined
#endif
#ifndef gluEndPolygon_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluEndPolygon, (tess), (GLUtesselator* tess))
#define gluEndPolygon_defined
#endif
#ifndef gluEndSurface_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluEndSurface, (nurb), (GLUnurbs* nurb))
#define gluEndSurface_defined
#endif
#ifndef gluEndTrim_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluEndTrim, (nurb), (GLUnurbs* nurb))
#define gluEndTrim_defined
#endif
#ifndef gluErrorString_defined
GLATTER_FBLOCK(return, GLU, GLAPI, const GLubyte *, GLAPIENTRY, gluErrorString, (error), (GLenum error))
#define gluErrorString_defined
#endif
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluGetNurbsProperty, (nurb, property, data), (GLUnurbs* nurb, GLenum property, GLfloat* data))
#define gluGetNurbsProperty_defined
#ifndef gluGetString_defined
GLATTER_FBLOCK(return, GLU, GLAPI, const GLubyte *, GLAPIENTRY, gluGetString, (name), (GLenum name))
#define gluGetString_defined
#endif
#ifndef gluGetTessProperty_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluGetTessProperty, (tess, which, data), (GLUtesselator* tess, GLenum which, GLdouble* data))
#define gluGetTessProperty_defined
#endif
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluLoadSamplingMatrices, (nurb, model, perspective, view), (GLUnurbs* nurb, const GLfloat *model, const GLfloat *perspective, const GLint *view))
#define gluLoadSamplingMatrices_defined
#ifndef gluLookAt_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluLookAt, (eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ), (GLdouble eyeX, GLdouble eyeY, GLdouble eyeZ, GLdouble centerX, GLdouble centerY, GLdouble centerZ, GLdouble upX, GLdouble upY, GLdouble upZ))
#define gluLookAt_defined
#endif
#ifndef gluNewNurbsRenderer_defined
GLATTER_FBLOCK(return, GLU, GLAPI, GLUnurbs*, GLAPIENTRY, gluNewNurbsRenderer, (), (void))
#define gluNewNurbsRenderer_defined
#endif
#ifndef gluNewQuadric_defined
GLATTER_FBLOCK(return, GLU, GLAPI, GLUquadric*, GLAPIENTRY, gluNewQuadric, (), (void))
#define gluNewQuadric_defined
#endif
#ifndef gluNewTess_defined
GLATTER_FBLOCK(return, GLU, GLAPI, GLUtesselator*, GLAPIENTRY, gluNewTess, (), (void))
#define gluNewTess_defined
#endif
#ifndef gluNextContour_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluNextContour, (tess, type), (GLUtesselator* tess, GLenum type))
#define gluNextContour_defined
#endif
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluNurbsCallback, (nurb, which, CallBackFunc), (GLUnurbs* nurb, GLenum which, _GLUfuncptr CallBackFunc))
#define gluNurbsCallback_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluNurbsCallbackData, (nurb, userData), (GLUnurbs* nurb, GLvoid* userData))
#define gluNurbsCallbackData_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluNurbsCallbackDataEXT, (nurb, userData), (GLUnurbs* nurb, GLvoid* userData))
#define gluNurbsCallbackDataEXT_defined
#ifndef gluNurbsCurve_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluNurbsCurve, (nurb, knotCount, knots, stride, control, order, type), (GLUnurbs* nurb, GLint knotCount, GLfloat *knots, GLint stride, GLfloat *control, GLint order, GLenum type))
#define gluNurbsCurve_defined
#endif
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluNurbsProperty, (nurb, property, value), (GLUnurbs* nurb, GLenum property, GLfloat value))
#define gluNurbsProperty_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluNurbsSurface, (nurb, sKnotCount, sKnots, tKnotCount, tKnots, sStride, tStride, control, sOrder, tOrder, type), (GLUnurbs* nurb, GLint sKnotCount, GLfloat* sKnots, GLint tKnotCount, GLfloat* tKnots, GLint sStride, GLint tStride, GLfloat* control, GLint sOrder, GLint tOrder, GLenum type))
#define gluNurbsSurface_defined
#ifndef gluOrtho2D_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluOrtho2D, (left, right, bottom, top), (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top))
#define gluOrtho2D_defined
#endif
#ifndef gluPartialDisk_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluPartialDisk, (quad, inner, outer, slices, loops, start, sweep), (GLUquadric* quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops, GLdouble start, GLdouble sweep))
#define gluPartialDisk_defined
#endif
#ifndef gluPerspective_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluPerspective, (fovy, aspect, zNear, zFar), (GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar))
#define gluPerspective_defined
#endif
#ifndef gluPickMatrix_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluPickMatrix, (x, y, delX, delY, viewport), (GLdouble x, GLdouble y, GLdouble delX, GLdouble delY, GLint *viewport))
#define gluPickMatrix_defined
#endif
#ifndef gluProject_defined
GLATTER_FBLOCK(return, GLU, GLAPI, GLint, GLAPIENTRY, gluProject, (objX, objY, objZ, model, proj, view, winX, winY, winZ), (GLdouble objX, GLdouble objY, GLdouble objZ, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble* winX, GLdouble* winY, GLdouble* winZ))
#define gluProject_defined
#endif
#ifndef gluPwlCurve_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluPwlCurve, (nurb, count, data, stride, type), (GLUnurbs* nurb, GLint count, GLfloat* data, GLint stride, GLenum type))
#define gluPwlCurve_defined
#endif
#ifndef gluQuadricCallback_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluQuadricCallback, (quad, which, CallBackFunc), (GLUquadric* quad, GLenum which, _GLUfuncptr CallBackFunc))
#define gluQuadricCallback_defined
#endif
#ifndef gluQuadricDrawStyle_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluQuadricDrawStyle, (quad, draw), (GLUquadric* quad, GLenum draw))
#define gluQuadricDrawStyle_defined
#endif
#ifndef gluQuadricNormals_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluQuadricNormals, (quad, normal), (GLUquadric* quad, GLenum normal))
#define gluQuadricNormals_defined
#endif
#ifndef gluQuadricOrientation_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluQuadricOrientation, (quad, orientation), (GLUquadric* quad, GLenum orientation))
#define gluQuadricOrientation_defined
#endif
#ifndef gluQuadricTexture_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluQuadricTexture, (quad, texture), (GLUquadric* quad, GLboolean texture))
#define gluQuadricTexture_defined
#endif
#ifndef gluScaleImage_defined
GLATTER_FBLOCK(return, GLU, GLAPI, GLint, GLAPIENTRY, gluScaleImage, (format, wIn, hIn, typeIn, dataIn, wOut, hOut, typeOut, dataOut), (GLenum format, GLsizei wIn, GLsizei hIn, GLenum typeIn, const void *dataIn, GLsizei wOut, GLsizei hOut, GLenum typeOut, GLvoid* dataOut))
#define gluScaleImage_defined
#endif
#ifndef gluSphere_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluSphere, (quad, radius, slices, stacks), (GLUquadric* quad, GLdouble radius, GLint slices, GLint stacks))
#define gluSphere_defined
#endif
#ifndef gluTessBeginContour_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluTessBeginContour, (tess), (GLUtesselator* tess))
#define gluTessBeginContour_defined
#endif
#ifndef gluTessBeginPolygon_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluTessBeginPolygon, (tess, data), (GLUtesselator* tess, GLvoid* data))
#define gluTessBeginPolygon_defined
#endif
#ifndef gluTessCallback_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluTessCallback, (tess, which, CallBackFunc), (GLUtesselator* tess, GLenum which, _GLUfuncptr CallBackFunc))
#define gluTessCallback_defined
#endif
#ifndef gluTessEndContour_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluTessEndContour, (tess), (GLUtesselator* tess))
#define gluTessEndContour_defined
#endif
#ifndef gluTessEndPolygon_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluTessEndPolygon, (tess), (GLUtesselator* tess))
#define gluTessEndPolygon_defined
#endif
#ifndef gluTessNormal_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluTessNormal, (tess, valueX, valueY, valueZ), (GLUtesselator* tess, GLdouble valueX, GLdouble valueY, GLdouble valueZ))
#define gluTessNormal_defined
#endif
#ifndef gluTessProperty_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluTessProperty, (tess, which, data), (GLUtesselator* tess, GLenum which, GLdouble data))
#define gluTessProperty_defined
#endif
#ifndef gluTessVertex_defined
GLATTER_FBLOCK(, GLU, GLAPI, void, GLAPIENTRY, gluTessVertex, (tess, location, data), (GLUtesselator* tess, GLdouble *location, GLvoid* data))
#define gluTessVertex_defined
#endif
#ifndef gluUnProject_defined
GLATTER_FBLOCK(return, GLU, GLAPI, GLint, GLAPIENTRY, gluUnProject, (winX, winY, winZ, model, proj, view, objX, objY, objZ), (GLdouble winX, GLdouble winY, GLdouble winZ, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble* objX, GLdouble* objY, GLdouble* objZ))
#define gluUnProject_defined
#endif
GLATTER_FBLOCK(return, GLU, GLAPI, GLint, GLAPIENTRY, gluUnProject4, (winX, winY, winZ, clipW, model, proj, view, nearVal, farVal, objX, objY, objZ, objW), (GLdouble winX, GLdouble winY, GLdouble winZ, GLdouble clipW, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble nearVal, GLdouble farVal, GLdouble* objX, GLdouble* objY, GLdouble* objZ, GLdouble* objW))
#define gluUnProject4_defined
#endif // defined(__glu_h__)
#endif // GLATTER_GLU

