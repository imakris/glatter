/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_GLX
#if defined(GLX_H)
#if defined(GLX_ARB_get_proc_address)
#ifndef glXGetProcAddressARB_defined
GLATTER_FBLOCK(return, GLX, extern, __GLXextFuncPtr, , glXGetProcAddressARB, (a0), (const GLubyte *a0))
#define glXGetProcAddressARB_defined
#endif
#endif // defined(GLX_ARB_get_proc_address)
#if defined(GLX_ARB_render_texture)
GLATTER_FBLOCK(return, GLX, extern, Bool, , glXBindTexImageARB, (dpy, pbuffer, buffer), (Display *dpy, GLXPbuffer pbuffer, int buffer))
#define glXBindTexImageARB_defined
GLATTER_FBLOCK(return, GLX, extern, Bool, , glXDrawableAttribARB, (dpy, draw, attribList), (Display *dpy, GLXDrawable draw, const int *attribList))
#define glXDrawableAttribARB_defined
GLATTER_FBLOCK(return, GLX, extern, Bool, , glXReleaseTexImageARB, (dpy, pbuffer, buffer), (Display *dpy, GLXPbuffer pbuffer, int buffer))
#define glXReleaseTexImageARB_defined
#endif // defined(GLX_ARB_render_texture)
#if defined(GLX_MESA_swap_control)
#ifndef glXGetSwapIntervalMESA_defined
GLATTER_FBLOCK(return, GLX, extern, int, , glXGetSwapIntervalMESA, (), (void))
#define glXGetSwapIntervalMESA_defined
#endif
#ifndef glXSwapIntervalMESA_defined
GLATTER_FBLOCK(return, GLX, extern, int, , glXSwapIntervalMESA, (interval), (unsigned int interval))
#define glXSwapIntervalMESA_defined
#endif
#endif // defined(GLX_MESA_swap_control)
#if defined(GLX_MESA_swap_frame_usage)
GLATTER_FBLOCK(return, GLX, extern, int, , glXBeginFrameTrackingMESA, (dpy, drawable), (Display *dpy, GLXDrawable drawable))
#define glXBeginFrameTrackingMESA_defined
GLATTER_FBLOCK(return, GLX, extern, int, , glXEndFrameTrackingMESA, (dpy, drawable), (Display *dpy, GLXDrawable drawable))
#define glXEndFrameTrackingMESA_defined
GLATTER_FBLOCK(return, GLX, extern, int, , glXGetFrameUsageMESA, (dpy, drawable, usage), (Display *dpy, GLXDrawable drawable, float *usage))
#define glXGetFrameUsageMESA_defined
GLATTER_FBLOCK(return, GLX, extern, int, , glXQueryFrameTrackingMESA, (dpy, drawable, swapCount, missedFrames, lastMissedUsage), (Display *dpy, GLXDrawable drawable, int64_t *swapCount, int64_t *missedFrames, float *lastMissedUsage))
#define glXQueryFrameTrackingMESA_defined
#endif // defined(GLX_MESA_swap_frame_usage)
#if defined(GLX_NV_vertex_array_range)
GLATTER_FBLOCK(return, GLX, extern, void *, , glXAllocateMemoryNV, (size, readfreq, writefreq, priority), (GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority))
#define glXAllocateMemoryNV_defined
GLATTER_FBLOCK(, GLX, extern, void, , glXFreeMemoryNV, (pointer), (GLvoid *pointer))
#define glXFreeMemoryNV_defined
#endif // defined(GLX_NV_vertex_array_range)
#ifndef glXChooseFBConfig_defined
GLATTER_FBLOCK(return, GLX, extern, GLXFBConfig *, , glXChooseFBConfig, (dpy, screen, attribList, nitems), (Display *dpy, int screen, const int *attribList, int *nitems))
#define glXChooseFBConfig_defined
#endif
GLATTER_FBLOCK(return, GLX, extern, XVisualInfo*, , glXChooseVisual, (dpy, screen, attribList), (Display *dpy, int screen, int *attribList))
#define glXChooseVisual_defined
GLATTER_FBLOCK(, GLX, extern, void, , glXCopyContext, (dpy, src, dst, mask), (Display *dpy, GLXContext src, GLXContext dst, unsigned long mask))
#define glXCopyContext_defined
GLATTER_FBLOCK(return, GLX, extern, GLXContext, , glXCreateContext, (dpy, vis, shareList, direct), (Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct))
#define glXCreateContext_defined
GLATTER_FBLOCK(return, GLX, extern, GLXPixmap, , glXCreateGLXPixmap, (dpy, visual, pixmap), (Display *dpy, XVisualInfo *visual, Pixmap pixmap))
#define glXCreateGLXPixmap_defined
#ifndef glXCreateNewContext_defined
GLATTER_FBLOCK(return, GLX, extern, GLXContext, , glXCreateNewContext, (dpy, config, renderType, shareList, direct), (Display *dpy, GLXFBConfig config, int renderType, GLXContext shareList, Bool direct))
#define glXCreateNewContext_defined
#endif
#ifndef glXCreatePbuffer_defined
GLATTER_FBLOCK(return, GLX, extern, GLXPbuffer, , glXCreatePbuffer, (dpy, config, attribList), (Display *dpy, GLXFBConfig config, const int *attribList))
#define glXCreatePbuffer_defined
#endif
#ifndef glXCreatePixmap_defined
GLATTER_FBLOCK(return, GLX, extern, GLXPixmap, , glXCreatePixmap, (dpy, config, pixmap, attribList), (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attribList))
#define glXCreatePixmap_defined
#endif
#ifndef glXCreateWindow_defined
GLATTER_FBLOCK(return, GLX, extern, GLXWindow, , glXCreateWindow, (dpy, config, win, attribList), (Display *dpy, GLXFBConfig config, Window win, const int *attribList))
#define glXCreateWindow_defined
#endif
GLATTER_FBLOCK(, GLX, extern, void, , glXDestroyContext, (dpy, ctx), (Display *dpy, GLXContext ctx))
#define glXDestroyContext_defined
GLATTER_FBLOCK(, GLX, extern, void, , glXDestroyGLXPixmap, (dpy, pixmap), (Display *dpy, GLXPixmap pixmap))
#define glXDestroyGLXPixmap_defined
#ifndef glXDestroyPbuffer_defined
GLATTER_FBLOCK(, GLX, extern, void, , glXDestroyPbuffer, (dpy, pbuf), (Display *dpy, GLXPbuffer pbuf))
#define glXDestroyPbuffer_defined
#endif
#ifndef glXDestroyPixmap_defined
GLATTER_FBLOCK(, GLX, extern, void, , glXDestroyPixmap, (dpy, pixmap), (Display *dpy, GLXPixmap pixmap))
#define glXDestroyPixmap_defined
#endif
#ifndef glXDestroyWindow_defined
GLATTER_FBLOCK(, GLX, extern, void, , glXDestroyWindow, (dpy, window), (Display *dpy, GLXWindow window))
#define glXDestroyWindow_defined
#endif
GLATTER_FBLOCK(return, GLX, extern, const char *, , glXGetClientString, (dpy, name), (Display *dpy, int name))
#define glXGetClientString_defined
GLATTER_FBLOCK(return, GLX, extern, int, , glXGetConfig, (dpy, visual, attrib, value), (Display *dpy, XVisualInfo *visual, int attrib, int *value))
#define glXGetConfig_defined
GLATTER_FBLOCK(return, GLX, extern, GLXContext, , glXGetCurrentContext, (), (void))
#define glXGetCurrentContext_defined
GLATTER_FBLOCK(return, GLX, extern, Display *, , glXGetCurrentDisplay, (), (void))
#define glXGetCurrentDisplay_defined
GLATTER_FBLOCK(return, GLX, extern, GLXDrawable, , glXGetCurrentDrawable, (), (void))
#define glXGetCurrentDrawable_defined
#ifndef glXGetCurrentReadDrawable_defined
GLATTER_FBLOCK(return, GLX, extern, GLXDrawable, , glXGetCurrentReadDrawable, (), (void))
#define glXGetCurrentReadDrawable_defined
#endif
#ifndef glXGetFBConfigAttrib_defined
GLATTER_FBLOCK(return, GLX, extern, int, , glXGetFBConfigAttrib, (dpy, config, attribute, value), (Display *dpy, GLXFBConfig config, int attribute, int *value))
#define glXGetFBConfigAttrib_defined
#endif
#ifndef glXGetFBConfigs_defined
GLATTER_FBLOCK(return, GLX, extern, GLXFBConfig *, , glXGetFBConfigs, (dpy, screen, nelements), (Display *dpy, int screen, int *nelements))
#define glXGetFBConfigs_defined
#endif
#ifndef glXGetSelectedEvent_defined
GLATTER_FBLOCK(, GLX, extern, void, , glXGetSelectedEvent, (dpy, drawable, mask), (Display *dpy, GLXDrawable drawable, unsigned long *mask))
#define glXGetSelectedEvent_defined
#endif
#ifndef glXGetVisualFromFBConfig_defined
GLATTER_FBLOCK(return, GLX, extern, XVisualInfo *, , glXGetVisualFromFBConfig, (dpy, config), (Display *dpy, GLXFBConfig config))
#define glXGetVisualFromFBConfig_defined
#endif
GLATTER_FBLOCK(return, GLX, extern, Bool, , glXIsDirect, (dpy, ctx), (Display *dpy, GLXContext ctx))
#define glXIsDirect_defined
#ifndef glXMakeContextCurrent_defined
GLATTER_FBLOCK(return, GLX, extern, Bool, , glXMakeContextCurrent, (dpy, draw, read, ctx), (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx))
#define glXMakeContextCurrent_defined
#endif
GLATTER_FBLOCK(return, GLX, extern, Bool, , glXMakeCurrent, (dpy, drawable, ctx), (Display *dpy, GLXDrawable drawable, GLXContext ctx))
#define glXMakeCurrent_defined
#ifndef glXQueryContext_defined
GLATTER_FBLOCK(return, GLX, extern, int, , glXQueryContext, (dpy, ctx, attribute, value), (Display *dpy, GLXContext ctx, int attribute, int *value))
#define glXQueryContext_defined
#endif
#ifndef glXQueryDrawable_defined
GLATTER_FBLOCK(, GLX, extern, void, , glXQueryDrawable, (dpy, draw, attribute, value), (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value))
#define glXQueryDrawable_defined
#endif
GLATTER_FBLOCK(return, GLX, extern, Bool, , glXQueryExtension, (dpy, errorb, event), (Display *dpy, int *errorb, int *event))
#define glXQueryExtension_defined
GLATTER_FBLOCK(return, GLX, extern, const char *, , glXQueryExtensionsString, (dpy, screen), (Display *dpy, int screen))
#define glXQueryExtensionsString_defined
GLATTER_FBLOCK(return, GLX, extern, const char *, , glXQueryServerString, (dpy, screen, name), (Display *dpy, int screen, int name))
#define glXQueryServerString_defined
GLATTER_FBLOCK(return, GLX, extern, Bool, , glXQueryVersion, (dpy, maj, min), (Display *dpy, int *maj, int *min))
#define glXQueryVersion_defined
#ifndef glXSelectEvent_defined
GLATTER_FBLOCK(, GLX, extern, void, , glXSelectEvent, (dpy, drawable, mask), (Display *dpy, GLXDrawable drawable, unsigned long mask))
#define glXSelectEvent_defined
#endif
GLATTER_FBLOCK(, GLX, extern, void, , glXSwapBuffers, (dpy, drawable), (Display *dpy, GLXDrawable drawable))
#define glXSwapBuffers_defined
GLATTER_FBLOCK(, GLX, extern, void, , glXUseXFont, (font, first, count, list), (Font font, int first, int count, int list))
#define glXUseXFont_defined
GLATTER_FBLOCK(, GLX, extern, void, , glXWaitGL, (), (void))
#define glXWaitGL_defined
GLATTER_FBLOCK(, GLX, extern, void, , glXWaitX, (), (void))
#define glXWaitX_defined
#endif // defined(GLX_H)
#if defined(__glx_glxext_h_)
#if defined(GLX_AMD_gpu_association)
GLATTER_FBLOCK(, GLX, , void, , glXBlitContextFramebufferAMD, (dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter), (GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glXBlitContextFramebufferAMD_defined
GLATTER_FBLOCK(return, GLX, , GLXContext, , glXCreateAssociatedContextAMD, (id, share_list), (unsigned int id, GLXContext share_list))
#define glXCreateAssociatedContextAMD_defined
GLATTER_FBLOCK(return, GLX, , GLXContext, , glXCreateAssociatedContextAttribsAMD, (id, share_context, attribList), (unsigned int id, GLXContext share_context, const int *attribList))
#define glXCreateAssociatedContextAttribsAMD_defined
GLATTER_FBLOCK(return, GLX, , Bool, , glXDeleteAssociatedContextAMD, (ctx), (GLXContext ctx))
#define glXDeleteAssociatedContextAMD_defined
GLATTER_FBLOCK(return, GLX, , unsigned int, , glXGetContextGPUIDAMD, (ctx), (GLXContext ctx))
#define glXGetContextGPUIDAMD_defined
GLATTER_FBLOCK(return, GLX, , GLXContext, , glXGetCurrentAssociatedContextAMD, (), (void))
#define glXGetCurrentAssociatedContextAMD_defined
GLATTER_FBLOCK(return, GLX, , unsigned int, , glXGetGPUIDsAMD, (maxCount, ids), (unsigned int maxCount, unsigned int *ids))
#define glXGetGPUIDsAMD_defined
GLATTER_FBLOCK(return, GLX, , int, , glXGetGPUInfoAMD, (id, property, dataType, size, data), (unsigned int id, int property, GLenum dataType, unsigned int size, void *data))
#define glXGetGPUInfoAMD_defined
GLATTER_FBLOCK(return, GLX, , Bool, , glXMakeAssociatedContextCurrentAMD, (ctx), (GLXContext ctx))
#define glXMakeAssociatedContextCurrentAMD_defined
#endif // defined(GLX_AMD_gpu_association)
#if defined(GLX_ARB_create_context)
GLATTER_FBLOCK(return, GLX, , GLXContext, , glXCreateContextAttribsARB, (dpy, config, share_context, direct, attrib_list), (Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list))
#define glXCreateContextAttribsARB_defined
#endif // defined(GLX_ARB_create_context)
#if defined(GLX_ARB_get_proc_address)
#ifndef glXGetProcAddressARB_defined
GLATTER_FBLOCK(return, GLX, , __GLXextFuncPtr, , glXGetProcAddressARB, (procName), (const GLubyte *procName))
#define glXGetProcAddressARB_defined
#endif
#endif // defined(GLX_ARB_get_proc_address)
#if defined(GLX_EXT_import_context)
GLATTER_FBLOCK(, GLX, , void, , glXFreeContextEXT, (dpy, context), (Display *dpy, GLXContext context))
#define glXFreeContextEXT_defined
GLATTER_FBLOCK(return, GLX, , GLXContextID, , glXGetContextIDEXT, (context), (const GLXContext context))
#define glXGetContextIDEXT_defined
GLATTER_FBLOCK(return, GLX, , Display *, , glXGetCurrentDisplayEXT, (), (void))
#define glXGetCurrentDisplayEXT_defined
GLATTER_FBLOCK(return, GLX, , GLXContext, , glXImportContextEXT, (dpy, contextID), (Display *dpy, GLXContextID contextID))
#define glXImportContextEXT_defined
GLATTER_FBLOCK(return, GLX, , int, , glXQueryContextInfoEXT, (dpy, context, attribute, value), (Display *dpy, GLXContext context, int attribute, int *value))
#define glXQueryContextInfoEXT_defined
#endif // defined(GLX_EXT_import_context)
#if defined(GLX_EXT_swap_control)
GLATTER_FBLOCK(, GLX, , void, , glXSwapIntervalEXT, (dpy, drawable, interval), (Display *dpy, GLXDrawable drawable, int interval))
#define glXSwapIntervalEXT_defined
#endif // defined(GLX_EXT_swap_control)
#if defined(GLX_EXT_texture_from_pixmap)
GLATTER_FBLOCK(, GLX, , void, , glXBindTexImageEXT, (dpy, drawable, buffer, attrib_list), (Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list))
#define glXBindTexImageEXT_defined
GLATTER_FBLOCK(, GLX, , void, , glXReleaseTexImageEXT, (dpy, drawable, buffer), (Display *dpy, GLXDrawable drawable, int buffer))
#define glXReleaseTexImageEXT_defined
#endif // defined(GLX_EXT_texture_from_pixmap)
#if defined(GLX_MESA_agp_offset)
GLATTER_FBLOCK(return, GLX, , unsigned int, , glXGetAGPOffsetMESA, (pointer), (const void *pointer))
#define glXGetAGPOffsetMESA_defined
#endif // defined(GLX_MESA_agp_offset)
#if defined(GLX_MESA_copy_sub_buffer)
GLATTER_FBLOCK(, GLX, , void, , glXCopySubBufferMESA, (dpy, drawable, x, y, width, height), (Display *dpy, GLXDrawable drawable, int x, int y, int width, int height))
#define glXCopySubBufferMESA_defined
#endif // defined(GLX_MESA_copy_sub_buffer)
#if defined(GLX_MESA_pixmap_colormap)
GLATTER_FBLOCK(return, GLX, , GLXPixmap, , glXCreateGLXPixmapMESA, (dpy, visual, pixmap, cmap), (Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap))
#define glXCreateGLXPixmapMESA_defined
#endif // defined(GLX_MESA_pixmap_colormap)
#if defined(GLX_MESA_query_renderer)
GLATTER_FBLOCK(return, GLX, , Bool, , glXQueryCurrentRendererIntegerMESA, (attribute, value), (int attribute, unsigned int *value))
#define glXQueryCurrentRendererIntegerMESA_defined
GLATTER_FBLOCK(return, GLX, , const char *, , glXQueryCurrentRendererStringMESA, (attribute), (int attribute))
#define glXQueryCurrentRendererStringMESA_defined
GLATTER_FBLOCK(return, GLX, , Bool, , glXQueryRendererIntegerMESA, (dpy, screen, renderer, attribute, value), (Display *dpy, int screen, int renderer, int attribute, unsigned int *value))
#define glXQueryRendererIntegerMESA_defined
GLATTER_FBLOCK(return, GLX, , const char *, , glXQueryRendererStringMESA, (dpy, screen, renderer, attribute), (Display *dpy, int screen, int renderer, int attribute))
#define glXQueryRendererStringMESA_defined
#endif // defined(GLX_MESA_query_renderer)
#if defined(GLX_MESA_release_buffers)
GLATTER_FBLOCK(return, GLX, , Bool, , glXReleaseBuffersMESA, (dpy, drawable), (Display *dpy, GLXDrawable drawable))
#define glXReleaseBuffersMESA_defined
#endif // defined(GLX_MESA_release_buffers)
#if defined(GLX_MESA_set_3dfx_mode)
GLATTER_FBLOCK(return, GLX, , GLboolean, , glXSet3DfxModeMESA, (mode), (GLint mode))
#define glXSet3DfxModeMESA_defined
#endif // defined(GLX_MESA_set_3dfx_mode)
#if defined(GLX_MESA_swap_control)
#ifndef glXGetSwapIntervalMESA_defined
GLATTER_FBLOCK(return, GLX, , int, , glXGetSwapIntervalMESA, (), (void))
#define glXGetSwapIntervalMESA_defined
#endif
#ifndef glXSwapIntervalMESA_defined
GLATTER_FBLOCK(return, GLX, , int, , glXSwapIntervalMESA, (interval), (unsigned int interval))
#define glXSwapIntervalMESA_defined
#endif
#endif // defined(GLX_MESA_swap_control)
#if defined(GLX_NV_copy_buffer)
GLATTER_FBLOCK(, GLX, , void, , glXCopyBufferSubDataNV, (dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size), (Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glXCopyBufferSubDataNV_defined
GLATTER_FBLOCK(, GLX, , void, , glXNamedCopyBufferSubDataNV, (dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size), (Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glXNamedCopyBufferSubDataNV_defined
#endif // defined(GLX_NV_copy_buffer)
#if defined(GLX_NV_copy_image)
GLATTER_FBLOCK(, GLX, , void, , glXCopyImageSubDataNV, (dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth), (Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth))
#define glXCopyImageSubDataNV_defined
#endif // defined(GLX_NV_copy_image)
#if defined(GLX_NV_delay_before_swap)
GLATTER_FBLOCK(return, GLX, , Bool, , glXDelayBeforeSwapNV, (dpy, drawable, seconds), (Display *dpy, GLXDrawable drawable, GLfloat seconds))
#define glXDelayBeforeSwapNV_defined
#endif // defined(GLX_NV_delay_before_swap)
#if defined(GLX_NV_present_video)
GLATTER_FBLOCK(return, GLX, , int, , glXBindVideoDeviceNV, (dpy, video_slot, video_device, attrib_list), (Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list))
#define glXBindVideoDeviceNV_defined
GLATTER_FBLOCK(return, GLX, , unsigned int *, , glXEnumerateVideoDevicesNV, (dpy, screen, nelements), (Display *dpy, int screen, int *nelements))
#define glXEnumerateVideoDevicesNV_defined
#endif // defined(GLX_NV_present_video)
#if defined(GLX_NV_swap_group)
GLATTER_FBLOCK(return, GLX, , Bool, , glXBindSwapBarrierNV, (dpy, group, barrier), (Display *dpy, GLuint group, GLuint barrier))
#define glXBindSwapBarrierNV_defined
GLATTER_FBLOCK(return, GLX, , Bool, , glXJoinSwapGroupNV, (dpy, drawable, group), (Display *dpy, GLXDrawable drawable, GLuint group))
#define glXJoinSwapGroupNV_defined
GLATTER_FBLOCK(return, GLX, , Bool, , glXQueryFrameCountNV, (dpy, screen, count), (Display *dpy, int screen, GLuint *count))
#define glXQueryFrameCountNV_defined
GLATTER_FBLOCK(return, GLX, , Bool, , glXQueryMaxSwapGroupsNV, (dpy, screen, maxGroups, maxBarriers), (Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers))
#define glXQueryMaxSwapGroupsNV_defined
GLATTER_FBLOCK(return, GLX, , Bool, , glXQuerySwapGroupNV, (dpy, drawable, group, barrier), (Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier))
#define glXQuerySwapGroupNV_defined
GLATTER_FBLOCK(return, GLX, , Bool, , glXResetFrameCountNV, (dpy, screen), (Display *dpy, int screen))
#define glXResetFrameCountNV_defined
#endif // defined(GLX_NV_swap_group)
#if defined(GLX_NV_video_capture)
GLATTER_FBLOCK(return, GLX, , int, , glXBindVideoCaptureDeviceNV, (dpy, video_capture_slot, device), (Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device))
#define glXBindVideoCaptureDeviceNV_defined
GLATTER_FBLOCK(return, GLX, , GLXVideoCaptureDeviceNV *, , glXEnumerateVideoCaptureDevicesNV, (dpy, screen, nelements), (Display *dpy, int screen, int *nelements))
#define glXEnumerateVideoCaptureDevicesNV_defined
GLATTER_FBLOCK(, GLX, , void, , glXLockVideoCaptureDeviceNV, (dpy, device), (Display *dpy, GLXVideoCaptureDeviceNV device))
#define glXLockVideoCaptureDeviceNV_defined
GLATTER_FBLOCK(return, GLX, , int, , glXQueryVideoCaptureDeviceNV, (dpy, device, attribute, value), (Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value))
#define glXQueryVideoCaptureDeviceNV_defined
GLATTER_FBLOCK(, GLX, , void, , glXReleaseVideoCaptureDeviceNV, (dpy, device), (Display *dpy, GLXVideoCaptureDeviceNV device))
#define glXReleaseVideoCaptureDeviceNV_defined
#endif // defined(GLX_NV_video_capture)
#if defined(GLX_NV_video_out)
GLATTER_FBLOCK(return, GLX, , int, , glXBindVideoImageNV, (dpy, VideoDevice, pbuf, iVideoBuffer), (Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer))
#define glXBindVideoImageNV_defined
GLATTER_FBLOCK(return, GLX, , int, , glXGetVideoDeviceNV, (dpy, screen, numVideoDevices, pVideoDevice), (Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice))
#define glXGetVideoDeviceNV_defined
GLATTER_FBLOCK(return, GLX, , int, , glXGetVideoInfoNV, (dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo), (Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo))
#define glXGetVideoInfoNV_defined
GLATTER_FBLOCK(return, GLX, , int, , glXReleaseVideoDeviceNV, (dpy, screen, VideoDevice), (Display *dpy, int screen, GLXVideoDeviceNV VideoDevice))
#define glXReleaseVideoDeviceNV_defined
GLATTER_FBLOCK(return, GLX, , int, , glXReleaseVideoImageNV, (dpy, pbuf), (Display *dpy, GLXPbuffer pbuf))
#define glXReleaseVideoImageNV_defined
GLATTER_FBLOCK(return, GLX, , int, , glXSendPbufferToVideoNV, (dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock), (Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock))
#define glXSendPbufferToVideoNV_defined
#endif // defined(GLX_NV_video_out)
#if defined(GLX_OML_sync_control)
GLATTER_FBLOCK(return, GLX, , Bool, , glXGetMscRateOML, (dpy, drawable, numerator, denominator), (Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator))
#define glXGetMscRateOML_defined
GLATTER_FBLOCK(return, GLX, , Bool, , glXGetSyncValuesOML, (dpy, drawable, ust, msc, sbc), (Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc))
#define glXGetSyncValuesOML_defined
GLATTER_FBLOCK(return, GLX, , int64_t, , glXSwapBuffersMscOML, (dpy, drawable, target_msc, divisor, remainder), (Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder))
#define glXSwapBuffersMscOML_defined
GLATTER_FBLOCK(return, GLX, , Bool, , glXWaitForMscOML, (dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc), (Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc))
#define glXWaitForMscOML_defined
GLATTER_FBLOCK(return, GLX, , Bool, , glXWaitForSbcOML, (dpy, drawable, target_sbc, ust, msc, sbc), (Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc))
#define glXWaitForSbcOML_defined
#endif // defined(GLX_OML_sync_control)
#if defined(GLX_SGIX_dmbuffer)
#if defined(_DM_BUFFER_H_)
GLATTER_FBLOCK(return, GLX, , Bool, , glXAssociateDMPbufferSGIX, (dpy, pbuffer, params, dmbuffer), (Display *dpy, GLXPbufferSGIX pbuffer, DMparams *params, DMbuffer dmbuffer))
#define glXAssociateDMPbufferSGIX_defined
#endif // defined(_DM_BUFFER_H_)
#endif // defined(GLX_SGIX_dmbuffer)
#if defined(GLX_SGIX_fbconfig)
GLATTER_FBLOCK(return, GLX, , GLXFBConfigSGIX *, , glXChooseFBConfigSGIX, (dpy, screen, attrib_list, nelements), (Display *dpy, int screen, int *attrib_list, int *nelements))
#define glXChooseFBConfigSGIX_defined
GLATTER_FBLOCK(return, GLX, , GLXContext, , glXCreateContextWithConfigSGIX, (dpy, config, render_type, share_list, direct), (Display *dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct))
#define glXCreateContextWithConfigSGIX_defined
GLATTER_FBLOCK(return, GLX, , GLXPixmap, , glXCreateGLXPixmapWithConfigSGIX, (dpy, config, pixmap), (Display *dpy, GLXFBConfigSGIX config, Pixmap pixmap))
#define glXCreateGLXPixmapWithConfigSGIX_defined
GLATTER_FBLOCK(return, GLX, , int, , glXGetFBConfigAttribSGIX, (dpy, config, attribute, value), (Display *dpy, GLXFBConfigSGIX config, int attribute, int *value))
#define glXGetFBConfigAttribSGIX_defined
GLATTER_FBLOCK(return, GLX, , GLXFBConfigSGIX, , glXGetFBConfigFromVisualSGIX, (dpy, vis), (Display *dpy, XVisualInfo *vis))
#define glXGetFBConfigFromVisualSGIX_defined
GLATTER_FBLOCK(return, GLX, , XVisualInfo *, , glXGetVisualFromFBConfigSGIX, (dpy, config), (Display *dpy, GLXFBConfigSGIX config))
#define glXGetVisualFromFBConfigSGIX_defined
#endif // defined(GLX_SGIX_fbconfig)
#if defined(GLX_SGIX_hyperpipe)
GLATTER_FBLOCK(return, GLX, , int, , glXBindHyperpipeSGIX, (dpy, hpId), (Display *dpy, int hpId))
#define glXBindHyperpipeSGIX_defined
GLATTER_FBLOCK(return, GLX, , int, , glXDestroyHyperpipeConfigSGIX, (dpy, hpId), (Display *dpy, int hpId))
#define glXDestroyHyperpipeConfigSGIX_defined
GLATTER_FBLOCK(return, GLX, , int, , glXHyperpipeAttribSGIX, (dpy, timeSlice, attrib, size, attribList), (Display *dpy, int timeSlice, int attrib, int size, void *attribList))
#define glXHyperpipeAttribSGIX_defined
GLATTER_FBLOCK(return, GLX, , int, , glXHyperpipeConfigSGIX, (dpy, networkId, npipes, cfg, hpId), (Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId))
#define glXHyperpipeConfigSGIX_defined
GLATTER_FBLOCK(return, GLX, , int, , glXQueryHyperpipeAttribSGIX, (dpy, timeSlice, attrib, size, returnAttribList), (Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList))
#define glXQueryHyperpipeAttribSGIX_defined
GLATTER_FBLOCK(return, GLX, , int, , glXQueryHyperpipeBestAttribSGIX, (dpy, timeSlice, attrib, size, attribList, returnAttribList), (Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList))
#define glXQueryHyperpipeBestAttribSGIX_defined
GLATTER_FBLOCK(return, GLX, , GLXHyperpipeConfigSGIX *, , glXQueryHyperpipeConfigSGIX, (dpy, hpId, npipes), (Display *dpy, int hpId, int *npipes))
#define glXQueryHyperpipeConfigSGIX_defined
GLATTER_FBLOCK(return, GLX, , GLXHyperpipeNetworkSGIX *, , glXQueryHyperpipeNetworkSGIX, (dpy, npipes), (Display *dpy, int *npipes))
#define glXQueryHyperpipeNetworkSGIX_defined
#endif // defined(GLX_SGIX_hyperpipe)
#if defined(GLX_SGIX_pbuffer)
GLATTER_FBLOCK(return, GLX, , GLXPbufferSGIX, , glXCreateGLXPbufferSGIX, (dpy, config, width, height, attrib_list), (Display *dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int *attrib_list))
#define glXCreateGLXPbufferSGIX_defined
GLATTER_FBLOCK(, GLX, , void, , glXDestroyGLXPbufferSGIX, (dpy, pbuf), (Display *dpy, GLXPbufferSGIX pbuf))
#define glXDestroyGLXPbufferSGIX_defined
GLATTER_FBLOCK(, GLX, , void, , glXGetSelectedEventSGIX, (dpy, drawable, mask), (Display *dpy, GLXDrawable drawable, unsigned long *mask))
#define glXGetSelectedEventSGIX_defined
GLATTER_FBLOCK(, GLX, , void, , glXQueryGLXPbufferSGIX, (dpy, pbuf, attribute, value), (Display *dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int *value))
#define glXQueryGLXPbufferSGIX_defined
GLATTER_FBLOCK(, GLX, , void, , glXSelectEventSGIX, (dpy, drawable, mask), (Display *dpy, GLXDrawable drawable, unsigned long mask))
#define glXSelectEventSGIX_defined
#endif // defined(GLX_SGIX_pbuffer)
#if defined(GLX_SGIX_swap_barrier)
GLATTER_FBLOCK(, GLX, , void, , glXBindSwapBarrierSGIX, (dpy, drawable, barrier), (Display *dpy, GLXDrawable drawable, int barrier))
#define glXBindSwapBarrierSGIX_defined
GLATTER_FBLOCK(return, GLX, , Bool, , glXQueryMaxSwapBarriersSGIX, (dpy, screen, max), (Display *dpy, int screen, int *max))
#define glXQueryMaxSwapBarriersSGIX_defined
#endif // defined(GLX_SGIX_swap_barrier)
#if defined(GLX_SGIX_swap_group)
GLATTER_FBLOCK(, GLX, , void, , glXJoinSwapGroupSGIX, (dpy, drawable, member), (Display *dpy, GLXDrawable drawable, GLXDrawable member))
#define glXJoinSwapGroupSGIX_defined
#endif // defined(GLX_SGIX_swap_group)
#if defined(GLX_SGIX_video_resize)
GLATTER_FBLOCK(return, GLX, , int, , glXBindChannelToWindowSGIX, (display, screen, channel, window), (Display *display, int screen, int channel, Window window))
#define glXBindChannelToWindowSGIX_defined
GLATTER_FBLOCK(return, GLX, , int, , glXChannelRectSGIX, (display, screen, channel, x, y, w, h), (Display *display, int screen, int channel, int x, int y, int w, int h))
#define glXChannelRectSGIX_defined
GLATTER_FBLOCK(return, GLX, , int, , glXChannelRectSyncSGIX, (display, screen, channel, synctype), (Display *display, int screen, int channel, GLenum synctype))
#define glXChannelRectSyncSGIX_defined
GLATTER_FBLOCK(return, GLX, , int, , glXQueryChannelDeltasSGIX, (display, screen, channel, x, y, w, h), (Display *display, int screen, int channel, int *x, int *y, int *w, int *h))
#define glXQueryChannelDeltasSGIX_defined
GLATTER_FBLOCK(return, GLX, , int, , glXQueryChannelRectSGIX, (display, screen, channel, dx, dy, dw, dh), (Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh))
#define glXQueryChannelRectSGIX_defined
#endif // defined(GLX_SGIX_video_resize)
#if defined(GLX_SGIX_video_source)
#if defined(_VL_H)
GLATTER_FBLOCK(return, GLX, , GLXVideoSourceSGIX, , glXCreateGLXVideoSourceSGIX, (display, screen, server, path, nodeClass, drainNode), (Display *display, int screen, VLServer server, VLPath path, int nodeClass, VLNode drainNode))
#define glXCreateGLXVideoSourceSGIX_defined
GLATTER_FBLOCK(, GLX, , void, , glXDestroyGLXVideoSourceSGIX, (dpy, glxvideosource), (Display *dpy, GLXVideoSourceSGIX glxvideosource))
#define glXDestroyGLXVideoSourceSGIX_defined
#endif // defined(_VL_H)
#endif // defined(GLX_SGIX_video_source)
#if defined(GLX_SGI_cushion)
GLATTER_FBLOCK(, GLX, , void, , glXCushionSGI, (dpy, window, cushion), (Display *dpy, Window window, float cushion))
#define glXCushionSGI_defined
#endif // defined(GLX_SGI_cushion)
#if defined(GLX_SGI_make_current_read)
GLATTER_FBLOCK(return, GLX, , GLXDrawable, , glXGetCurrentReadDrawableSGI, (), (void))
#define glXGetCurrentReadDrawableSGI_defined
GLATTER_FBLOCK(return, GLX, , Bool, , glXMakeCurrentReadSGI, (dpy, draw, read, ctx), (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx))
#define glXMakeCurrentReadSGI_defined
#endif // defined(GLX_SGI_make_current_read)
#if defined(GLX_SGI_swap_control)
GLATTER_FBLOCK(return, GLX, , int, , glXSwapIntervalSGI, (interval), (int interval))
#define glXSwapIntervalSGI_defined
#endif // defined(GLX_SGI_swap_control)
#if defined(GLX_SGI_video_sync)
GLATTER_FBLOCK(return, GLX, , int, , glXGetVideoSyncSGI, (count), (unsigned int *count))
#define glXGetVideoSyncSGI_defined
GLATTER_FBLOCK(return, GLX, , int, , glXWaitVideoSyncSGI, (divisor, remainder, count), (int divisor, int remainder, unsigned int *count))
#define glXWaitVideoSyncSGI_defined
#endif // defined(GLX_SGI_video_sync)
#if defined(GLX_SUN_get_transparent_index)
GLATTER_FBLOCK(return, GLX, , Status, , glXGetTransparentIndexSUN, (dpy, overlay, underlay, pTransparentIndex), (Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex))
#define glXGetTransparentIndexSUN_defined
#endif // defined(GLX_SUN_get_transparent_index)
#if defined(GLX_VERSION_1_3)
#ifndef glXChooseFBConfig_defined
GLATTER_FBLOCK(return, GLX, , GLXFBConfig *, , glXChooseFBConfig, (dpy, screen, attrib_list, nelements), (Display *dpy, int screen, const int *attrib_list, int *nelements))
#define glXChooseFBConfig_defined
#endif
#ifndef glXCreateNewContext_defined
GLATTER_FBLOCK(return, GLX, , GLXContext, , glXCreateNewContext, (dpy, config, render_type, share_list, direct), (Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct))
#define glXCreateNewContext_defined
#endif
#ifndef glXCreatePbuffer_defined
GLATTER_FBLOCK(return, GLX, , GLXPbuffer, , glXCreatePbuffer, (dpy, config, attrib_list), (Display *dpy, GLXFBConfig config, const int *attrib_list))
#define glXCreatePbuffer_defined
#endif
#ifndef glXCreatePixmap_defined
GLATTER_FBLOCK(return, GLX, , GLXPixmap, , glXCreatePixmap, (dpy, config, pixmap, attrib_list), (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list))
#define glXCreatePixmap_defined
#endif
#ifndef glXCreateWindow_defined
GLATTER_FBLOCK(return, GLX, , GLXWindow, , glXCreateWindow, (dpy, config, win, attrib_list), (Display *dpy, GLXFBConfig config, Window win, const int *attrib_list))
#define glXCreateWindow_defined
#endif
#ifndef glXDestroyPbuffer_defined
GLATTER_FBLOCK(, GLX, , void, , glXDestroyPbuffer, (dpy, pbuf), (Display *dpy, GLXPbuffer pbuf))
#define glXDestroyPbuffer_defined
#endif
#ifndef glXDestroyPixmap_defined
GLATTER_FBLOCK(, GLX, , void, , glXDestroyPixmap, (dpy, pixmap), (Display *dpy, GLXPixmap pixmap))
#define glXDestroyPixmap_defined
#endif
#ifndef glXDestroyWindow_defined
GLATTER_FBLOCK(, GLX, , void, , glXDestroyWindow, (dpy, win), (Display *dpy, GLXWindow win))
#define glXDestroyWindow_defined
#endif
#ifndef glXGetCurrentReadDrawable_defined
GLATTER_FBLOCK(return, GLX, , GLXDrawable, , glXGetCurrentReadDrawable, (), (void))
#define glXGetCurrentReadDrawable_defined
#endif
#ifndef glXGetFBConfigAttrib_defined
GLATTER_FBLOCK(return, GLX, , int, , glXGetFBConfigAttrib, (dpy, config, attribute, value), (Display *dpy, GLXFBConfig config, int attribute, int *value))
#define glXGetFBConfigAttrib_defined
#endif
#ifndef glXGetFBConfigs_defined
GLATTER_FBLOCK(return, GLX, , GLXFBConfig *, , glXGetFBConfigs, (dpy, screen, nelements), (Display *dpy, int screen, int *nelements))
#define glXGetFBConfigs_defined
#endif
#ifndef glXGetSelectedEvent_defined
GLATTER_FBLOCK(, GLX, , void, , glXGetSelectedEvent, (dpy, draw, event_mask), (Display *dpy, GLXDrawable draw, unsigned long *event_mask))
#define glXGetSelectedEvent_defined
#endif
#ifndef glXGetVisualFromFBConfig_defined
GLATTER_FBLOCK(return, GLX, , XVisualInfo *, , glXGetVisualFromFBConfig, (dpy, config), (Display *dpy, GLXFBConfig config))
#define glXGetVisualFromFBConfig_defined
#endif
#ifndef glXMakeContextCurrent_defined
GLATTER_FBLOCK(return, GLX, , Bool, , glXMakeContextCurrent, (dpy, draw, read, ctx), (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx))
#define glXMakeContextCurrent_defined
#endif
#ifndef glXQueryContext_defined
GLATTER_FBLOCK(return, GLX, , int, , glXQueryContext, (dpy, ctx, attribute, value), (Display *dpy, GLXContext ctx, int attribute, int *value))
#define glXQueryContext_defined
#endif
#ifndef glXQueryDrawable_defined
GLATTER_FBLOCK(, GLX, , void, , glXQueryDrawable, (dpy, draw, attribute, value), (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value))
#define glXQueryDrawable_defined
#endif
#ifndef glXSelectEvent_defined
GLATTER_FBLOCK(, GLX, , void, , glXSelectEvent, (dpy, draw, event_mask), (Display *dpy, GLXDrawable draw, unsigned long event_mask))
#define glXSelectEvent_defined
#endif
#endif // defined(GLX_VERSION_1_3)
#if defined(GLX_VERSION_1_4)
GLATTER_FBLOCK(return, GLX, , __GLXextFuncPtr, , glXGetProcAddress, (procName), (const GLubyte *procName))
#define glXGetProcAddress_defined
#endif // defined(__glx_glxext_h_)
#endif // defined(GLX_VERSION_1_4)
#endif // GLATTER_GLX

