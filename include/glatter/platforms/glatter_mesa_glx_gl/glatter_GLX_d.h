/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_GLX
#if defined(GLX_H)
#if defined(GLX_ARB_get_proc_address)
#ifndef glXGetProcAddressARB
#define glXGetProcAddressARB(*) glatter_glXGetProcAddressARB_debug((*), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT __GLXextFuncPtr glatter_glXGetProcAddressARB_debug(const GLubyte *, const char* file, int line);
#endif // defined(GLX_ARB_get_proc_address)
#if defined(GLX_ARB_render_texture)
#ifndef glXBindTexImageARB
#define glXBindTexImageARB(dpy, pbuffer, buffer) glatter_glXBindTexImageARB_debug((dpy), (pbuffer), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXBindTexImageARB_debug(Display *dpy, GLXPbuffer pbuffer, int buffer, const char* file, int line);
#ifndef glXDrawableAttribARB
#define glXDrawableAttribARB(dpy, draw, attribList) glatter_glXDrawableAttribARB_debug((dpy), (draw), (attribList), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXDrawableAttribARB_debug(Display *dpy, GLXDrawable draw, const int *attribList, const char* file, int line);
#ifndef glXReleaseTexImageARB
#define glXReleaseTexImageARB(dpy, pbuffer, buffer) glatter_glXReleaseTexImageARB_debug((dpy), (pbuffer), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXReleaseTexImageARB_debug(Display *dpy, GLXPbuffer pbuffer, int buffer, const char* file, int line);
#endif // defined(GLX_ARB_render_texture)
#if defined(GLX_MESA_swap_control)
#ifndef glXGetSwapIntervalMESA
#define glXGetSwapIntervalMESA() glatter_glXGetSwapIntervalMESA_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXGetSwapIntervalMESA_debug(const char* file, int line);
#ifndef glXSwapIntervalMESA
#define glXSwapIntervalMESA(interval) glatter_glXSwapIntervalMESA_debug((interval), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXSwapIntervalMESA_debug(unsigned int interval, const char* file, int line);
#endif // defined(GLX_MESA_swap_control)
#if defined(GLX_MESA_swap_frame_usage)
#ifndef glXBeginFrameTrackingMESA
#define glXBeginFrameTrackingMESA(dpy, drawable) glatter_glXBeginFrameTrackingMESA_debug((dpy), (drawable), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXBeginFrameTrackingMESA_debug(Display *dpy, GLXDrawable drawable, const char* file, int line);
#ifndef glXEndFrameTrackingMESA
#define glXEndFrameTrackingMESA(dpy, drawable) glatter_glXEndFrameTrackingMESA_debug((dpy), (drawable), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXEndFrameTrackingMESA_debug(Display *dpy, GLXDrawable drawable, const char* file, int line);
#ifndef glXGetFrameUsageMESA
#define glXGetFrameUsageMESA(dpy, drawable, usage) glatter_glXGetFrameUsageMESA_debug((dpy), (drawable), (usage), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXGetFrameUsageMESA_debug(Display *dpy, GLXDrawable drawable, float *usage, const char* file, int line);
#ifndef glXQueryFrameTrackingMESA
#define glXQueryFrameTrackingMESA(dpy, drawable, swapCount, missedFrames, lastMissedUsage) glatter_glXQueryFrameTrackingMESA_debug((dpy), (drawable), (swapCount), (missedFrames), (lastMissedUsage), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXQueryFrameTrackingMESA_debug(Display *dpy, GLXDrawable drawable, int64_t *swapCount, int64_t *missedFrames, float *lastMissedUsage, const char* file, int line);
#endif // defined(GLX_MESA_swap_frame_usage)
#if defined(GLX_NV_vertex_array_range)
#ifndef glXAllocateMemoryNV
#define glXAllocateMemoryNV(size, readfreq, writefreq, priority) glatter_glXAllocateMemoryNV_debug((size), (readfreq), (writefreq), (priority), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void * glatter_glXAllocateMemoryNV_debug(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority, const char* file, int line);
#ifndef glXFreeMemoryNV
#define glXFreeMemoryNV(pointer) glatter_glXFreeMemoryNV_debug((pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXFreeMemoryNV_debug(GLvoid *pointer, const char* file, int line);
#endif // defined(GLX_NV_vertex_array_range)
#ifndef glXChooseFBConfig
#define glXChooseFBConfig(dpy, screen, attribList, nitems) glatter_glXChooseFBConfig_debug((dpy), (screen), (attribList), (nitems), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXFBConfig * glatter_glXChooseFBConfig_debug(Display *dpy, int screen, const int *attribList, int *nitems, const char* file, int line);
#ifndef glXChooseVisual
#define glXChooseVisual(dpy, screen, attribList) glatter_glXChooseVisual_debug((dpy), (screen), (attribList), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT XVisualInfo* glatter_glXChooseVisual_debug(Display *dpy, int screen, int *attribList, const char* file, int line);
#ifndef glXCopyContext
#define glXCopyContext(dpy, src, dst, mask) glatter_glXCopyContext_debug((dpy), (src), (dst), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXCopyContext_debug(Display *dpy, GLXContext src, GLXContext dst, unsigned long mask, const char* file, int line);
#ifndef glXCreateContext
#define glXCreateContext(dpy, vis, shareList, direct) glatter_glXCreateContext_debug((dpy), (vis), (shareList), (direct), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXContext glatter_glXCreateContext_debug(Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct, const char* file, int line);
#ifndef glXCreateGLXPixmap
#define glXCreateGLXPixmap(dpy, visual, pixmap) glatter_glXCreateGLXPixmap_debug((dpy), (visual), (pixmap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXPixmap glatter_glXCreateGLXPixmap_debug(Display *dpy, XVisualInfo *visual, Pixmap pixmap, const char* file, int line);
#ifndef glXCreateNewContext
#define glXCreateNewContext(dpy, config, renderType, shareList, direct) glatter_glXCreateNewContext_debug((dpy), (config), (renderType), (shareList), (direct), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXContext glatter_glXCreateNewContext_debug(Display *dpy, GLXFBConfig config, int renderType, GLXContext shareList, Bool direct, const char* file, int line);
#ifndef glXCreatePbuffer
#define glXCreatePbuffer(dpy, config, attribList) glatter_glXCreatePbuffer_debug((dpy), (config), (attribList), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXPbuffer glatter_glXCreatePbuffer_debug(Display *dpy, GLXFBConfig config, const int *attribList, const char* file, int line);
#ifndef glXCreatePixmap
#define glXCreatePixmap(dpy, config, pixmap, attribList) glatter_glXCreatePixmap_debug((dpy), (config), (pixmap), (attribList), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXPixmap glatter_glXCreatePixmap_debug(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attribList, const char* file, int line);
#ifndef glXCreateWindow
#define glXCreateWindow(dpy, config, win, attribList) glatter_glXCreateWindow_debug((dpy), (config), (win), (attribList), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXWindow glatter_glXCreateWindow_debug(Display *dpy, GLXFBConfig config, Window win, const int *attribList, const char* file, int line);
#ifndef glXDestroyContext
#define glXDestroyContext(dpy, ctx) glatter_glXDestroyContext_debug((dpy), (ctx), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXDestroyContext_debug(Display *dpy, GLXContext ctx, const char* file, int line);
#ifndef glXDestroyGLXPixmap
#define glXDestroyGLXPixmap(dpy, pixmap) glatter_glXDestroyGLXPixmap_debug((dpy), (pixmap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXDestroyGLXPixmap_debug(Display *dpy, GLXPixmap pixmap, const char* file, int line);
#ifndef glXDestroyPbuffer
#define glXDestroyPbuffer(dpy, pbuf) glatter_glXDestroyPbuffer_debug((dpy), (pbuf), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXDestroyPbuffer_debug(Display *dpy, GLXPbuffer pbuf, const char* file, int line);
#ifndef glXDestroyPixmap
#define glXDestroyPixmap(dpy, pixmap) glatter_glXDestroyPixmap_debug((dpy), (pixmap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXDestroyPixmap_debug(Display *dpy, GLXPixmap pixmap, const char* file, int line);
#ifndef glXDestroyWindow
#define glXDestroyWindow(dpy, window) glatter_glXDestroyWindow_debug((dpy), (window), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXDestroyWindow_debug(Display *dpy, GLXWindow window, const char* file, int line);
#ifndef glXGetClientString
#define glXGetClientString(dpy, name) glatter_glXGetClientString_debug((dpy), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const char * glatter_glXGetClientString_debug(Display *dpy, int name, const char* file, int line);
#ifndef glXGetConfig
#define glXGetConfig(dpy, visual, attrib, value) glatter_glXGetConfig_debug((dpy), (visual), (attrib), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXGetConfig_debug(Display *dpy, XVisualInfo *visual, int attrib, int *value, const char* file, int line);
#ifndef glXGetCurrentContext
#define glXGetCurrentContext() glatter_glXGetCurrentContext_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXContext glatter_glXGetCurrentContext_debug(const char* file, int line);
#ifndef glXGetCurrentDisplay
#define glXGetCurrentDisplay() glatter_glXGetCurrentDisplay_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Display * glatter_glXGetCurrentDisplay_debug(const char* file, int line);
#ifndef glXGetCurrentDrawable
#define glXGetCurrentDrawable() glatter_glXGetCurrentDrawable_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXDrawable glatter_glXGetCurrentDrawable_debug(const char* file, int line);
#ifndef glXGetCurrentReadDrawable
#define glXGetCurrentReadDrawable() glatter_glXGetCurrentReadDrawable_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXDrawable glatter_glXGetCurrentReadDrawable_debug(const char* file, int line);
#ifndef glXGetFBConfigAttrib
#define glXGetFBConfigAttrib(dpy, config, attribute, value) glatter_glXGetFBConfigAttrib_debug((dpy), (config), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXGetFBConfigAttrib_debug(Display *dpy, GLXFBConfig config, int attribute, int *value, const char* file, int line);
#ifndef glXGetFBConfigs
#define glXGetFBConfigs(dpy, screen, nelements) glatter_glXGetFBConfigs_debug((dpy), (screen), (nelements), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXFBConfig * glatter_glXGetFBConfigs_debug(Display *dpy, int screen, int *nelements, const char* file, int line);
#ifndef glXGetSelectedEvent
#define glXGetSelectedEvent(dpy, drawable, mask) glatter_glXGetSelectedEvent_debug((dpy), (drawable), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXGetSelectedEvent_debug(Display *dpy, GLXDrawable drawable, unsigned long *mask, const char* file, int line);
#ifndef glXGetVisualFromFBConfig
#define glXGetVisualFromFBConfig(dpy, config) glatter_glXGetVisualFromFBConfig_debug((dpy), (config), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT XVisualInfo * glatter_glXGetVisualFromFBConfig_debug(Display *dpy, GLXFBConfig config, const char* file, int line);
#ifndef glXIsDirect
#define glXIsDirect(dpy, ctx) glatter_glXIsDirect_debug((dpy), (ctx), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXIsDirect_debug(Display *dpy, GLXContext ctx, const char* file, int line);
#ifndef glXMakeContextCurrent
#define glXMakeContextCurrent(dpy, draw, read, ctx) glatter_glXMakeContextCurrent_debug((dpy), (draw), (read), (ctx), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXMakeContextCurrent_debug(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx, const char* file, int line);
#ifndef glXMakeCurrent
#define glXMakeCurrent(dpy, drawable, ctx) glatter_glXMakeCurrent_debug((dpy), (drawable), (ctx), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXMakeCurrent_debug(Display *dpy, GLXDrawable drawable, GLXContext ctx, const char* file, int line);
#ifndef glXQueryContext
#define glXQueryContext(dpy, ctx, attribute, value) glatter_glXQueryContext_debug((dpy), (ctx), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXQueryContext_debug(Display *dpy, GLXContext ctx, int attribute, int *value, const char* file, int line);
#ifndef glXQueryDrawable
#define glXQueryDrawable(dpy, draw, attribute, value) glatter_glXQueryDrawable_debug((dpy), (draw), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXQueryDrawable_debug(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value, const char* file, int line);
#ifndef glXQueryExtension
#define glXQueryExtension(dpy, errorb, event) glatter_glXQueryExtension_debug((dpy), (errorb), (event), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXQueryExtension_debug(Display *dpy, int *errorb, int *event, const char* file, int line);
#ifndef glXQueryExtensionsString
#define glXQueryExtensionsString(dpy, screen) glatter_glXQueryExtensionsString_debug((dpy), (screen), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const char * glatter_glXQueryExtensionsString_debug(Display *dpy, int screen, const char* file, int line);
#ifndef glXQueryServerString
#define glXQueryServerString(dpy, screen, name) glatter_glXQueryServerString_debug((dpy), (screen), (name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const char * glatter_glXQueryServerString_debug(Display *dpy, int screen, int name, const char* file, int line);
#ifndef glXQueryVersion
#define glXQueryVersion(dpy, maj, min) glatter_glXQueryVersion_debug((dpy), (maj), (min), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXQueryVersion_debug(Display *dpy, int *maj, int *min, const char* file, int line);
#ifndef glXSelectEvent
#define glXSelectEvent(dpy, drawable, mask) glatter_glXSelectEvent_debug((dpy), (drawable), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXSelectEvent_debug(Display *dpy, GLXDrawable drawable, unsigned long mask, const char* file, int line);
#ifndef glXSwapBuffers
#define glXSwapBuffers(dpy, drawable) glatter_glXSwapBuffers_debug((dpy), (drawable), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXSwapBuffers_debug(Display *dpy, GLXDrawable drawable, const char* file, int line);
#ifndef glXUseXFont
#define glXUseXFont(font, first, count, list) glatter_glXUseXFont_debug((font), (first), (count), (list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXUseXFont_debug(Font font, int first, int count, int list, const char* file, int line);
#ifndef glXWaitGL
#define glXWaitGL() glatter_glXWaitGL_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXWaitGL_debug(const char* file, int line);
#ifndef glXWaitX
#define glXWaitX() glatter_glXWaitX_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXWaitX_debug(const char* file, int line);
#endif // defined(GLX_H)
#if defined(__glx_glxext_h_)
#if defined(GLX_AMD_gpu_association)
#ifndef glXBlitContextFramebufferAMD
#define glXBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glXBlitContextFramebufferAMD_debug((dstCtx), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXBlitContextFramebufferAMD_debug(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#ifndef glXCreateAssociatedContextAMD
#define glXCreateAssociatedContextAMD(id, share_list) glatter_glXCreateAssociatedContextAMD_debug((id), (share_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXContext glatter_glXCreateAssociatedContextAMD_debug(unsigned int id, GLXContext share_list, const char* file, int line);
#ifndef glXCreateAssociatedContextAttribsAMD
#define glXCreateAssociatedContextAttribsAMD(id, share_context, attribList) glatter_glXCreateAssociatedContextAttribsAMD_debug((id), (share_context), (attribList), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXContext glatter_glXCreateAssociatedContextAttribsAMD_debug(unsigned int id, GLXContext share_context, const int *attribList, const char* file, int line);
#ifndef glXDeleteAssociatedContextAMD
#define glXDeleteAssociatedContextAMD(ctx) glatter_glXDeleteAssociatedContextAMD_debug((ctx), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXDeleteAssociatedContextAMD_debug(GLXContext ctx, const char* file, int line);
#ifndef glXGetContextGPUIDAMD
#define glXGetContextGPUIDAMD(ctx) glatter_glXGetContextGPUIDAMD_debug((ctx), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT unsigned int glatter_glXGetContextGPUIDAMD_debug(GLXContext ctx, const char* file, int line);
#ifndef glXGetCurrentAssociatedContextAMD
#define glXGetCurrentAssociatedContextAMD() glatter_glXGetCurrentAssociatedContextAMD_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXContext glatter_glXGetCurrentAssociatedContextAMD_debug(const char* file, int line);
#ifndef glXGetGPUIDsAMD
#define glXGetGPUIDsAMD(maxCount, ids) glatter_glXGetGPUIDsAMD_debug((maxCount), (ids), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT unsigned int glatter_glXGetGPUIDsAMD_debug(unsigned int maxCount, unsigned int *ids, const char* file, int line);
#ifndef glXGetGPUInfoAMD
#define glXGetGPUInfoAMD(id, property, dataType, size, data) glatter_glXGetGPUInfoAMD_debug((id), (property), (dataType), (size), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXGetGPUInfoAMD_debug(unsigned int id, int property, GLenum dataType, unsigned int size, void *data, const char* file, int line);
#ifndef glXMakeAssociatedContextCurrentAMD
#define glXMakeAssociatedContextCurrentAMD(ctx) glatter_glXMakeAssociatedContextCurrentAMD_debug((ctx), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXMakeAssociatedContextCurrentAMD_debug(GLXContext ctx, const char* file, int line);
#endif // defined(GLX_AMD_gpu_association)
#if defined(GLX_ARB_create_context)
#ifndef glXCreateContextAttribsARB
#define glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list) glatter_glXCreateContextAttribsARB_debug((dpy), (config), (share_context), (direct), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXContext glatter_glXCreateContextAttribsARB_debug(Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list, const char* file, int line);
#endif // defined(GLX_ARB_create_context)
#if defined(GLX_ARB_get_proc_address)
#ifndef glXGetProcAddressARB
#define glXGetProcAddressARB(procName) glatter_glXGetProcAddressARB_debug((procName), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT __GLXextFuncPtr glatter_glXGetProcAddressARB_debug(const GLubyte *procName, const char* file, int line);
#endif // defined(GLX_ARB_get_proc_address)
#if defined(GLX_EXT_import_context)
#ifndef glXFreeContextEXT
#define glXFreeContextEXT(dpy, context) glatter_glXFreeContextEXT_debug((dpy), (context), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXFreeContextEXT_debug(Display *dpy, GLXContext context, const char* file, int line);
#ifndef glXGetContextIDEXT
#define glXGetContextIDEXT(context) glatter_glXGetContextIDEXT_debug((context), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXContextID glatter_glXGetContextIDEXT_debug(const GLXContext context, const char* file, int line);
#ifndef glXGetCurrentDisplayEXT
#define glXGetCurrentDisplayEXT() glatter_glXGetCurrentDisplayEXT_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Display * glatter_glXGetCurrentDisplayEXT_debug(const char* file, int line);
#ifndef glXImportContextEXT
#define glXImportContextEXT(dpy, contextID) glatter_glXImportContextEXT_debug((dpy), (contextID), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXContext glatter_glXImportContextEXT_debug(Display *dpy, GLXContextID contextID, const char* file, int line);
#ifndef glXQueryContextInfoEXT
#define glXQueryContextInfoEXT(dpy, context, attribute, value) glatter_glXQueryContextInfoEXT_debug((dpy), (context), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXQueryContextInfoEXT_debug(Display *dpy, GLXContext context, int attribute, int *value, const char* file, int line);
#endif // defined(GLX_EXT_import_context)
#if defined(GLX_EXT_swap_control)
#ifndef glXSwapIntervalEXT
#define glXSwapIntervalEXT(dpy, drawable, interval) glatter_glXSwapIntervalEXT_debug((dpy), (drawable), (interval), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXSwapIntervalEXT_debug(Display *dpy, GLXDrawable drawable, int interval, const char* file, int line);
#endif // defined(GLX_EXT_swap_control)
#if defined(GLX_EXT_texture_from_pixmap)
#ifndef glXBindTexImageEXT
#define glXBindTexImageEXT(dpy, drawable, buffer, attrib_list) glatter_glXBindTexImageEXT_debug((dpy), (drawable), (buffer), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXBindTexImageEXT_debug(Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list, const char* file, int line);
#ifndef glXReleaseTexImageEXT
#define glXReleaseTexImageEXT(dpy, drawable, buffer) glatter_glXReleaseTexImageEXT_debug((dpy), (drawable), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXReleaseTexImageEXT_debug(Display *dpy, GLXDrawable drawable, int buffer, const char* file, int line);
#endif // defined(GLX_EXT_texture_from_pixmap)
#if defined(GLX_MESA_agp_offset)
#ifndef glXGetAGPOffsetMESA
#define glXGetAGPOffsetMESA(pointer) glatter_glXGetAGPOffsetMESA_debug((pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT unsigned int glatter_glXGetAGPOffsetMESA_debug(const void *pointer, const char* file, int line);
#endif // defined(GLX_MESA_agp_offset)
#if defined(GLX_MESA_copy_sub_buffer)
#ifndef glXCopySubBufferMESA
#define glXCopySubBufferMESA(dpy, drawable, x, y, width, height) glatter_glXCopySubBufferMESA_debug((dpy), (drawable), (x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXCopySubBufferMESA_debug(Display *dpy, GLXDrawable drawable, int x, int y, int width, int height, const char* file, int line);
#endif // defined(GLX_MESA_copy_sub_buffer)
#if defined(GLX_MESA_pixmap_colormap)
#ifndef glXCreateGLXPixmapMESA
#define glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap) glatter_glXCreateGLXPixmapMESA_debug((dpy), (visual), (pixmap), (cmap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXPixmap glatter_glXCreateGLXPixmapMESA_debug(Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap, const char* file, int line);
#endif // defined(GLX_MESA_pixmap_colormap)
#if defined(GLX_MESA_query_renderer)
#ifndef glXQueryCurrentRendererIntegerMESA
#define glXQueryCurrentRendererIntegerMESA(attribute, value) glatter_glXQueryCurrentRendererIntegerMESA_debug((attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXQueryCurrentRendererIntegerMESA_debug(int attribute, unsigned int *value, const char* file, int line);
#ifndef glXQueryCurrentRendererStringMESA
#define glXQueryCurrentRendererStringMESA(attribute) glatter_glXQueryCurrentRendererStringMESA_debug((attribute), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const char * glatter_glXQueryCurrentRendererStringMESA_debug(int attribute, const char* file, int line);
#ifndef glXQueryRendererIntegerMESA
#define glXQueryRendererIntegerMESA(dpy, screen, renderer, attribute, value) glatter_glXQueryRendererIntegerMESA_debug((dpy), (screen), (renderer), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXQueryRendererIntegerMESA_debug(Display *dpy, int screen, int renderer, int attribute, unsigned int *value, const char* file, int line);
#ifndef glXQueryRendererStringMESA
#define glXQueryRendererStringMESA(dpy, screen, renderer, attribute) glatter_glXQueryRendererStringMESA_debug((dpy), (screen), (renderer), (attribute), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const char * glatter_glXQueryRendererStringMESA_debug(Display *dpy, int screen, int renderer, int attribute, const char* file, int line);
#endif // defined(GLX_MESA_query_renderer)
#if defined(GLX_MESA_release_buffers)
#ifndef glXReleaseBuffersMESA
#define glXReleaseBuffersMESA(dpy, drawable) glatter_glXReleaseBuffersMESA_debug((dpy), (drawable), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXReleaseBuffersMESA_debug(Display *dpy, GLXDrawable drawable, const char* file, int line);
#endif // defined(GLX_MESA_release_buffers)
#if defined(GLX_MESA_set_3dfx_mode)
#ifndef glXSet3DfxModeMESA
#define glXSet3DfxModeMESA(mode) glatter_glXSet3DfxModeMESA_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glXSet3DfxModeMESA_debug(GLint mode, const char* file, int line);
#endif // defined(GLX_MESA_set_3dfx_mode)
#if defined(GLX_MESA_swap_control)
#ifndef glXGetSwapIntervalMESA
#define glXGetSwapIntervalMESA() glatter_glXGetSwapIntervalMESA_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXGetSwapIntervalMESA_debug(const char* file, int line);
#ifndef glXSwapIntervalMESA
#define glXSwapIntervalMESA(interval) glatter_glXSwapIntervalMESA_debug((interval), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXSwapIntervalMESA_debug(unsigned int interval, const char* file, int line);
#endif // defined(GLX_MESA_swap_control)
#if defined(GLX_NV_copy_buffer)
#ifndef glXCopyBufferSubDataNV
#define glXCopyBufferSubDataNV(dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size) glatter_glXCopyBufferSubDataNV_debug((dpy), (readCtx), (writeCtx), (readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXCopyBufferSubDataNV_debug(Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#ifndef glXNamedCopyBufferSubDataNV
#define glXNamedCopyBufferSubDataNV(dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glXNamedCopyBufferSubDataNV_debug((dpy), (readCtx), (writeCtx), (readBuffer), (writeBuffer), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXNamedCopyBufferSubDataNV_debug(Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#endif // defined(GLX_NV_copy_buffer)
#if defined(GLX_NV_copy_image)
#ifndef glXCopyImageSubDataNV
#define glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_glXCopyImageSubDataNV_debug((dpy), (srcCtx), (srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstCtx), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXCopyImageSubDataNV_debug(Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(GLX_NV_copy_image)
#if defined(GLX_NV_delay_before_swap)
#ifndef glXDelayBeforeSwapNV
#define glXDelayBeforeSwapNV(dpy, drawable, seconds) glatter_glXDelayBeforeSwapNV_debug((dpy), (drawable), (seconds), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXDelayBeforeSwapNV_debug(Display *dpy, GLXDrawable drawable, GLfloat seconds, const char* file, int line);
#endif // defined(GLX_NV_delay_before_swap)
#if defined(GLX_NV_present_video)
#ifndef glXBindVideoDeviceNV
#define glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list) glatter_glXBindVideoDeviceNV_debug((dpy), (video_slot), (video_device), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXBindVideoDeviceNV_debug(Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list, const char* file, int line);
#ifndef glXEnumerateVideoDevicesNV
#define glXEnumerateVideoDevicesNV(dpy, screen, nelements) glatter_glXEnumerateVideoDevicesNV_debug((dpy), (screen), (nelements), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT unsigned int * glatter_glXEnumerateVideoDevicesNV_debug(Display *dpy, int screen, int *nelements, const char* file, int line);
#endif // defined(GLX_NV_present_video)
#if defined(GLX_NV_swap_group)
#ifndef glXBindSwapBarrierNV
#define glXBindSwapBarrierNV(dpy, group, barrier) glatter_glXBindSwapBarrierNV_debug((dpy), (group), (barrier), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXBindSwapBarrierNV_debug(Display *dpy, GLuint group, GLuint barrier, const char* file, int line);
#ifndef glXJoinSwapGroupNV
#define glXJoinSwapGroupNV(dpy, drawable, group) glatter_glXJoinSwapGroupNV_debug((dpy), (drawable), (group), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXJoinSwapGroupNV_debug(Display *dpy, GLXDrawable drawable, GLuint group, const char* file, int line);
#ifndef glXQueryFrameCountNV
#define glXQueryFrameCountNV(dpy, screen, count) glatter_glXQueryFrameCountNV_debug((dpy), (screen), (count), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXQueryFrameCountNV_debug(Display *dpy, int screen, GLuint *count, const char* file, int line);
#ifndef glXQueryMaxSwapGroupsNV
#define glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers) glatter_glXQueryMaxSwapGroupsNV_debug((dpy), (screen), (maxGroups), (maxBarriers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXQueryMaxSwapGroupsNV_debug(Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers, const char* file, int line);
#ifndef glXQuerySwapGroupNV
#define glXQuerySwapGroupNV(dpy, drawable, group, barrier) glatter_glXQuerySwapGroupNV_debug((dpy), (drawable), (group), (barrier), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXQuerySwapGroupNV_debug(Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier, const char* file, int line);
#ifndef glXResetFrameCountNV
#define glXResetFrameCountNV(dpy, screen) glatter_glXResetFrameCountNV_debug((dpy), (screen), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXResetFrameCountNV_debug(Display *dpy, int screen, const char* file, int line);
#endif // defined(GLX_NV_swap_group)
#if defined(GLX_NV_video_capture)
#ifndef glXBindVideoCaptureDeviceNV
#define glXBindVideoCaptureDeviceNV(dpy, video_capture_slot, device) glatter_glXBindVideoCaptureDeviceNV_debug((dpy), (video_capture_slot), (device), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXBindVideoCaptureDeviceNV_debug(Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device, const char* file, int line);
#ifndef glXEnumerateVideoCaptureDevicesNV
#define glXEnumerateVideoCaptureDevicesNV(dpy, screen, nelements) glatter_glXEnumerateVideoCaptureDevicesNV_debug((dpy), (screen), (nelements), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXVideoCaptureDeviceNV * glatter_glXEnumerateVideoCaptureDevicesNV_debug(Display *dpy, int screen, int *nelements, const char* file, int line);
#ifndef glXLockVideoCaptureDeviceNV
#define glXLockVideoCaptureDeviceNV(dpy, device) glatter_glXLockVideoCaptureDeviceNV_debug((dpy), (device), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXLockVideoCaptureDeviceNV_debug(Display *dpy, GLXVideoCaptureDeviceNV device, const char* file, int line);
#ifndef glXQueryVideoCaptureDeviceNV
#define glXQueryVideoCaptureDeviceNV(dpy, device, attribute, value) glatter_glXQueryVideoCaptureDeviceNV_debug((dpy), (device), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXQueryVideoCaptureDeviceNV_debug(Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value, const char* file, int line);
#ifndef glXReleaseVideoCaptureDeviceNV
#define glXReleaseVideoCaptureDeviceNV(dpy, device) glatter_glXReleaseVideoCaptureDeviceNV_debug((dpy), (device), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXReleaseVideoCaptureDeviceNV_debug(Display *dpy, GLXVideoCaptureDeviceNV device, const char* file, int line);
#endif // defined(GLX_NV_video_capture)
#if defined(GLX_NV_video_out)
#ifndef glXBindVideoImageNV
#define glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer) glatter_glXBindVideoImageNV_debug((dpy), (VideoDevice), (pbuf), (iVideoBuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXBindVideoImageNV_debug(Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer, const char* file, int line);
#ifndef glXGetVideoDeviceNV
#define glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice) glatter_glXGetVideoDeviceNV_debug((dpy), (screen), (numVideoDevices), (pVideoDevice), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXGetVideoDeviceNV_debug(Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice, const char* file, int line);
#ifndef glXGetVideoInfoNV
#define glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) glatter_glXGetVideoInfoNV_debug((dpy), (screen), (VideoDevice), (pulCounterOutputPbuffer), (pulCounterOutputVideo), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXGetVideoInfoNV_debug(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo, const char* file, int line);
#ifndef glXReleaseVideoDeviceNV
#define glXReleaseVideoDeviceNV(dpy, screen, VideoDevice) glatter_glXReleaseVideoDeviceNV_debug((dpy), (screen), (VideoDevice), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXReleaseVideoDeviceNV_debug(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, const char* file, int line);
#ifndef glXReleaseVideoImageNV
#define glXReleaseVideoImageNV(dpy, pbuf) glatter_glXReleaseVideoImageNV_debug((dpy), (pbuf), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXReleaseVideoImageNV_debug(Display *dpy, GLXPbuffer pbuf, const char* file, int line);
#ifndef glXSendPbufferToVideoNV
#define glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock) glatter_glXSendPbufferToVideoNV_debug((dpy), (pbuf), (iBufferType), (pulCounterPbuffer), (bBlock), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXSendPbufferToVideoNV_debug(Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock, const char* file, int line);
#endif // defined(GLX_NV_video_out)
#if defined(GLX_OML_sync_control)
#ifndef glXGetMscRateOML
#define glXGetMscRateOML(dpy, drawable, numerator, denominator) glatter_glXGetMscRateOML_debug((dpy), (drawable), (numerator), (denominator), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXGetMscRateOML_debug(Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator, const char* file, int line);
#ifndef glXGetSyncValuesOML
#define glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc) glatter_glXGetSyncValuesOML_debug((dpy), (drawable), (ust), (msc), (sbc), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXGetSyncValuesOML_debug(Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc, const char* file, int line);
#ifndef glXSwapBuffersMscOML
#define glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder) glatter_glXSwapBuffersMscOML_debug((dpy), (drawable), (target_msc), (divisor), (remainder), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int64_t glatter_glXSwapBuffersMscOML_debug(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, const char* file, int line);
#ifndef glXWaitForMscOML
#define glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc) glatter_glXWaitForMscOML_debug((dpy), (drawable), (target_msc), (divisor), (remainder), (ust), (msc), (sbc), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXWaitForMscOML_debug(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc, const char* file, int line);
#ifndef glXWaitForSbcOML
#define glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc) glatter_glXWaitForSbcOML_debug((dpy), (drawable), (target_sbc), (ust), (msc), (sbc), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXWaitForSbcOML_debug(Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc, const char* file, int line);
#endif // defined(GLX_OML_sync_control)
#if defined(GLX_SGIX_dmbuffer)
#if defined(_DM_BUFFER_H_)
#ifndef glXAssociateDMPbufferSGIX
#define glXAssociateDMPbufferSGIX(dpy, pbuffer, params, dmbuffer) glatter_glXAssociateDMPbufferSGIX_debug((dpy), (pbuffer), (params), (dmbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXAssociateDMPbufferSGIX_debug(Display *dpy, GLXPbufferSGIX pbuffer, DMparams *params, DMbuffer dmbuffer, const char* file, int line);
#endif // defined(_DM_BUFFER_H_)
#endif // defined(GLX_SGIX_dmbuffer)
#if defined(GLX_SGIX_fbconfig)
#ifndef glXChooseFBConfigSGIX
#define glXChooseFBConfigSGIX(dpy, screen, attrib_list, nelements) glatter_glXChooseFBConfigSGIX_debug((dpy), (screen), (attrib_list), (nelements), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXFBConfigSGIX * glatter_glXChooseFBConfigSGIX_debug(Display *dpy, int screen, int *attrib_list, int *nelements, const char* file, int line);
#ifndef glXCreateContextWithConfigSGIX
#define glXCreateContextWithConfigSGIX(dpy, config, render_type, share_list, direct) glatter_glXCreateContextWithConfigSGIX_debug((dpy), (config), (render_type), (share_list), (direct), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXContext glatter_glXCreateContextWithConfigSGIX_debug(Display *dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct, const char* file, int line);
#ifndef glXCreateGLXPixmapWithConfigSGIX
#define glXCreateGLXPixmapWithConfigSGIX(dpy, config, pixmap) glatter_glXCreateGLXPixmapWithConfigSGIX_debug((dpy), (config), (pixmap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXPixmap glatter_glXCreateGLXPixmapWithConfigSGIX_debug(Display *dpy, GLXFBConfigSGIX config, Pixmap pixmap, const char* file, int line);
#ifndef glXGetFBConfigAttribSGIX
#define glXGetFBConfigAttribSGIX(dpy, config, attribute, value) glatter_glXGetFBConfigAttribSGIX_debug((dpy), (config), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXGetFBConfigAttribSGIX_debug(Display *dpy, GLXFBConfigSGIX config, int attribute, int *value, const char* file, int line);
#ifndef glXGetFBConfigFromVisualSGIX
#define glXGetFBConfigFromVisualSGIX(dpy, vis) glatter_glXGetFBConfigFromVisualSGIX_debug((dpy), (vis), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXFBConfigSGIX glatter_glXGetFBConfigFromVisualSGIX_debug(Display *dpy, XVisualInfo *vis, const char* file, int line);
#ifndef glXGetVisualFromFBConfigSGIX
#define glXGetVisualFromFBConfigSGIX(dpy, config) glatter_glXGetVisualFromFBConfigSGIX_debug((dpy), (config), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT XVisualInfo * glatter_glXGetVisualFromFBConfigSGIX_debug(Display *dpy, GLXFBConfigSGIX config, const char* file, int line);
#endif // defined(GLX_SGIX_fbconfig)
#if defined(GLX_SGIX_hyperpipe)
#ifndef glXBindHyperpipeSGIX
#define glXBindHyperpipeSGIX(dpy, hpId) glatter_glXBindHyperpipeSGIX_debug((dpy), (hpId), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXBindHyperpipeSGIX_debug(Display *dpy, int hpId, const char* file, int line);
#ifndef glXDestroyHyperpipeConfigSGIX
#define glXDestroyHyperpipeConfigSGIX(dpy, hpId) glatter_glXDestroyHyperpipeConfigSGIX_debug((dpy), (hpId), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXDestroyHyperpipeConfigSGIX_debug(Display *dpy, int hpId, const char* file, int line);
#ifndef glXHyperpipeAttribSGIX
#define glXHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, attribList) glatter_glXHyperpipeAttribSGIX_debug((dpy), (timeSlice), (attrib), (size), (attribList), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXHyperpipeAttribSGIX_debug(Display *dpy, int timeSlice, int attrib, int size, void *attribList, const char* file, int line);
#ifndef glXHyperpipeConfigSGIX
#define glXHyperpipeConfigSGIX(dpy, networkId, npipes, cfg, hpId) glatter_glXHyperpipeConfigSGIX_debug((dpy), (networkId), (npipes), (cfg), (hpId), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXHyperpipeConfigSGIX_debug(Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId, const char* file, int line);
#ifndef glXQueryHyperpipeAttribSGIX
#define glXQueryHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, returnAttribList) glatter_glXQueryHyperpipeAttribSGIX_debug((dpy), (timeSlice), (attrib), (size), (returnAttribList), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXQueryHyperpipeAttribSGIX_debug(Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList, const char* file, int line);
#ifndef glXQueryHyperpipeBestAttribSGIX
#define glXQueryHyperpipeBestAttribSGIX(dpy, timeSlice, attrib, size, attribList, returnAttribList) glatter_glXQueryHyperpipeBestAttribSGIX_debug((dpy), (timeSlice), (attrib), (size), (attribList), (returnAttribList), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXQueryHyperpipeBestAttribSGIX_debug(Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList, const char* file, int line);
#ifndef glXQueryHyperpipeConfigSGIX
#define glXQueryHyperpipeConfigSGIX(dpy, hpId, npipes) glatter_glXQueryHyperpipeConfigSGIX_debug((dpy), (hpId), (npipes), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXHyperpipeConfigSGIX * glatter_glXQueryHyperpipeConfigSGIX_debug(Display *dpy, int hpId, int *npipes, const char* file, int line);
#ifndef glXQueryHyperpipeNetworkSGIX
#define glXQueryHyperpipeNetworkSGIX(dpy, npipes) glatter_glXQueryHyperpipeNetworkSGIX_debug((dpy), (npipes), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXHyperpipeNetworkSGIX * glatter_glXQueryHyperpipeNetworkSGIX_debug(Display *dpy, int *npipes, const char* file, int line);
#endif // defined(GLX_SGIX_hyperpipe)
#if defined(GLX_SGIX_pbuffer)
#ifndef glXCreateGLXPbufferSGIX
#define glXCreateGLXPbufferSGIX(dpy, config, width, height, attrib_list) glatter_glXCreateGLXPbufferSGIX_debug((dpy), (config), (width), (height), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXPbufferSGIX glatter_glXCreateGLXPbufferSGIX_debug(Display *dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int *attrib_list, const char* file, int line);
#ifndef glXDestroyGLXPbufferSGIX
#define glXDestroyGLXPbufferSGIX(dpy, pbuf) glatter_glXDestroyGLXPbufferSGIX_debug((dpy), (pbuf), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXDestroyGLXPbufferSGIX_debug(Display *dpy, GLXPbufferSGIX pbuf, const char* file, int line);
#ifndef glXGetSelectedEventSGIX
#define glXGetSelectedEventSGIX(dpy, drawable, mask) glatter_glXGetSelectedEventSGIX_debug((dpy), (drawable), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXGetSelectedEventSGIX_debug(Display *dpy, GLXDrawable drawable, unsigned long *mask, const char* file, int line);
#ifndef glXQueryGLXPbufferSGIX
#define glXQueryGLXPbufferSGIX(dpy, pbuf, attribute, value) glatter_glXQueryGLXPbufferSGIX_debug((dpy), (pbuf), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXQueryGLXPbufferSGIX_debug(Display *dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int *value, const char* file, int line);
#ifndef glXSelectEventSGIX
#define glXSelectEventSGIX(dpy, drawable, mask) glatter_glXSelectEventSGIX_debug((dpy), (drawable), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXSelectEventSGIX_debug(Display *dpy, GLXDrawable drawable, unsigned long mask, const char* file, int line);
#endif // defined(GLX_SGIX_pbuffer)
#if defined(GLX_SGIX_swap_barrier)
#ifndef glXBindSwapBarrierSGIX
#define glXBindSwapBarrierSGIX(dpy, drawable, barrier) glatter_glXBindSwapBarrierSGIX_debug((dpy), (drawable), (barrier), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXBindSwapBarrierSGIX_debug(Display *dpy, GLXDrawable drawable, int barrier, const char* file, int line);
#ifndef glXQueryMaxSwapBarriersSGIX
#define glXQueryMaxSwapBarriersSGIX(dpy, screen, max) glatter_glXQueryMaxSwapBarriersSGIX_debug((dpy), (screen), (max), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXQueryMaxSwapBarriersSGIX_debug(Display *dpy, int screen, int *max, const char* file, int line);
#endif // defined(GLX_SGIX_swap_barrier)
#if defined(GLX_SGIX_swap_group)
#ifndef glXJoinSwapGroupSGIX
#define glXJoinSwapGroupSGIX(dpy, drawable, member) glatter_glXJoinSwapGroupSGIX_debug((dpy), (drawable), (member), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXJoinSwapGroupSGIX_debug(Display *dpy, GLXDrawable drawable, GLXDrawable member, const char* file, int line);
#endif // defined(GLX_SGIX_swap_group)
#if defined(GLX_SGIX_video_resize)
#ifndef glXBindChannelToWindowSGIX
#define glXBindChannelToWindowSGIX(display, screen, channel, window) glatter_glXBindChannelToWindowSGIX_debug((display), (screen), (channel), (window), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXBindChannelToWindowSGIX_debug(Display *display, int screen, int channel, Window window, const char* file, int line);
#ifndef glXChannelRectSGIX
#define glXChannelRectSGIX(display, screen, channel, x, y, w, h) glatter_glXChannelRectSGIX_debug((display), (screen), (channel), (x), (y), (w), (h), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXChannelRectSGIX_debug(Display *display, int screen, int channel, int x, int y, int w, int h, const char* file, int line);
#ifndef glXChannelRectSyncSGIX
#define glXChannelRectSyncSGIX(display, screen, channel, synctype) glatter_glXChannelRectSyncSGIX_debug((display), (screen), (channel), (synctype), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXChannelRectSyncSGIX_debug(Display *display, int screen, int channel, GLenum synctype, const char* file, int line);
#ifndef glXQueryChannelDeltasSGIX
#define glXQueryChannelDeltasSGIX(display, screen, channel, x, y, w, h) glatter_glXQueryChannelDeltasSGIX_debug((display), (screen), (channel), (x), (y), (w), (h), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXQueryChannelDeltasSGIX_debug(Display *display, int screen, int channel, int *x, int *y, int *w, int *h, const char* file, int line);
#ifndef glXQueryChannelRectSGIX
#define glXQueryChannelRectSGIX(display, screen, channel, dx, dy, dw, dh) glatter_glXQueryChannelRectSGIX_debug((display), (screen), (channel), (dx), (dy), (dw), (dh), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXQueryChannelRectSGIX_debug(Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh, const char* file, int line);
#endif // defined(GLX_SGIX_video_resize)
#if defined(GLX_SGIX_video_source)
#if defined(_VL_H)
#ifndef glXCreateGLXVideoSourceSGIX
#define glXCreateGLXVideoSourceSGIX(display, screen, server, path, nodeClass, drainNode) glatter_glXCreateGLXVideoSourceSGIX_debug((display), (screen), (server), (path), (nodeClass), (drainNode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXVideoSourceSGIX glatter_glXCreateGLXVideoSourceSGIX_debug(Display *display, int screen, VLServer server, VLPath path, int nodeClass, VLNode drainNode, const char* file, int line);
#ifndef glXDestroyGLXVideoSourceSGIX
#define glXDestroyGLXVideoSourceSGIX(dpy, glxvideosource) glatter_glXDestroyGLXVideoSourceSGIX_debug((dpy), (glxvideosource), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXDestroyGLXVideoSourceSGIX_debug(Display *dpy, GLXVideoSourceSGIX glxvideosource, const char* file, int line);
#endif // defined(_VL_H)
#endif // defined(GLX_SGIX_video_source)
#if defined(GLX_SGI_cushion)
#ifndef glXCushionSGI
#define glXCushionSGI(dpy, window, cushion) glatter_glXCushionSGI_debug((dpy), (window), (cushion), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXCushionSGI_debug(Display *dpy, Window window, float cushion, const char* file, int line);
#endif // defined(GLX_SGI_cushion)
#if defined(GLX_SGI_make_current_read)
#ifndef glXGetCurrentReadDrawableSGI
#define glXGetCurrentReadDrawableSGI() glatter_glXGetCurrentReadDrawableSGI_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXDrawable glatter_glXGetCurrentReadDrawableSGI_debug(const char* file, int line);
#ifndef glXMakeCurrentReadSGI
#define glXMakeCurrentReadSGI(dpy, draw, read, ctx) glatter_glXMakeCurrentReadSGI_debug((dpy), (draw), (read), (ctx), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXMakeCurrentReadSGI_debug(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx, const char* file, int line);
#endif // defined(GLX_SGI_make_current_read)
#if defined(GLX_SGI_swap_control)
#ifndef glXSwapIntervalSGI
#define glXSwapIntervalSGI(interval) glatter_glXSwapIntervalSGI_debug((interval), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXSwapIntervalSGI_debug(int interval, const char* file, int line);
#endif // defined(GLX_SGI_swap_control)
#if defined(GLX_SGI_video_sync)
#ifndef glXGetVideoSyncSGI
#define glXGetVideoSyncSGI(count) glatter_glXGetVideoSyncSGI_debug((count), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXGetVideoSyncSGI_debug(unsigned int *count, const char* file, int line);
#ifndef glXWaitVideoSyncSGI
#define glXWaitVideoSyncSGI(divisor, remainder, count) glatter_glXWaitVideoSyncSGI_debug((divisor), (remainder), (count), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXWaitVideoSyncSGI_debug(int divisor, int remainder, unsigned int *count, const char* file, int line);
#endif // defined(GLX_SGI_video_sync)
#if defined(GLX_SUN_get_transparent_index)
#ifndef glXGetTransparentIndexSUN
#define glXGetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex) glatter_glXGetTransparentIndexSUN_debug((dpy), (overlay), (underlay), (pTransparentIndex), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Status glatter_glXGetTransparentIndexSUN_debug(Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex, const char* file, int line);
#endif // defined(GLX_SUN_get_transparent_index)
#if defined(GLX_VERSION_1_3)
#ifndef glXChooseFBConfig
#define glXChooseFBConfig(dpy, screen, attrib_list, nelements) glatter_glXChooseFBConfig_debug((dpy), (screen), (attrib_list), (nelements), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXFBConfig * glatter_glXChooseFBConfig_debug(Display *dpy, int screen, const int *attrib_list, int *nelements, const char* file, int line);
#ifndef glXCreateNewContext
#define glXCreateNewContext(dpy, config, render_type, share_list, direct) glatter_glXCreateNewContext_debug((dpy), (config), (render_type), (share_list), (direct), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXContext glatter_glXCreateNewContext_debug(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct, const char* file, int line);
#ifndef glXCreatePbuffer
#define glXCreatePbuffer(dpy, config, attrib_list) glatter_glXCreatePbuffer_debug((dpy), (config), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXPbuffer glatter_glXCreatePbuffer_debug(Display *dpy, GLXFBConfig config, const int *attrib_list, const char* file, int line);
#ifndef glXCreatePixmap
#define glXCreatePixmap(dpy, config, pixmap, attrib_list) glatter_glXCreatePixmap_debug((dpy), (config), (pixmap), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXPixmap glatter_glXCreatePixmap_debug(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list, const char* file, int line);
#ifndef glXCreateWindow
#define glXCreateWindow(dpy, config, win, attrib_list) glatter_glXCreateWindow_debug((dpy), (config), (win), (attrib_list), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXWindow glatter_glXCreateWindow_debug(Display *dpy, GLXFBConfig config, Window win, const int *attrib_list, const char* file, int line);
#ifndef glXDestroyPbuffer
#define glXDestroyPbuffer(dpy, pbuf) glatter_glXDestroyPbuffer_debug((dpy), (pbuf), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXDestroyPbuffer_debug(Display *dpy, GLXPbuffer pbuf, const char* file, int line);
#ifndef glXDestroyPixmap
#define glXDestroyPixmap(dpy, pixmap) glatter_glXDestroyPixmap_debug((dpy), (pixmap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXDestroyPixmap_debug(Display *dpy, GLXPixmap pixmap, const char* file, int line);
#ifndef glXDestroyWindow
#define glXDestroyWindow(dpy, win) glatter_glXDestroyWindow_debug((dpy), (win), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXDestroyWindow_debug(Display *dpy, GLXWindow win, const char* file, int line);
#ifndef glXGetCurrentReadDrawable
#define glXGetCurrentReadDrawable() glatter_glXGetCurrentReadDrawable_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXDrawable glatter_glXGetCurrentReadDrawable_debug(const char* file, int line);
#ifndef glXGetFBConfigAttrib
#define glXGetFBConfigAttrib(dpy, config, attribute, value) glatter_glXGetFBConfigAttrib_debug((dpy), (config), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXGetFBConfigAttrib_debug(Display *dpy, GLXFBConfig config, int attribute, int *value, const char* file, int line);
#ifndef glXGetFBConfigs
#define glXGetFBConfigs(dpy, screen, nelements) glatter_glXGetFBConfigs_debug((dpy), (screen), (nelements), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLXFBConfig * glatter_glXGetFBConfigs_debug(Display *dpy, int screen, int *nelements, const char* file, int line);
#ifndef glXGetSelectedEvent
#define glXGetSelectedEvent(dpy, draw, event_mask) glatter_glXGetSelectedEvent_debug((dpy), (draw), (event_mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXGetSelectedEvent_debug(Display *dpy, GLXDrawable draw, unsigned long *event_mask, const char* file, int line);
#ifndef glXGetVisualFromFBConfig
#define glXGetVisualFromFBConfig(dpy, config) glatter_glXGetVisualFromFBConfig_debug((dpy), (config), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT XVisualInfo * glatter_glXGetVisualFromFBConfig_debug(Display *dpy, GLXFBConfig config, const char* file, int line);
#ifndef glXMakeContextCurrent
#define glXMakeContextCurrent(dpy, draw, read, ctx) glatter_glXMakeContextCurrent_debug((dpy), (draw), (read), (ctx), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT Bool glatter_glXMakeContextCurrent_debug(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx, const char* file, int line);
#ifndef glXQueryContext
#define glXQueryContext(dpy, ctx, attribute, value) glatter_glXQueryContext_debug((dpy), (ctx), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT int glatter_glXQueryContext_debug(Display *dpy, GLXContext ctx, int attribute, int *value, const char* file, int line);
#ifndef glXQueryDrawable
#define glXQueryDrawable(dpy, draw, attribute, value) glatter_glXQueryDrawable_debug((dpy), (draw), (attribute), (value), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXQueryDrawable_debug(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value, const char* file, int line);
#ifndef glXSelectEvent
#define glXSelectEvent(dpy, draw, event_mask) glatter_glXSelectEvent_debug((dpy), (draw), (event_mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glXSelectEvent_debug(Display *dpy, GLXDrawable draw, unsigned long event_mask, const char* file, int line);
#endif // defined(GLX_VERSION_1_3)
#if defined(GLX_VERSION_1_4)
#ifndef glXGetProcAddress
#define glXGetProcAddress(procName) glatter_glXGetProcAddress_debug((procName), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT __GLXextFuncPtr glatter_glXGetProcAddress_debug(const GLubyte *procName, const char* file, int line);
#endif // defined(__glx_glxext_h_)
#endif // defined(GLX_VERSION_1_4)
#endif // GLATTER_GLX

