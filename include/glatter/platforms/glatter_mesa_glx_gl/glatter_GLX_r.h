/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_GLX
#if defined(GLX_H)
#if defined(GLX_ARB_get_proc_address)
#ifndef glXGetProcAddressARB
#define glXGetProcAddressARB(procName) glatter_glXGetProcAddressARB((procName))
#endif
GLATTER_UBLOCK(__GLXextFuncPtr, , glXGetProcAddressARB, (const GLubyte *))
#endif // defined(GLX_ARB_get_proc_address)
#if defined(GLX_ARB_render_texture)
#ifndef glXBindTexImageARB
#define glXBindTexImageARB(dpy, pbuffer, buffer) glatter_glXBindTexImageARB((dpy), (pbuffer), (buffer))
#endif
GLATTER_UBLOCK(Bool, , glXBindTexImageARB, (Display *dpy, GLXPbuffer pbuffer, int buffer))
#ifndef glXDrawableAttribARB
#define glXDrawableAttribARB(dpy, draw, attribList) glatter_glXDrawableAttribARB((dpy), (draw), (attribList))
#endif
GLATTER_UBLOCK(Bool, , glXDrawableAttribARB, (Display *dpy, GLXDrawable draw, const int *attribList))
#ifndef glXReleaseTexImageARB
#define glXReleaseTexImageARB(dpy, pbuffer, buffer) glatter_glXReleaseTexImageARB((dpy), (pbuffer), (buffer))
#endif
GLATTER_UBLOCK(Bool, , glXReleaseTexImageARB, (Display *dpy, GLXPbuffer pbuffer, int buffer))
#endif // defined(GLX_ARB_render_texture)
#if defined(GLX_MESA_swap_control)
#ifndef glXGetSwapIntervalMESA
#define glXGetSwapIntervalMESA() glatter_glXGetSwapIntervalMESA()
#endif
GLATTER_UBLOCK(int, , glXGetSwapIntervalMESA, (void))
#ifndef glXSwapIntervalMESA
#define glXSwapIntervalMESA(interval) glatter_glXSwapIntervalMESA((interval))
#endif
GLATTER_UBLOCK(int, , glXSwapIntervalMESA, (unsigned int interval))
#endif // defined(GLX_MESA_swap_control)
#if defined(GLX_MESA_swap_frame_usage)
#ifndef glXBeginFrameTrackingMESA
#define glXBeginFrameTrackingMESA(dpy, drawable) glatter_glXBeginFrameTrackingMESA((dpy), (drawable))
#endif
GLATTER_UBLOCK(int, , glXBeginFrameTrackingMESA, (Display *dpy, GLXDrawable drawable))
#ifndef glXEndFrameTrackingMESA
#define glXEndFrameTrackingMESA(dpy, drawable) glatter_glXEndFrameTrackingMESA((dpy), (drawable))
#endif
GLATTER_UBLOCK(int, , glXEndFrameTrackingMESA, (Display *dpy, GLXDrawable drawable))
#ifndef glXGetFrameUsageMESA
#define glXGetFrameUsageMESA(dpy, drawable, usage) glatter_glXGetFrameUsageMESA((dpy), (drawable), (usage))
#endif
GLATTER_UBLOCK(int, , glXGetFrameUsageMESA, (Display *dpy, GLXDrawable drawable, float *usage))
#ifndef glXQueryFrameTrackingMESA
#define glXQueryFrameTrackingMESA(dpy, drawable, swapCount, missedFrames, lastMissedUsage) glatter_glXQueryFrameTrackingMESA((dpy), (drawable), (swapCount), (missedFrames), (lastMissedUsage))
#endif
GLATTER_UBLOCK(int, , glXQueryFrameTrackingMESA, (Display *dpy, GLXDrawable drawable, int64_t *swapCount, int64_t *missedFrames, float *lastMissedUsage))
#endif // defined(GLX_MESA_swap_frame_usage)
#if defined(GLX_NV_vertex_array_range)
#ifndef glXAllocateMemoryNV
#define glXAllocateMemoryNV(size, readfreq, writefreq, priority) glatter_glXAllocateMemoryNV((size), (readfreq), (writefreq), (priority))
#endif
GLATTER_UBLOCK(void *, , glXAllocateMemoryNV, (GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority))
#ifndef glXFreeMemoryNV
#define glXFreeMemoryNV(pointer) glatter_glXFreeMemoryNV((pointer))
#endif
GLATTER_UBLOCK(void, , glXFreeMemoryNV, (GLvoid *pointer))
#endif // defined(GLX_NV_vertex_array_range)
#ifndef glXChooseFBConfig
#define glXChooseFBConfig(dpy, screen, attribList, nitems) glatter_glXChooseFBConfig((dpy), (screen), (attribList), (nitems))
#endif
GLATTER_UBLOCK(GLXFBConfig *, , glXChooseFBConfig, (Display *dpy, int screen, const int *attribList, int *nitems))
#ifndef glXChooseVisual
#define glXChooseVisual(dpy, screen, attribList) glatter_glXChooseVisual((dpy), (screen), (attribList))
#endif
GLATTER_UBLOCK(XVisualInfo*, , glXChooseVisual, (Display *dpy, int screen, int *attribList))
#ifndef glXCopyContext
#define glXCopyContext(dpy, src, dst, mask) glatter_glXCopyContext((dpy), (src), (dst), (mask))
#endif
GLATTER_UBLOCK(void, , glXCopyContext, (Display *dpy, GLXContext src, GLXContext dst, unsigned long mask))
#ifndef glXCreateContext
#define glXCreateContext(dpy, vis, shareList, direct) glatter_glXCreateContext((dpy), (vis), (shareList), (direct))
#endif
GLATTER_UBLOCK(GLXContext, , glXCreateContext, (Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct))
#ifndef glXCreateGLXPixmap
#define glXCreateGLXPixmap(dpy, visual, pixmap) glatter_glXCreateGLXPixmap((dpy), (visual), (pixmap))
#endif
GLATTER_UBLOCK(GLXPixmap, , glXCreateGLXPixmap, (Display *dpy, XVisualInfo *visual, Pixmap pixmap))
#ifndef glXCreateNewContext
#define glXCreateNewContext(dpy, config, renderType, shareList, direct) glatter_glXCreateNewContext((dpy), (config), (renderType), (shareList), (direct))
#endif
GLATTER_UBLOCK(GLXContext, , glXCreateNewContext, (Display *dpy, GLXFBConfig config, int renderType, GLXContext shareList, Bool direct))
#ifndef glXCreatePbuffer
#define glXCreatePbuffer(dpy, config, attribList) glatter_glXCreatePbuffer((dpy), (config), (attribList))
#endif
GLATTER_UBLOCK(GLXPbuffer, , glXCreatePbuffer, (Display *dpy, GLXFBConfig config, const int *attribList))
#ifndef glXCreatePixmap
#define glXCreatePixmap(dpy, config, pixmap, attribList) glatter_glXCreatePixmap((dpy), (config), (pixmap), (attribList))
#endif
GLATTER_UBLOCK(GLXPixmap, , glXCreatePixmap, (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attribList))
#ifndef glXCreateWindow
#define glXCreateWindow(dpy, config, win, attribList) glatter_glXCreateWindow((dpy), (config), (win), (attribList))
#endif
GLATTER_UBLOCK(GLXWindow, , glXCreateWindow, (Display *dpy, GLXFBConfig config, Window win, const int *attribList))
#ifndef glXDestroyContext
#define glXDestroyContext(dpy, ctx) glatter_glXDestroyContext((dpy), (ctx))
#endif
GLATTER_UBLOCK(void, , glXDestroyContext, (Display *dpy, GLXContext ctx))
#ifndef glXDestroyGLXPixmap
#define glXDestroyGLXPixmap(dpy, pixmap) glatter_glXDestroyGLXPixmap((dpy), (pixmap))
#endif
GLATTER_UBLOCK(void, , glXDestroyGLXPixmap, (Display *dpy, GLXPixmap pixmap))
#ifndef glXDestroyPbuffer
#define glXDestroyPbuffer(dpy, pbuf) glatter_glXDestroyPbuffer((dpy), (pbuf))
#endif
GLATTER_UBLOCK(void, , glXDestroyPbuffer, (Display *dpy, GLXPbuffer pbuf))
#ifndef glXDestroyPixmap
#define glXDestroyPixmap(dpy, pixmap) glatter_glXDestroyPixmap((dpy), (pixmap))
#endif
GLATTER_UBLOCK(void, , glXDestroyPixmap, (Display *dpy, GLXPixmap pixmap))
#ifndef glXDestroyWindow
#define glXDestroyWindow(dpy, window) glatter_glXDestroyWindow((dpy), (window))
#endif
GLATTER_UBLOCK(void, , glXDestroyWindow, (Display *dpy, GLXWindow window))
#ifndef glXGetClientString
#define glXGetClientString(dpy, name) glatter_glXGetClientString((dpy), (name))
#endif
GLATTER_UBLOCK(const char *, , glXGetClientString, (Display *dpy, int name))
#ifndef glXGetConfig
#define glXGetConfig(dpy, visual, attrib, value) glatter_glXGetConfig((dpy), (visual), (attrib), (value))
#endif
GLATTER_UBLOCK(int, , glXGetConfig, (Display *dpy, XVisualInfo *visual, int attrib, int *value))
#ifndef glXGetCurrentContext
#define glXGetCurrentContext() glatter_glXGetCurrentContext()
#endif
GLATTER_UBLOCK(GLXContext, , glXGetCurrentContext, (void))
#ifndef glXGetCurrentDisplay
#define glXGetCurrentDisplay() glatter_glXGetCurrentDisplay()
#endif
GLATTER_UBLOCK(Display *, , glXGetCurrentDisplay, (void))
#ifndef glXGetCurrentDrawable
#define glXGetCurrentDrawable() glatter_glXGetCurrentDrawable()
#endif
GLATTER_UBLOCK(GLXDrawable, , glXGetCurrentDrawable, (void))
#ifndef glXGetCurrentReadDrawable
#define glXGetCurrentReadDrawable() glatter_glXGetCurrentReadDrawable()
#endif
GLATTER_UBLOCK(GLXDrawable, , glXGetCurrentReadDrawable, (void))
#ifndef glXGetFBConfigAttrib
#define glXGetFBConfigAttrib(dpy, config, attribute, value) glatter_glXGetFBConfigAttrib((dpy), (config), (attribute), (value))
#endif
GLATTER_UBLOCK(int, , glXGetFBConfigAttrib, (Display *dpy, GLXFBConfig config, int attribute, int *value))
#ifndef glXGetFBConfigs
#define glXGetFBConfigs(dpy, screen, nelements) glatter_glXGetFBConfigs((dpy), (screen), (nelements))
#endif
GLATTER_UBLOCK(GLXFBConfig *, , glXGetFBConfigs, (Display *dpy, int screen, int *nelements))
#ifndef glXGetSelectedEvent
#define glXGetSelectedEvent(dpy, drawable, mask) glatter_glXGetSelectedEvent((dpy), (drawable), (mask))
#endif
GLATTER_UBLOCK(void, , glXGetSelectedEvent, (Display *dpy, GLXDrawable drawable, unsigned long *mask))
#ifndef glXGetVisualFromFBConfig
#define glXGetVisualFromFBConfig(dpy, config) glatter_glXGetVisualFromFBConfig((dpy), (config))
#endif
GLATTER_UBLOCK(XVisualInfo *, , glXGetVisualFromFBConfig, (Display *dpy, GLXFBConfig config))
#ifndef glXIsDirect
#define glXIsDirect(dpy, ctx) glatter_glXIsDirect((dpy), (ctx))
#endif
GLATTER_UBLOCK(Bool, , glXIsDirect, (Display *dpy, GLXContext ctx))
#ifndef glXMakeContextCurrent
#define glXMakeContextCurrent(dpy, draw, read, ctx) glatter_glXMakeContextCurrent((dpy), (draw), (read), (ctx))
#endif
GLATTER_UBLOCK(Bool, , glXMakeContextCurrent, (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx))
#ifndef glXMakeCurrent
#define glXMakeCurrent(dpy, drawable, ctx) glatter_glXMakeCurrent((dpy), (drawable), (ctx))
#endif
GLATTER_UBLOCK(Bool, , glXMakeCurrent, (Display *dpy, GLXDrawable drawable, GLXContext ctx))
#ifndef glXQueryContext
#define glXQueryContext(dpy, ctx, attribute, value) glatter_glXQueryContext((dpy), (ctx), (attribute), (value))
#endif
GLATTER_UBLOCK(int, , glXQueryContext, (Display *dpy, GLXContext ctx, int attribute, int *value))
#ifndef glXQueryDrawable
#define glXQueryDrawable(dpy, draw, attribute, value) glatter_glXQueryDrawable((dpy), (draw), (attribute), (value))
#endif
GLATTER_UBLOCK(void, , glXQueryDrawable, (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value))
#ifndef glXQueryExtension
#define glXQueryExtension(dpy, errorb, event) glatter_glXQueryExtension((dpy), (errorb), (event))
#endif
GLATTER_UBLOCK(Bool, , glXQueryExtension, (Display *dpy, int *errorb, int *event))
#ifndef glXQueryExtensionsString
#define glXQueryExtensionsString(dpy, screen) glatter_glXQueryExtensionsString((dpy), (screen))
#endif
GLATTER_UBLOCK(const char *, , glXQueryExtensionsString, (Display *dpy, int screen))
#ifndef glXQueryServerString
#define glXQueryServerString(dpy, screen, name) glatter_glXQueryServerString((dpy), (screen), (name))
#endif
GLATTER_UBLOCK(const char *, , glXQueryServerString, (Display *dpy, int screen, int name))
#ifndef glXQueryVersion
#define glXQueryVersion(dpy, maj, min) glatter_glXQueryVersion((dpy), (maj), (min))
#endif
GLATTER_UBLOCK(Bool, , glXQueryVersion, (Display *dpy, int *maj, int *min))
#ifndef glXSelectEvent
#define glXSelectEvent(dpy, drawable, mask) glatter_glXSelectEvent((dpy), (drawable), (mask))
#endif
GLATTER_UBLOCK(void, , glXSelectEvent, (Display *dpy, GLXDrawable drawable, unsigned long mask))
#ifndef glXSwapBuffers
#define glXSwapBuffers(dpy, drawable) glatter_glXSwapBuffers((dpy), (drawable))
#endif
GLATTER_UBLOCK(void, , glXSwapBuffers, (Display *dpy, GLXDrawable drawable))
#ifndef glXUseXFont
#define glXUseXFont(font, first, count, list) glatter_glXUseXFont((font), (first), (count), (list))
#endif
GLATTER_UBLOCK(void, , glXUseXFont, (Font font, int first, int count, int list))
#ifndef glXWaitGL
#define glXWaitGL() glatter_glXWaitGL()
#endif
GLATTER_UBLOCK(void, , glXWaitGL, (void))
#ifndef glXWaitX
#define glXWaitX() glatter_glXWaitX()
#endif
GLATTER_UBLOCK(void, , glXWaitX, (void))
#endif // defined(GLX_H)
#if defined(__glx_glxext_h_)
#if defined(GLX_AMD_gpu_association)
#ifndef glXBlitContextFramebufferAMD
#define glXBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glXBlitContextFramebufferAMD((dstCtx), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
#endif
GLATTER_UBLOCK(void, , glXBlitContextFramebufferAMD, (GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#ifndef glXCreateAssociatedContextAMD
#define glXCreateAssociatedContextAMD(id, share_list) glatter_glXCreateAssociatedContextAMD((id), (share_list))
#endif
GLATTER_UBLOCK(GLXContext, , glXCreateAssociatedContextAMD, (unsigned int id, GLXContext share_list))
#ifndef glXCreateAssociatedContextAttribsAMD
#define glXCreateAssociatedContextAttribsAMD(id, share_context, attribList) glatter_glXCreateAssociatedContextAttribsAMD((id), (share_context), (attribList))
#endif
GLATTER_UBLOCK(GLXContext, , glXCreateAssociatedContextAttribsAMD, (unsigned int id, GLXContext share_context, const int *attribList))
#ifndef glXDeleteAssociatedContextAMD
#define glXDeleteAssociatedContextAMD(ctx) glatter_glXDeleteAssociatedContextAMD((ctx))
#endif
GLATTER_UBLOCK(Bool, , glXDeleteAssociatedContextAMD, (GLXContext ctx))
#ifndef glXGetContextGPUIDAMD
#define glXGetContextGPUIDAMD(ctx) glatter_glXGetContextGPUIDAMD((ctx))
#endif
GLATTER_UBLOCK(unsigned int, , glXGetContextGPUIDAMD, (GLXContext ctx))
#ifndef glXGetCurrentAssociatedContextAMD
#define glXGetCurrentAssociatedContextAMD() glatter_glXGetCurrentAssociatedContextAMD()
#endif
GLATTER_UBLOCK(GLXContext, , glXGetCurrentAssociatedContextAMD, (void))
#ifndef glXGetGPUIDsAMD
#define glXGetGPUIDsAMD(maxCount, ids) glatter_glXGetGPUIDsAMD((maxCount), (ids))
#endif
GLATTER_UBLOCK(unsigned int, , glXGetGPUIDsAMD, (unsigned int maxCount, unsigned int *ids))
#ifndef glXGetGPUInfoAMD
#define glXGetGPUInfoAMD(id, property, dataType, size, data) glatter_glXGetGPUInfoAMD((id), (property), (dataType), (size), (data))
#endif
GLATTER_UBLOCK(int, , glXGetGPUInfoAMD, (unsigned int id, int property, GLenum dataType, unsigned int size, void *data))
#ifndef glXMakeAssociatedContextCurrentAMD
#define glXMakeAssociatedContextCurrentAMD(ctx) glatter_glXMakeAssociatedContextCurrentAMD((ctx))
#endif
GLATTER_UBLOCK(Bool, , glXMakeAssociatedContextCurrentAMD, (GLXContext ctx))
#endif // defined(GLX_AMD_gpu_association)
#if defined(GLX_ARB_create_context)
#ifndef glXCreateContextAttribsARB
#define glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list) glatter_glXCreateContextAttribsARB((dpy), (config), (share_context), (direct), (attrib_list))
#endif
GLATTER_UBLOCK(GLXContext, , glXCreateContextAttribsARB, (Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list))
#endif // defined(GLX_ARB_create_context)
#if defined(GLX_ARB_get_proc_address)
#ifndef glXGetProcAddressARB
#define glXGetProcAddressARB(procName) glatter_glXGetProcAddressARB((procName))
#endif
GLATTER_UBLOCK(__GLXextFuncPtr, , glXGetProcAddressARB, (const GLubyte *procName))
#endif // defined(GLX_ARB_get_proc_address)
#if defined(GLX_EXT_import_context)
#ifndef glXFreeContextEXT
#define glXFreeContextEXT(dpy, context) glatter_glXFreeContextEXT((dpy), (context))
#endif
GLATTER_UBLOCK(void, , glXFreeContextEXT, (Display *dpy, GLXContext context))
#ifndef glXGetContextIDEXT
#define glXGetContextIDEXT(context) glatter_glXGetContextIDEXT((context))
#endif
GLATTER_UBLOCK(GLXContextID, , glXGetContextIDEXT, (const GLXContext context))
#ifndef glXGetCurrentDisplayEXT
#define glXGetCurrentDisplayEXT() glatter_glXGetCurrentDisplayEXT()
#endif
GLATTER_UBLOCK(Display *, , glXGetCurrentDisplayEXT, (void))
#ifndef glXImportContextEXT
#define glXImportContextEXT(dpy, contextID) glatter_glXImportContextEXT((dpy), (contextID))
#endif
GLATTER_UBLOCK(GLXContext, , glXImportContextEXT, (Display *dpy, GLXContextID contextID))
#ifndef glXQueryContextInfoEXT
#define glXQueryContextInfoEXT(dpy, context, attribute, value) glatter_glXQueryContextInfoEXT((dpy), (context), (attribute), (value))
#endif
GLATTER_UBLOCK(int, , glXQueryContextInfoEXT, (Display *dpy, GLXContext context, int attribute, int *value))
#endif // defined(GLX_EXT_import_context)
#if defined(GLX_EXT_swap_control)
#ifndef glXSwapIntervalEXT
#define glXSwapIntervalEXT(dpy, drawable, interval) glatter_glXSwapIntervalEXT((dpy), (drawable), (interval))
#endif
GLATTER_UBLOCK(void, , glXSwapIntervalEXT, (Display *dpy, GLXDrawable drawable, int interval))
#endif // defined(GLX_EXT_swap_control)
#if defined(GLX_EXT_texture_from_pixmap)
#ifndef glXBindTexImageEXT
#define glXBindTexImageEXT(dpy, drawable, buffer, attrib_list) glatter_glXBindTexImageEXT((dpy), (drawable), (buffer), (attrib_list))
#endif
GLATTER_UBLOCK(void, , glXBindTexImageEXT, (Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list))
#ifndef glXReleaseTexImageEXT
#define glXReleaseTexImageEXT(dpy, drawable, buffer) glatter_glXReleaseTexImageEXT((dpy), (drawable), (buffer))
#endif
GLATTER_UBLOCK(void, , glXReleaseTexImageEXT, (Display *dpy, GLXDrawable drawable, int buffer))
#endif // defined(GLX_EXT_texture_from_pixmap)
#if defined(GLX_MESA_agp_offset)
#ifndef glXGetAGPOffsetMESA
#define glXGetAGPOffsetMESA(pointer) glatter_glXGetAGPOffsetMESA((pointer))
#endif
GLATTER_UBLOCK(unsigned int, , glXGetAGPOffsetMESA, (const void *pointer))
#endif // defined(GLX_MESA_agp_offset)
#if defined(GLX_MESA_copy_sub_buffer)
#ifndef glXCopySubBufferMESA
#define glXCopySubBufferMESA(dpy, drawable, x, y, width, height) glatter_glXCopySubBufferMESA((dpy), (drawable), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, , glXCopySubBufferMESA, (Display *dpy, GLXDrawable drawable, int x, int y, int width, int height))
#endif // defined(GLX_MESA_copy_sub_buffer)
#if defined(GLX_MESA_pixmap_colormap)
#ifndef glXCreateGLXPixmapMESA
#define glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap) glatter_glXCreateGLXPixmapMESA((dpy), (visual), (pixmap), (cmap))
#endif
GLATTER_UBLOCK(GLXPixmap, , glXCreateGLXPixmapMESA, (Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap))
#endif // defined(GLX_MESA_pixmap_colormap)
#if defined(GLX_MESA_query_renderer)
#ifndef glXQueryCurrentRendererIntegerMESA
#define glXQueryCurrentRendererIntegerMESA(attribute, value) glatter_glXQueryCurrentRendererIntegerMESA((attribute), (value))
#endif
GLATTER_UBLOCK(Bool, , glXQueryCurrentRendererIntegerMESA, (int attribute, unsigned int *value))
#ifndef glXQueryCurrentRendererStringMESA
#define glXQueryCurrentRendererStringMESA(attribute) glatter_glXQueryCurrentRendererStringMESA((attribute))
#endif
GLATTER_UBLOCK(const char *, , glXQueryCurrentRendererStringMESA, (int attribute))
#ifndef glXQueryRendererIntegerMESA
#define glXQueryRendererIntegerMESA(dpy, screen, renderer, attribute, value) glatter_glXQueryRendererIntegerMESA((dpy), (screen), (renderer), (attribute), (value))
#endif
GLATTER_UBLOCK(Bool, , glXQueryRendererIntegerMESA, (Display *dpy, int screen, int renderer, int attribute, unsigned int *value))
#ifndef glXQueryRendererStringMESA
#define glXQueryRendererStringMESA(dpy, screen, renderer, attribute) glatter_glXQueryRendererStringMESA((dpy), (screen), (renderer), (attribute))
#endif
GLATTER_UBLOCK(const char *, , glXQueryRendererStringMESA, (Display *dpy, int screen, int renderer, int attribute))
#endif // defined(GLX_MESA_query_renderer)
#if defined(GLX_MESA_release_buffers)
#ifndef glXReleaseBuffersMESA
#define glXReleaseBuffersMESA(dpy, drawable) glatter_glXReleaseBuffersMESA((dpy), (drawable))
#endif
GLATTER_UBLOCK(Bool, , glXReleaseBuffersMESA, (Display *dpy, GLXDrawable drawable))
#endif // defined(GLX_MESA_release_buffers)
#if defined(GLX_MESA_set_3dfx_mode)
#ifndef glXSet3DfxModeMESA
#define glXSet3DfxModeMESA(mode) glatter_glXSet3DfxModeMESA((mode))
#endif
GLATTER_UBLOCK(GLboolean, , glXSet3DfxModeMESA, (GLint mode))
#endif // defined(GLX_MESA_set_3dfx_mode)
#if defined(GLX_MESA_swap_control)
#ifndef glXGetSwapIntervalMESA
#define glXGetSwapIntervalMESA() glatter_glXGetSwapIntervalMESA()
#endif
GLATTER_UBLOCK(int, , glXGetSwapIntervalMESA, (void))
#ifndef glXSwapIntervalMESA
#define glXSwapIntervalMESA(interval) glatter_glXSwapIntervalMESA((interval))
#endif
GLATTER_UBLOCK(int, , glXSwapIntervalMESA, (unsigned int interval))
#endif // defined(GLX_MESA_swap_control)
#if defined(GLX_NV_copy_buffer)
#ifndef glXCopyBufferSubDataNV
#define glXCopyBufferSubDataNV(dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size) glatter_glXCopyBufferSubDataNV((dpy), (readCtx), (writeCtx), (readTarget), (writeTarget), (readOffset), (writeOffset), (size))
#endif
GLATTER_UBLOCK(void, , glXCopyBufferSubDataNV, (Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#ifndef glXNamedCopyBufferSubDataNV
#define glXNamedCopyBufferSubDataNV(dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glXNamedCopyBufferSubDataNV((dpy), (readCtx), (writeCtx), (readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
#endif
GLATTER_UBLOCK(void, , glXNamedCopyBufferSubDataNV, (Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#endif // defined(GLX_NV_copy_buffer)
#if defined(GLX_NV_copy_image)
#ifndef glXCopyImageSubDataNV
#define glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_glXCopyImageSubDataNV((dpy), (srcCtx), (srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstCtx), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth))
#endif
GLATTER_UBLOCK(void, , glXCopyImageSubDataNV, (Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GLX_NV_copy_image)
#if defined(GLX_NV_delay_before_swap)
#ifndef glXDelayBeforeSwapNV
#define glXDelayBeforeSwapNV(dpy, drawable, seconds) glatter_glXDelayBeforeSwapNV((dpy), (drawable), (seconds))
#endif
GLATTER_UBLOCK(Bool, , glXDelayBeforeSwapNV, (Display *dpy, GLXDrawable drawable, GLfloat seconds))
#endif // defined(GLX_NV_delay_before_swap)
#if defined(GLX_NV_present_video)
#ifndef glXBindVideoDeviceNV
#define glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list) glatter_glXBindVideoDeviceNV((dpy), (video_slot), (video_device), (attrib_list))
#endif
GLATTER_UBLOCK(int, , glXBindVideoDeviceNV, (Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list))
#ifndef glXEnumerateVideoDevicesNV
#define glXEnumerateVideoDevicesNV(dpy, screen, nelements) glatter_glXEnumerateVideoDevicesNV((dpy), (screen), (nelements))
#endif
GLATTER_UBLOCK(unsigned int *, , glXEnumerateVideoDevicesNV, (Display *dpy, int screen, int *nelements))
#endif // defined(GLX_NV_present_video)
#if defined(GLX_NV_swap_group)
#ifndef glXBindSwapBarrierNV
#define glXBindSwapBarrierNV(dpy, group, barrier) glatter_glXBindSwapBarrierNV((dpy), (group), (barrier))
#endif
GLATTER_UBLOCK(Bool, , glXBindSwapBarrierNV, (Display *dpy, GLuint group, GLuint barrier))
#ifndef glXJoinSwapGroupNV
#define glXJoinSwapGroupNV(dpy, drawable, group) glatter_glXJoinSwapGroupNV((dpy), (drawable), (group))
#endif
GLATTER_UBLOCK(Bool, , glXJoinSwapGroupNV, (Display *dpy, GLXDrawable drawable, GLuint group))
#ifndef glXQueryFrameCountNV
#define glXQueryFrameCountNV(dpy, screen, count) glatter_glXQueryFrameCountNV((dpy), (screen), (count))
#endif
GLATTER_UBLOCK(Bool, , glXQueryFrameCountNV, (Display *dpy, int screen, GLuint *count))
#ifndef glXQueryMaxSwapGroupsNV
#define glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers) glatter_glXQueryMaxSwapGroupsNV((dpy), (screen), (maxGroups), (maxBarriers))
#endif
GLATTER_UBLOCK(Bool, , glXQueryMaxSwapGroupsNV, (Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers))
#ifndef glXQuerySwapGroupNV
#define glXQuerySwapGroupNV(dpy, drawable, group, barrier) glatter_glXQuerySwapGroupNV((dpy), (drawable), (group), (barrier))
#endif
GLATTER_UBLOCK(Bool, , glXQuerySwapGroupNV, (Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier))
#ifndef glXResetFrameCountNV
#define glXResetFrameCountNV(dpy, screen) glatter_glXResetFrameCountNV((dpy), (screen))
#endif
GLATTER_UBLOCK(Bool, , glXResetFrameCountNV, (Display *dpy, int screen))
#endif // defined(GLX_NV_swap_group)
#if defined(GLX_NV_video_capture)
#ifndef glXBindVideoCaptureDeviceNV
#define glXBindVideoCaptureDeviceNV(dpy, video_capture_slot, device) glatter_glXBindVideoCaptureDeviceNV((dpy), (video_capture_slot), (device))
#endif
GLATTER_UBLOCK(int, , glXBindVideoCaptureDeviceNV, (Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device))
#ifndef glXEnumerateVideoCaptureDevicesNV
#define glXEnumerateVideoCaptureDevicesNV(dpy, screen, nelements) glatter_glXEnumerateVideoCaptureDevicesNV((dpy), (screen), (nelements))
#endif
GLATTER_UBLOCK(GLXVideoCaptureDeviceNV *, , glXEnumerateVideoCaptureDevicesNV, (Display *dpy, int screen, int *nelements))
#ifndef glXLockVideoCaptureDeviceNV
#define glXLockVideoCaptureDeviceNV(dpy, device) glatter_glXLockVideoCaptureDeviceNV((dpy), (device))
#endif
GLATTER_UBLOCK(void, , glXLockVideoCaptureDeviceNV, (Display *dpy, GLXVideoCaptureDeviceNV device))
#ifndef glXQueryVideoCaptureDeviceNV
#define glXQueryVideoCaptureDeviceNV(dpy, device, attribute, value) glatter_glXQueryVideoCaptureDeviceNV((dpy), (device), (attribute), (value))
#endif
GLATTER_UBLOCK(int, , glXQueryVideoCaptureDeviceNV, (Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value))
#ifndef glXReleaseVideoCaptureDeviceNV
#define glXReleaseVideoCaptureDeviceNV(dpy, device) glatter_glXReleaseVideoCaptureDeviceNV((dpy), (device))
#endif
GLATTER_UBLOCK(void, , glXReleaseVideoCaptureDeviceNV, (Display *dpy, GLXVideoCaptureDeviceNV device))
#endif // defined(GLX_NV_video_capture)
#if defined(GLX_NV_video_out)
#ifndef glXBindVideoImageNV
#define glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer) glatter_glXBindVideoImageNV((dpy), (VideoDevice), (pbuf), (iVideoBuffer))
#endif
GLATTER_UBLOCK(int, , glXBindVideoImageNV, (Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer))
#ifndef glXGetVideoDeviceNV
#define glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice) glatter_glXGetVideoDeviceNV((dpy), (screen), (numVideoDevices), (pVideoDevice))
#endif
GLATTER_UBLOCK(int, , glXGetVideoDeviceNV, (Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice))
#ifndef glXGetVideoInfoNV
#define glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) glatter_glXGetVideoInfoNV((dpy), (screen), (VideoDevice), (pulCounterOutputPbuffer), (pulCounterOutputVideo))
#endif
GLATTER_UBLOCK(int, , glXGetVideoInfoNV, (Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo))
#ifndef glXReleaseVideoDeviceNV
#define glXReleaseVideoDeviceNV(dpy, screen, VideoDevice) glatter_glXReleaseVideoDeviceNV((dpy), (screen), (VideoDevice))
#endif
GLATTER_UBLOCK(int, , glXReleaseVideoDeviceNV, (Display *dpy, int screen, GLXVideoDeviceNV VideoDevice))
#ifndef glXReleaseVideoImageNV
#define glXReleaseVideoImageNV(dpy, pbuf) glatter_glXReleaseVideoImageNV((dpy), (pbuf))
#endif
GLATTER_UBLOCK(int, , glXReleaseVideoImageNV, (Display *dpy, GLXPbuffer pbuf))
#ifndef glXSendPbufferToVideoNV
#define glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock) glatter_glXSendPbufferToVideoNV((dpy), (pbuf), (iBufferType), (pulCounterPbuffer), (bBlock))
#endif
GLATTER_UBLOCK(int, , glXSendPbufferToVideoNV, (Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock))
#endif // defined(GLX_NV_video_out)
#if defined(GLX_OML_sync_control)
#ifndef glXGetMscRateOML
#define glXGetMscRateOML(dpy, drawable, numerator, denominator) glatter_glXGetMscRateOML((dpy), (drawable), (numerator), (denominator))
#endif
GLATTER_UBLOCK(Bool, , glXGetMscRateOML, (Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator))
#ifndef glXGetSyncValuesOML
#define glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc) glatter_glXGetSyncValuesOML((dpy), (drawable), (ust), (msc), (sbc))
#endif
GLATTER_UBLOCK(Bool, , glXGetSyncValuesOML, (Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc))
#ifndef glXSwapBuffersMscOML
#define glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder) glatter_glXSwapBuffersMscOML((dpy), (drawable), (target_msc), (divisor), (remainder))
#endif
GLATTER_UBLOCK(int64_t, , glXSwapBuffersMscOML, (Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder))
#ifndef glXWaitForMscOML
#define glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc) glatter_glXWaitForMscOML((dpy), (drawable), (target_msc), (divisor), (remainder), (ust), (msc), (sbc))
#endif
GLATTER_UBLOCK(Bool, , glXWaitForMscOML, (Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc))
#ifndef glXWaitForSbcOML
#define glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc) glatter_glXWaitForSbcOML((dpy), (drawable), (target_sbc), (ust), (msc), (sbc))
#endif
GLATTER_UBLOCK(Bool, , glXWaitForSbcOML, (Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc))
#endif // defined(GLX_OML_sync_control)
#if defined(GLX_SGIX_dmbuffer)
#if defined(_DM_BUFFER_H_)
#ifndef glXAssociateDMPbufferSGIX
#define glXAssociateDMPbufferSGIX(dpy, pbuffer, params, dmbuffer) glatter_glXAssociateDMPbufferSGIX((dpy), (pbuffer), (params), (dmbuffer))
#endif
GLATTER_UBLOCK(Bool, , glXAssociateDMPbufferSGIX, (Display *dpy, GLXPbufferSGIX pbuffer, DMparams *params, DMbuffer dmbuffer))
#endif // defined(_DM_BUFFER_H_)
#endif // defined(GLX_SGIX_dmbuffer)
#if defined(GLX_SGIX_fbconfig)
#ifndef glXChooseFBConfigSGIX
#define glXChooseFBConfigSGIX(dpy, screen, attrib_list, nelements) glatter_glXChooseFBConfigSGIX((dpy), (screen), (attrib_list), (nelements))
#endif
GLATTER_UBLOCK(GLXFBConfigSGIX *, , glXChooseFBConfigSGIX, (Display *dpy, int screen, int *attrib_list, int *nelements))
#ifndef glXCreateContextWithConfigSGIX
#define glXCreateContextWithConfigSGIX(dpy, config, render_type, share_list, direct) glatter_glXCreateContextWithConfigSGIX((dpy), (config), (render_type), (share_list), (direct))
#endif
GLATTER_UBLOCK(GLXContext, , glXCreateContextWithConfigSGIX, (Display *dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct))
#ifndef glXCreateGLXPixmapWithConfigSGIX
#define glXCreateGLXPixmapWithConfigSGIX(dpy, config, pixmap) glatter_glXCreateGLXPixmapWithConfigSGIX((dpy), (config), (pixmap))
#endif
GLATTER_UBLOCK(GLXPixmap, , glXCreateGLXPixmapWithConfigSGIX, (Display *dpy, GLXFBConfigSGIX config, Pixmap pixmap))
#ifndef glXGetFBConfigAttribSGIX
#define glXGetFBConfigAttribSGIX(dpy, config, attribute, value) glatter_glXGetFBConfigAttribSGIX((dpy), (config), (attribute), (value))
#endif
GLATTER_UBLOCK(int, , glXGetFBConfigAttribSGIX, (Display *dpy, GLXFBConfigSGIX config, int attribute, int *value))
#ifndef glXGetFBConfigFromVisualSGIX
#define glXGetFBConfigFromVisualSGIX(dpy, vis) glatter_glXGetFBConfigFromVisualSGIX((dpy), (vis))
#endif
GLATTER_UBLOCK(GLXFBConfigSGIX, , glXGetFBConfigFromVisualSGIX, (Display *dpy, XVisualInfo *vis))
#ifndef glXGetVisualFromFBConfigSGIX
#define glXGetVisualFromFBConfigSGIX(dpy, config) glatter_glXGetVisualFromFBConfigSGIX((dpy), (config))
#endif
GLATTER_UBLOCK(XVisualInfo *, , glXGetVisualFromFBConfigSGIX, (Display *dpy, GLXFBConfigSGIX config))
#endif // defined(GLX_SGIX_fbconfig)
#if defined(GLX_SGIX_hyperpipe)
#ifndef glXBindHyperpipeSGIX
#define glXBindHyperpipeSGIX(dpy, hpId) glatter_glXBindHyperpipeSGIX((dpy), (hpId))
#endif
GLATTER_UBLOCK(int, , glXBindHyperpipeSGIX, (Display *dpy, int hpId))
#ifndef glXDestroyHyperpipeConfigSGIX
#define glXDestroyHyperpipeConfigSGIX(dpy, hpId) glatter_glXDestroyHyperpipeConfigSGIX((dpy), (hpId))
#endif
GLATTER_UBLOCK(int, , glXDestroyHyperpipeConfigSGIX, (Display *dpy, int hpId))
#ifndef glXHyperpipeAttribSGIX
#define glXHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, attribList) glatter_glXHyperpipeAttribSGIX((dpy), (timeSlice), (attrib), (size), (attribList))
#endif
GLATTER_UBLOCK(int, , glXHyperpipeAttribSGIX, (Display *dpy, int timeSlice, int attrib, int size, void *attribList))
#ifndef glXHyperpipeConfigSGIX
#define glXHyperpipeConfigSGIX(dpy, networkId, npipes, cfg, hpId) glatter_glXHyperpipeConfigSGIX((dpy), (networkId), (npipes), (cfg), (hpId))
#endif
GLATTER_UBLOCK(int, , glXHyperpipeConfigSGIX, (Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId))
#ifndef glXQueryHyperpipeAttribSGIX
#define glXQueryHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, returnAttribList) glatter_glXQueryHyperpipeAttribSGIX((dpy), (timeSlice), (attrib), (size), (returnAttribList))
#endif
GLATTER_UBLOCK(int, , glXQueryHyperpipeAttribSGIX, (Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList))
#ifndef glXQueryHyperpipeBestAttribSGIX
#define glXQueryHyperpipeBestAttribSGIX(dpy, timeSlice, attrib, size, attribList, returnAttribList) glatter_glXQueryHyperpipeBestAttribSGIX((dpy), (timeSlice), (attrib), (size), (attribList), (returnAttribList))
#endif
GLATTER_UBLOCK(int, , glXQueryHyperpipeBestAttribSGIX, (Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList))
#ifndef glXQueryHyperpipeConfigSGIX
#define glXQueryHyperpipeConfigSGIX(dpy, hpId, npipes) glatter_glXQueryHyperpipeConfigSGIX((dpy), (hpId), (npipes))
#endif
GLATTER_UBLOCK(GLXHyperpipeConfigSGIX *, , glXQueryHyperpipeConfigSGIX, (Display *dpy, int hpId, int *npipes))
#ifndef glXQueryHyperpipeNetworkSGIX
#define glXQueryHyperpipeNetworkSGIX(dpy, npipes) glatter_glXQueryHyperpipeNetworkSGIX((dpy), (npipes))
#endif
GLATTER_UBLOCK(GLXHyperpipeNetworkSGIX *, , glXQueryHyperpipeNetworkSGIX, (Display *dpy, int *npipes))
#endif // defined(GLX_SGIX_hyperpipe)
#if defined(GLX_SGIX_pbuffer)
#ifndef glXCreateGLXPbufferSGIX
#define glXCreateGLXPbufferSGIX(dpy, config, width, height, attrib_list) glatter_glXCreateGLXPbufferSGIX((dpy), (config), (width), (height), (attrib_list))
#endif
GLATTER_UBLOCK(GLXPbufferSGIX, , glXCreateGLXPbufferSGIX, (Display *dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int *attrib_list))
#ifndef glXDestroyGLXPbufferSGIX
#define glXDestroyGLXPbufferSGIX(dpy, pbuf) glatter_glXDestroyGLXPbufferSGIX((dpy), (pbuf))
#endif
GLATTER_UBLOCK(void, , glXDestroyGLXPbufferSGIX, (Display *dpy, GLXPbufferSGIX pbuf))
#ifndef glXGetSelectedEventSGIX
#define glXGetSelectedEventSGIX(dpy, drawable, mask) glatter_glXGetSelectedEventSGIX((dpy), (drawable), (mask))
#endif
GLATTER_UBLOCK(void, , glXGetSelectedEventSGIX, (Display *dpy, GLXDrawable drawable, unsigned long *mask))
#ifndef glXQueryGLXPbufferSGIX
#define glXQueryGLXPbufferSGIX(dpy, pbuf, attribute, value) glatter_glXQueryGLXPbufferSGIX((dpy), (pbuf), (attribute), (value))
#endif
GLATTER_UBLOCK(void, , glXQueryGLXPbufferSGIX, (Display *dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int *value))
#ifndef glXSelectEventSGIX
#define glXSelectEventSGIX(dpy, drawable, mask) glatter_glXSelectEventSGIX((dpy), (drawable), (mask))
#endif
GLATTER_UBLOCK(void, , glXSelectEventSGIX, (Display *dpy, GLXDrawable drawable, unsigned long mask))
#endif // defined(GLX_SGIX_pbuffer)
#if defined(GLX_SGIX_swap_barrier)
#ifndef glXBindSwapBarrierSGIX
#define glXBindSwapBarrierSGIX(dpy, drawable, barrier) glatter_glXBindSwapBarrierSGIX((dpy), (drawable), (barrier))
#endif
GLATTER_UBLOCK(void, , glXBindSwapBarrierSGIX, (Display *dpy, GLXDrawable drawable, int barrier))
#ifndef glXQueryMaxSwapBarriersSGIX
#define glXQueryMaxSwapBarriersSGIX(dpy, screen, max) glatter_glXQueryMaxSwapBarriersSGIX((dpy), (screen), (max))
#endif
GLATTER_UBLOCK(Bool, , glXQueryMaxSwapBarriersSGIX, (Display *dpy, int screen, int *max))
#endif // defined(GLX_SGIX_swap_barrier)
#if defined(GLX_SGIX_swap_group)
#ifndef glXJoinSwapGroupSGIX
#define glXJoinSwapGroupSGIX(dpy, drawable, member) glatter_glXJoinSwapGroupSGIX((dpy), (drawable), (member))
#endif
GLATTER_UBLOCK(void, , glXJoinSwapGroupSGIX, (Display *dpy, GLXDrawable drawable, GLXDrawable member))
#endif // defined(GLX_SGIX_swap_group)
#if defined(GLX_SGIX_video_resize)
#ifndef glXBindChannelToWindowSGIX
#define glXBindChannelToWindowSGIX(display, screen, channel, window) glatter_glXBindChannelToWindowSGIX((display), (screen), (channel), (window))
#endif
GLATTER_UBLOCK(int, , glXBindChannelToWindowSGIX, (Display *display, int screen, int channel, Window window))
#ifndef glXChannelRectSGIX
#define glXChannelRectSGIX(display, screen, channel, x, y, w, h) glatter_glXChannelRectSGIX((display), (screen), (channel), (x), (y), (w), (h))
#endif
GLATTER_UBLOCK(int, , glXChannelRectSGIX, (Display *display, int screen, int channel, int x, int y, int w, int h))
#ifndef glXChannelRectSyncSGIX
#define glXChannelRectSyncSGIX(display, screen, channel, synctype) glatter_glXChannelRectSyncSGIX((display), (screen), (channel), (synctype))
#endif
GLATTER_UBLOCK(int, , glXChannelRectSyncSGIX, (Display *display, int screen, int channel, GLenum synctype))
#ifndef glXQueryChannelDeltasSGIX
#define glXQueryChannelDeltasSGIX(display, screen, channel, x, y, w, h) glatter_glXQueryChannelDeltasSGIX((display), (screen), (channel), (x), (y), (w), (h))
#endif
GLATTER_UBLOCK(int, , glXQueryChannelDeltasSGIX, (Display *display, int screen, int channel, int *x, int *y, int *w, int *h))
#ifndef glXQueryChannelRectSGIX
#define glXQueryChannelRectSGIX(display, screen, channel, dx, dy, dw, dh) glatter_glXQueryChannelRectSGIX((display), (screen), (channel), (dx), (dy), (dw), (dh))
#endif
GLATTER_UBLOCK(int, , glXQueryChannelRectSGIX, (Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh))
#endif // defined(GLX_SGIX_video_resize)
#if defined(GLX_SGIX_video_source)
#if defined(_VL_H)
#ifndef glXCreateGLXVideoSourceSGIX
#define glXCreateGLXVideoSourceSGIX(display, screen, server, path, nodeClass, drainNode) glatter_glXCreateGLXVideoSourceSGIX((display), (screen), (server), (path), (nodeClass), (drainNode))
#endif
GLATTER_UBLOCK(GLXVideoSourceSGIX, , glXCreateGLXVideoSourceSGIX, (Display *display, int screen, VLServer server, VLPath path, int nodeClass, VLNode drainNode))
#ifndef glXDestroyGLXVideoSourceSGIX
#define glXDestroyGLXVideoSourceSGIX(dpy, glxvideosource) glatter_glXDestroyGLXVideoSourceSGIX((dpy), (glxvideosource))
#endif
GLATTER_UBLOCK(void, , glXDestroyGLXVideoSourceSGIX, (Display *dpy, GLXVideoSourceSGIX glxvideosource))
#endif // defined(_VL_H)
#endif // defined(GLX_SGIX_video_source)
#if defined(GLX_SGI_cushion)
#ifndef glXCushionSGI
#define glXCushionSGI(dpy, window, cushion) glatter_glXCushionSGI((dpy), (window), (cushion))
#endif
GLATTER_UBLOCK(void, , glXCushionSGI, (Display *dpy, Window window, float cushion))
#endif // defined(GLX_SGI_cushion)
#if defined(GLX_SGI_make_current_read)
#ifndef glXGetCurrentReadDrawableSGI
#define glXGetCurrentReadDrawableSGI() glatter_glXGetCurrentReadDrawableSGI()
#endif
GLATTER_UBLOCK(GLXDrawable, , glXGetCurrentReadDrawableSGI, (void))
#ifndef glXMakeCurrentReadSGI
#define glXMakeCurrentReadSGI(dpy, draw, read, ctx) glatter_glXMakeCurrentReadSGI((dpy), (draw), (read), (ctx))
#endif
GLATTER_UBLOCK(Bool, , glXMakeCurrentReadSGI, (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx))
#endif // defined(GLX_SGI_make_current_read)
#if defined(GLX_SGI_swap_control)
#ifndef glXSwapIntervalSGI
#define glXSwapIntervalSGI(interval) glatter_glXSwapIntervalSGI((interval))
#endif
GLATTER_UBLOCK(int, , glXSwapIntervalSGI, (int interval))
#endif // defined(GLX_SGI_swap_control)
#if defined(GLX_SGI_video_sync)
#ifndef glXGetVideoSyncSGI
#define glXGetVideoSyncSGI(count) glatter_glXGetVideoSyncSGI((count))
#endif
GLATTER_UBLOCK(int, , glXGetVideoSyncSGI, (unsigned int *count))
#ifndef glXWaitVideoSyncSGI
#define glXWaitVideoSyncSGI(divisor, remainder, count) glatter_glXWaitVideoSyncSGI((divisor), (remainder), (count))
#endif
GLATTER_UBLOCK(int, , glXWaitVideoSyncSGI, (int divisor, int remainder, unsigned int *count))
#endif // defined(GLX_SGI_video_sync)
#if defined(GLX_SUN_get_transparent_index)
#ifndef glXGetTransparentIndexSUN
#define glXGetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex) glatter_glXGetTransparentIndexSUN((dpy), (overlay), (underlay), (pTransparentIndex))
#endif
GLATTER_UBLOCK(Status, , glXGetTransparentIndexSUN, (Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex))
#endif // defined(GLX_SUN_get_transparent_index)
#if defined(GLX_VERSION_1_3)
#ifndef glXChooseFBConfig
#define glXChooseFBConfig(dpy, screen, attrib_list, nelements) glatter_glXChooseFBConfig((dpy), (screen), (attrib_list), (nelements))
#endif
GLATTER_UBLOCK(GLXFBConfig *, , glXChooseFBConfig, (Display *dpy, int screen, const int *attrib_list, int *nelements))
#ifndef glXCreateNewContext
#define glXCreateNewContext(dpy, config, render_type, share_list, direct) glatter_glXCreateNewContext((dpy), (config), (render_type), (share_list), (direct))
#endif
GLATTER_UBLOCK(GLXContext, , glXCreateNewContext, (Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct))
#ifndef glXCreatePbuffer
#define glXCreatePbuffer(dpy, config, attrib_list) glatter_glXCreatePbuffer((dpy), (config), (attrib_list))
#endif
GLATTER_UBLOCK(GLXPbuffer, , glXCreatePbuffer, (Display *dpy, GLXFBConfig config, const int *attrib_list))
#ifndef glXCreatePixmap
#define glXCreatePixmap(dpy, config, pixmap, attrib_list) glatter_glXCreatePixmap((dpy), (config), (pixmap), (attrib_list))
#endif
GLATTER_UBLOCK(GLXPixmap, , glXCreatePixmap, (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list))
#ifndef glXCreateWindow
#define glXCreateWindow(dpy, config, win, attrib_list) glatter_glXCreateWindow((dpy), (config), (win), (attrib_list))
#endif
GLATTER_UBLOCK(GLXWindow, , glXCreateWindow, (Display *dpy, GLXFBConfig config, Window win, const int *attrib_list))
#ifndef glXDestroyPbuffer
#define glXDestroyPbuffer(dpy, pbuf) glatter_glXDestroyPbuffer((dpy), (pbuf))
#endif
GLATTER_UBLOCK(void, , glXDestroyPbuffer, (Display *dpy, GLXPbuffer pbuf))
#ifndef glXDestroyPixmap
#define glXDestroyPixmap(dpy, pixmap) glatter_glXDestroyPixmap((dpy), (pixmap))
#endif
GLATTER_UBLOCK(void, , glXDestroyPixmap, (Display *dpy, GLXPixmap pixmap))
#ifndef glXDestroyWindow
#define glXDestroyWindow(dpy, win) glatter_glXDestroyWindow((dpy), (win))
#endif
GLATTER_UBLOCK(void, , glXDestroyWindow, (Display *dpy, GLXWindow win))
#ifndef glXGetCurrentReadDrawable
#define glXGetCurrentReadDrawable() glatter_glXGetCurrentReadDrawable()
#endif
GLATTER_UBLOCK(GLXDrawable, , glXGetCurrentReadDrawable, (void))
#ifndef glXGetFBConfigAttrib
#define glXGetFBConfigAttrib(dpy, config, attribute, value) glatter_glXGetFBConfigAttrib((dpy), (config), (attribute), (value))
#endif
GLATTER_UBLOCK(int, , glXGetFBConfigAttrib, (Display *dpy, GLXFBConfig config, int attribute, int *value))
#ifndef glXGetFBConfigs
#define glXGetFBConfigs(dpy, screen, nelements) glatter_glXGetFBConfigs((dpy), (screen), (nelements))
#endif
GLATTER_UBLOCK(GLXFBConfig *, , glXGetFBConfigs, (Display *dpy, int screen, int *nelements))
#ifndef glXGetSelectedEvent
#define glXGetSelectedEvent(dpy, draw, event_mask) glatter_glXGetSelectedEvent((dpy), (draw), (event_mask))
#endif
GLATTER_UBLOCK(void, , glXGetSelectedEvent, (Display *dpy, GLXDrawable draw, unsigned long *event_mask))
#ifndef glXGetVisualFromFBConfig
#define glXGetVisualFromFBConfig(dpy, config) glatter_glXGetVisualFromFBConfig((dpy), (config))
#endif
GLATTER_UBLOCK(XVisualInfo *, , glXGetVisualFromFBConfig, (Display *dpy, GLXFBConfig config))
#ifndef glXMakeContextCurrent
#define glXMakeContextCurrent(dpy, draw, read, ctx) glatter_glXMakeContextCurrent((dpy), (draw), (read), (ctx))
#endif
GLATTER_UBLOCK(Bool, , glXMakeContextCurrent, (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx))
#ifndef glXQueryContext
#define glXQueryContext(dpy, ctx, attribute, value) glatter_glXQueryContext((dpy), (ctx), (attribute), (value))
#endif
GLATTER_UBLOCK(int, , glXQueryContext, (Display *dpy, GLXContext ctx, int attribute, int *value))
#ifndef glXQueryDrawable
#define glXQueryDrawable(dpy, draw, attribute, value) glatter_glXQueryDrawable((dpy), (draw), (attribute), (value))
#endif
GLATTER_UBLOCK(void, , glXQueryDrawable, (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value))
#ifndef glXSelectEvent
#define glXSelectEvent(dpy, draw, event_mask) glatter_glXSelectEvent((dpy), (draw), (event_mask))
#endif
GLATTER_UBLOCK(void, , glXSelectEvent, (Display *dpy, GLXDrawable draw, unsigned long event_mask))
#endif // defined(GLX_VERSION_1_3)
#if defined(GLX_VERSION_1_4)
#ifndef glXGetProcAddress
#define glXGetProcAddress(procName) glatter_glXGetProcAddress((procName))
#endif
GLATTER_UBLOCK(__GLXextFuncPtr, , glXGetProcAddress, (const GLubyte *procName))
#endif // defined(__glx_glxext_h_)
#endif // defined(GLX_VERSION_1_4)
#endif // GLATTER_GLX

