/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_GL
#if defined(__gl_glext_h_)
#if defined(GL_3DFX_tbuffer)
#ifndef glTbufferMask3DFX
#define glTbufferMask3DFX(mask) glatter_glTbufferMask3DFX((mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTbufferMask3DFX, (GLuint mask))
#endif // defined(GL_3DFX_tbuffer)
#if defined(GL_AMD_debug_output)
#ifndef glDebugMessageCallbackAMD
#define glDebugMessageCallbackAMD(callback, userParam) glatter_glDebugMessageCallbackAMD((callback), (userParam))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallbackAMD, (GLDEBUGPROCAMD callback, void *userParam))
#ifndef glDebugMessageEnableAMD
#define glDebugMessageEnableAMD(category, severity, count, ids, enabled) glatter_glDebugMessageEnableAMD((category), (severity), (count), (ids), (enabled))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageEnableAMD, (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#ifndef glDebugMessageInsertAMD
#define glDebugMessageInsertAMD(category, severity, id, length, buf) glatter_glDebugMessageInsertAMD((category), (severity), (id), (length), (buf))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsertAMD, (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf))
#ifndef glGetDebugMessageLogAMD
#define glGetDebugMessageLogAMD(count, bufSize, categories, severities, ids, lengths, message) glatter_glGetDebugMessageLogAMD((count), (bufSize), (categories), (severities), (ids), (lengths), (message))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLogAMD, (GLuint count, GLsizei bufSize, GLenum *categories, GLenum *severities, GLuint *ids, GLsizei *lengths, GLchar *message))
#endif // defined(GL_AMD_debug_output)
#if defined(GL_AMD_draw_buffers_blend)
#ifndef glBlendEquationIndexedAMD
#define glBlendEquationIndexedAMD(buf, mode) glatter_glBlendEquationIndexedAMD((buf), (mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationIndexedAMD, (GLuint buf, GLenum mode))
#ifndef glBlendEquationSeparateIndexedAMD
#define glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateIndexedAMD((buf), (modeRGB), (modeAlpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparateIndexedAMD, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#ifndef glBlendFuncIndexedAMD
#define glBlendFuncIndexedAMD(buf, src, dst) glatter_glBlendFuncIndexedAMD((buf), (src), (dst))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncIndexedAMD, (GLuint buf, GLenum src, GLenum dst))
#ifndef glBlendFuncSeparateIndexedAMD
#define glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateIndexedAMD((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateIndexedAMD, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#endif // defined(GL_AMD_draw_buffers_blend)
#if defined(GL_AMD_framebuffer_multisample_advanced)
#ifndef glNamedRenderbufferStorageMultisampleAdvancedAMD
#define glNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer, samples, storageSamples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleAdvancedAMD((renderbuffer), (samples), (storageSamples), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisampleAdvancedAMD, (GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glRenderbufferStorageMultisampleAdvancedAMD
#define glRenderbufferStorageMultisampleAdvancedAMD(target, samples, storageSamples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleAdvancedAMD((target), (samples), (storageSamples), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageMultisampleAdvancedAMD, (GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_AMD_framebuffer_multisample_advanced)
#if defined(GL_AMD_framebuffer_sample_positions)
#ifndef glFramebufferSamplePositionsfvAMD
#define glFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values) glatter_glFramebufferSamplePositionsfvAMD((target), (numsamples), (pixelindex), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferSamplePositionsfvAMD, (GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values))
#ifndef glGetFramebufferParameterfvAMD
#define glGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values) glatter_glGetFramebufferParameterfvAMD((target), (pname), (numsamples), (pixelindex), (size), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferParameterfvAMD, (GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values))
#ifndef glGetNamedFramebufferParameterfvAMD
#define glGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values) glatter_glGetNamedFramebufferParameterfvAMD((framebuffer), (pname), (numsamples), (pixelindex), (size), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferParameterfvAMD, (GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values))
#ifndef glNamedFramebufferSamplePositionsfvAMD
#define glNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values) glatter_glNamedFramebufferSamplePositionsfvAMD((framebuffer), (numsamples), (pixelindex), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferSamplePositionsfvAMD, (GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values))
#endif // defined(GL_AMD_framebuffer_sample_positions)
#if defined(GL_AMD_gpu_shader_int64)
#ifndef glGetUniformi64vNV
#define glGetUniformi64vNV(program, location, params) glatter_glGetUniformi64vNV((program), (location), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUniformi64vNV, (GLuint program, GLint location, GLint64EXT *params))
#ifndef glGetUniformui64vNV
#define glGetUniformui64vNV(program, location, params) glatter_glGetUniformui64vNV((program), (location), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUniformui64vNV, (GLuint program, GLint location, GLuint64EXT *params))
#ifndef glProgramUniform1i64NV
#define glProgramUniform1i64NV(program, location, x) glatter_glProgramUniform1i64NV((program), (location), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64NV, (GLuint program, GLint location, GLint64EXT x))
#ifndef glProgramUniform1i64vNV
#define glProgramUniform1i64vNV(program, location, count, value) glatter_glProgramUniform1i64vNV((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#ifndef glProgramUniform1ui64NV
#define glProgramUniform1ui64NV(program, location, x) glatter_glProgramUniform1ui64NV((program), (location), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64NV, (GLuint program, GLint location, GLuint64EXT x))
#ifndef glProgramUniform1ui64vNV
#define glProgramUniform1ui64vNV(program, location, count, value) glatter_glProgramUniform1ui64vNV((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#ifndef glProgramUniform2i64NV
#define glProgramUniform2i64NV(program, location, x, y) glatter_glProgramUniform2i64NV((program), (location), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y))
#ifndef glProgramUniform2i64vNV
#define glProgramUniform2i64vNV(program, location, count, value) glatter_glProgramUniform2i64vNV((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#ifndef glProgramUniform2ui64NV
#define glProgramUniform2ui64NV(program, location, x, y) glatter_glProgramUniform2ui64NV((program), (location), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y))
#ifndef glProgramUniform2ui64vNV
#define glProgramUniform2ui64vNV(program, location, count, value) glatter_glProgramUniform2ui64vNV((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#ifndef glProgramUniform3i64NV
#define glProgramUniform3i64NV(program, location, x, y, z) glatter_glProgramUniform3i64NV((program), (location), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#ifndef glProgramUniform3i64vNV
#define glProgramUniform3i64vNV(program, location, count, value) glatter_glProgramUniform3i64vNV((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#ifndef glProgramUniform3ui64NV
#define glProgramUniform3ui64NV(program, location, x, y, z) glatter_glProgramUniform3ui64NV((program), (location), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#ifndef glProgramUniform3ui64vNV
#define glProgramUniform3ui64vNV(program, location, count, value) glatter_glProgramUniform3ui64vNV((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#ifndef glProgramUniform4i64NV
#define glProgramUniform4i64NV(program, location, x, y, z, w) glatter_glProgramUniform4i64NV((program), (location), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#ifndef glProgramUniform4i64vNV
#define glProgramUniform4i64vNV(program, location, count, value) glatter_glProgramUniform4i64vNV((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#ifndef glProgramUniform4ui64NV
#define glProgramUniform4ui64NV(program, location, x, y, z, w) glatter_glProgramUniform4ui64NV((program), (location), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#ifndef glProgramUniform4ui64vNV
#define glProgramUniform4ui64vNV(program, location, count, value) glatter_glProgramUniform4ui64vNV((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#ifndef glUniform1i64NV
#define glUniform1i64NV(location, x) glatter_glUniform1i64NV((location), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64NV, (GLint location, GLint64EXT x))
#ifndef glUniform1i64vNV
#define glUniform1i64vNV(location, count, value) glatter_glUniform1i64vNV((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#ifndef glUniform1ui64NV
#define glUniform1ui64NV(location, x) glatter_glUniform1ui64NV((location), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64NV, (GLint location, GLuint64EXT x))
#ifndef glUniform1ui64vNV
#define glUniform1ui64vNV(location, count, value) glatter_glUniform1ui64vNV((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#ifndef glUniform2i64NV
#define glUniform2i64NV(location, x, y) glatter_glUniform2i64NV((location), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64NV, (GLint location, GLint64EXT x, GLint64EXT y))
#ifndef glUniform2i64vNV
#define glUniform2i64vNV(location, count, value) glatter_glUniform2i64vNV((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#ifndef glUniform2ui64NV
#define glUniform2ui64NV(location, x, y) glatter_glUniform2ui64NV((location), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y))
#ifndef glUniform2ui64vNV
#define glUniform2ui64vNV(location, count, value) glatter_glUniform2ui64vNV((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#ifndef glUniform3i64NV
#define glUniform3i64NV(location, x, y, z) glatter_glUniform3i64NV((location), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#ifndef glUniform3i64vNV
#define glUniform3i64vNV(location, count, value) glatter_glUniform3i64vNV((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#ifndef glUniform3ui64NV
#define glUniform3ui64NV(location, x, y, z) glatter_glUniform3ui64NV((location), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#ifndef glUniform3ui64vNV
#define glUniform3ui64vNV(location, count, value) glatter_glUniform3ui64vNV((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#ifndef glUniform4i64NV
#define glUniform4i64NV(location, x, y, z, w) glatter_glUniform4i64NV((location), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#ifndef glUniform4i64vNV
#define glUniform4i64vNV(location, count, value) glatter_glUniform4i64vNV((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#ifndef glUniform4ui64NV
#define glUniform4ui64NV(location, x, y, z, w) glatter_glUniform4ui64NV((location), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#ifndef glUniform4ui64vNV
#define glUniform4ui64vNV(location, count, value) glatter_glUniform4ui64vNV((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#endif // defined(GL_AMD_gpu_shader_int64)
#if defined(GL_AMD_interleaved_elements)
#ifndef glVertexAttribParameteriAMD
#define glVertexAttribParameteriAMD(index, pname, param) glatter_glVertexAttribParameteriAMD((index), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribParameteriAMD, (GLuint index, GLenum pname, GLint param))
#endif // defined(GL_AMD_interleaved_elements)
#if defined(GL_AMD_multi_draw_indirect)
#ifndef glMultiDrawArraysIndirectAMD
#define glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride) glatter_glMultiDrawArraysIndirectAMD((mode), (indirect), (primcount), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectAMD, (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride))
#ifndef glMultiDrawElementsIndirectAMD
#define glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride) glatter_glMultiDrawElementsIndirectAMD((mode), (type), (indirect), (primcount), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectAMD, (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride))
#endif // defined(GL_AMD_multi_draw_indirect)
#if defined(GL_AMD_name_gen_delete)
#ifndef glDeleteNamesAMD
#define glDeleteNamesAMD(identifier, num, names) glatter_glDeleteNamesAMD((identifier), (num), (names))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteNamesAMD, (GLenum identifier, GLuint num, const GLuint *names))
#ifndef glGenNamesAMD
#define glGenNamesAMD(identifier, num, names) glatter_glGenNamesAMD((identifier), (num), (names))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenNamesAMD, (GLenum identifier, GLuint num, GLuint *names))
#ifndef glIsNameAMD
#define glIsNameAMD(identifier, name) glatter_glIsNameAMD((identifier), (name))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsNameAMD, (GLenum identifier, GLuint name))
#endif // defined(GL_AMD_name_gen_delete)
#if defined(GL_AMD_occlusion_query_event)
#ifndef glQueryObjectParameteruiAMD
#define glQueryObjectParameteruiAMD(target, id, pname, param) glatter_glQueryObjectParameteruiAMD((target), (id), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glQueryObjectParameteruiAMD, (GLenum target, GLuint id, GLenum pname, GLuint param))
#endif // defined(GL_AMD_occlusion_query_event)
#if defined(GL_AMD_performance_monitor)
#ifndef glBeginPerfMonitorAMD
#define glBeginPerfMonitorAMD(monitor) glatter_glBeginPerfMonitorAMD((monitor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginPerfMonitorAMD, (GLuint monitor))
#ifndef glDeletePerfMonitorsAMD
#define glDeletePerfMonitorsAMD(n, monitors) glatter_glDeletePerfMonitorsAMD((n), (monitors))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeletePerfMonitorsAMD, (GLsizei n, GLuint *monitors))
#ifndef glEndPerfMonitorAMD
#define glEndPerfMonitorAMD(monitor) glatter_glEndPerfMonitorAMD((monitor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndPerfMonitorAMD, (GLuint monitor))
#ifndef glGenPerfMonitorsAMD
#define glGenPerfMonitorsAMD(n, monitors) glatter_glGenPerfMonitorsAMD((n), (monitors))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenPerfMonitorsAMD, (GLsizei n, GLuint *monitors))
#ifndef glGetPerfMonitorCounterDataAMD
#define glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) glatter_glGetPerfMonitorCounterDataAMD((monitor), (pname), (dataSize), (data), (bytesWritten))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterDataAMD, (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten))
#ifndef glGetPerfMonitorCounterInfoAMD
#define glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) glatter_glGetPerfMonitorCounterInfoAMD((group), (counter), (pname), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterInfoAMD, (GLuint group, GLuint counter, GLenum pname, void *data))
#ifndef glGetPerfMonitorCounterStringAMD
#define glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) glatter_glGetPerfMonitorCounterStringAMD((group), (counter), (bufSize), (length), (counterString))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterStringAMD, (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString))
#ifndef glGetPerfMonitorCountersAMD
#define glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) glatter_glGetPerfMonitorCountersAMD((group), (numCounters), (maxActiveCounters), (counterSize), (counters))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCountersAMD, (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters))
#ifndef glGetPerfMonitorGroupStringAMD
#define glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) glatter_glGetPerfMonitorGroupStringAMD((group), (bufSize), (length), (groupString))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorGroupStringAMD, (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString))
#ifndef glGetPerfMonitorGroupsAMD
#define glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) glatter_glGetPerfMonitorGroupsAMD((numGroups), (groupsSize), (groups))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorGroupsAMD, (GLint *numGroups, GLsizei groupsSize, GLuint *groups))
#ifndef glSelectPerfMonitorCountersAMD
#define glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) glatter_glSelectPerfMonitorCountersAMD((monitor), (enable), (group), (numCounters), (counterList))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSelectPerfMonitorCountersAMD, (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList))
#endif // defined(GL_AMD_performance_monitor)
#if defined(GL_AMD_sample_positions)
#ifndef glSetMultisamplefvAMD
#define glSetMultisamplefvAMD(pname, index, val) glatter_glSetMultisamplefvAMD((pname), (index), (val))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSetMultisamplefvAMD, (GLenum pname, GLuint index, const GLfloat *val))
#endif // defined(GL_AMD_sample_positions)
#if defined(GL_AMD_sparse_texture)
#ifndef glTexStorageSparseAMD
#define glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags) glatter_glTexStorageSparseAMD((target), (internalFormat), (width), (height), (depth), (layers), (flags))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexStorageSparseAMD, (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags))
#ifndef glTextureStorageSparseAMD
#define glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags) glatter_glTextureStorageSparseAMD((texture), (target), (internalFormat), (width), (height), (depth), (layers), (flags))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorageSparseAMD, (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags))
#endif // defined(GL_AMD_sparse_texture)
#if defined(GL_AMD_stencil_operation_extended)
#ifndef glStencilOpValueAMD
#define glStencilOpValueAMD(face, value) glatter_glStencilOpValueAMD((face), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilOpValueAMD, (GLenum face, GLuint value))
#endif // defined(GL_AMD_stencil_operation_extended)
#if defined(GL_AMD_vertex_shader_tessellator)
#ifndef glTessellationFactorAMD
#define glTessellationFactorAMD(factor) glatter_glTessellationFactorAMD((factor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTessellationFactorAMD, (GLfloat factor))
#ifndef glTessellationModeAMD
#define glTessellationModeAMD(mode) glatter_glTessellationModeAMD((mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTessellationModeAMD, (GLenum mode))
#endif // defined(GL_AMD_vertex_shader_tessellator)
#if defined(GL_APPLE_element_array)
#ifndef glDrawElementArrayAPPLE
#define glDrawElementArrayAPPLE(mode, first, count) glatter_glDrawElementArrayAPPLE((mode), (first), (count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawElementArrayAPPLE, (GLenum mode, GLint first, GLsizei count))
#ifndef glDrawRangeElementArrayAPPLE
#define glDrawRangeElementArrayAPPLE(mode, start, end, first, count) glatter_glDrawRangeElementArrayAPPLE((mode), (start), (end), (first), (count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementArrayAPPLE, (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count))
#ifndef glElementPointerAPPLE
#define glElementPointerAPPLE(type, pointer) glatter_glElementPointerAPPLE((type), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glElementPointerAPPLE, (GLenum type, const void *pointer))
#ifndef glMultiDrawElementArrayAPPLE
#define glMultiDrawElementArrayAPPLE(mode, first, count, primcount) glatter_glMultiDrawElementArrayAPPLE((mode), (first), (count), (primcount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementArrayAPPLE, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount))
#ifndef glMultiDrawRangeElementArrayAPPLE
#define glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount) glatter_glMultiDrawRangeElementArrayAPPLE((mode), (start), (end), (first), (count), (primcount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawRangeElementArrayAPPLE, (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount))
#endif // defined(GL_APPLE_element_array)
#if defined(GL_APPLE_fence)
#ifndef glDeleteFencesAPPLE
#define glDeleteFencesAPPLE(n, fences) glatter_glDeleteFencesAPPLE((n), (fences))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteFencesAPPLE, (GLsizei n, const GLuint *fences))
#ifndef glFinishFenceAPPLE
#define glFinishFenceAPPLE(fence) glatter_glFinishFenceAPPLE((fence))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFinishFenceAPPLE, (GLuint fence))
#ifndef glFinishObjectAPPLE
#define glFinishObjectAPPLE(object, name) glatter_glFinishObjectAPPLE((object), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFinishObjectAPPLE, (GLenum object, GLint name))
#ifndef glGenFencesAPPLE
#define glGenFencesAPPLE(n, fences) glatter_glGenFencesAPPLE((n), (fences))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenFencesAPPLE, (GLsizei n, GLuint *fences))
#ifndef glIsFenceAPPLE
#define glIsFenceAPPLE(fence) glatter_glIsFenceAPPLE((fence))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFenceAPPLE, (GLuint fence))
#ifndef glSetFenceAPPLE
#define glSetFenceAPPLE(fence) glatter_glSetFenceAPPLE((fence))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSetFenceAPPLE, (GLuint fence))
#ifndef glTestFenceAPPLE
#define glTestFenceAPPLE(fence) glatter_glTestFenceAPPLE((fence))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glTestFenceAPPLE, (GLuint fence))
#ifndef glTestObjectAPPLE
#define glTestObjectAPPLE(object, name) glatter_glTestObjectAPPLE((object), (name))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glTestObjectAPPLE, (GLenum object, GLuint name))
#endif // defined(GL_APPLE_fence)
#if defined(GL_APPLE_flush_buffer_range)
#ifndef glBufferParameteriAPPLE
#define glBufferParameteriAPPLE(target, pname, param) glatter_glBufferParameteriAPPLE((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBufferParameteriAPPLE, (GLenum target, GLenum pname, GLint param))
#ifndef glFlushMappedBufferRangeAPPLE
#define glFlushMappedBufferRangeAPPLE(target, offset, size) glatter_glFlushMappedBufferRangeAPPLE((target), (offset), (size))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedBufferRangeAPPLE, (GLenum target, GLintptr offset, GLsizeiptr size))
#endif // defined(GL_APPLE_flush_buffer_range)
#if defined(GL_APPLE_object_purgeable)
#ifndef glGetObjectParameterivAPPLE
#define glGetObjectParameterivAPPLE(objectType, name, pname, params) glatter_glGetObjectParameterivAPPLE((objectType), (name), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetObjectParameterivAPPLE, (GLenum objectType, GLuint name, GLenum pname, GLint *params))
#ifndef glObjectPurgeableAPPLE
#define glObjectPurgeableAPPLE(objectType, name, option) glatter_glObjectPurgeableAPPLE((objectType), (name), (option))
#endif
GLATTER_UBLOCK(GLenum, APIENTRY, glObjectPurgeableAPPLE, (GLenum objectType, GLuint name, GLenum option))
#ifndef glObjectUnpurgeableAPPLE
#define glObjectUnpurgeableAPPLE(objectType, name, option) glatter_glObjectUnpurgeableAPPLE((objectType), (name), (option))
#endif
GLATTER_UBLOCK(GLenum, APIENTRY, glObjectUnpurgeableAPPLE, (GLenum objectType, GLuint name, GLenum option))
#endif // defined(GL_APPLE_object_purgeable)
#if defined(GL_APPLE_texture_range)
#ifndef glGetTexParameterPointervAPPLE
#define glGetTexParameterPointervAPPLE(target, pname, params) glatter_glGetTexParameterPointervAPPLE((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterPointervAPPLE, (GLenum target, GLenum pname, void **params))
#ifndef glTextureRangeAPPLE
#define glTextureRangeAPPLE(target, length, pointer) glatter_glTextureRangeAPPLE((target), (length), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureRangeAPPLE, (GLenum target, GLsizei length, const void *pointer))
#endif // defined(GL_APPLE_texture_range)
#if defined(GL_APPLE_vertex_array_object)
#ifndef glBindVertexArrayAPPLE
#define glBindVertexArrayAPPLE(array) glatter_glBindVertexArrayAPPLE((array))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindVertexArrayAPPLE, (GLuint array))
#ifndef glDeleteVertexArraysAPPLE
#define glDeleteVertexArraysAPPLE(n, arrays) glatter_glDeleteVertexArraysAPPLE((n), (arrays))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteVertexArraysAPPLE, (GLsizei n, const GLuint *arrays))
#ifndef glGenVertexArraysAPPLE
#define glGenVertexArraysAPPLE(n, arrays) glatter_glGenVertexArraysAPPLE((n), (arrays))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenVertexArraysAPPLE, (GLsizei n, GLuint *arrays))
#ifndef glIsVertexArrayAPPLE
#define glIsVertexArrayAPPLE(array) glatter_glIsVertexArrayAPPLE((array))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVertexArrayAPPLE, (GLuint array))
#endif // defined(GL_APPLE_vertex_array_object)
#if defined(GL_APPLE_vertex_array_range)
#ifndef glFlushVertexArrayRangeAPPLE
#define glFlushVertexArrayRangeAPPLE(length, pointer) glatter_glFlushVertexArrayRangeAPPLE((length), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFlushVertexArrayRangeAPPLE, (GLsizei length, void *pointer))
#ifndef glVertexArrayParameteriAPPLE
#define glVertexArrayParameteriAPPLE(pname, param) glatter_glVertexArrayParameteriAPPLE((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayParameteriAPPLE, (GLenum pname, GLint param))
#ifndef glVertexArrayRangeAPPLE
#define glVertexArrayRangeAPPLE(length, pointer) glatter_glVertexArrayRangeAPPLE((length), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayRangeAPPLE, (GLsizei length, void *pointer))
#endif // defined(GL_APPLE_vertex_array_range)
#if defined(GL_APPLE_vertex_program_evaluators)
#ifndef glDisableVertexAttribAPPLE
#define glDisableVertexAttribAPPLE(index, pname) glatter_glDisableVertexAttribAPPLE((index), (pname))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexAttribAPPLE, (GLuint index, GLenum pname))
#ifndef glEnableVertexAttribAPPLE
#define glEnableVertexAttribAPPLE(index, pname) glatter_glEnableVertexAttribAPPLE((index), (pname))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexAttribAPPLE, (GLuint index, GLenum pname))
#ifndef glIsVertexAttribEnabledAPPLE
#define glIsVertexAttribEnabledAPPLE(index, pname) glatter_glIsVertexAttribEnabledAPPLE((index), (pname))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVertexAttribEnabledAPPLE, (GLuint index, GLenum pname))
#ifndef glMapVertexAttrib1dAPPLE
#define glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points) glatter_glMapVertexAttrib1dAPPLE((index), (size), (u1), (u2), (stride), (order), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMapVertexAttrib1dAPPLE, (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points))
#ifndef glMapVertexAttrib1fAPPLE
#define glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points) glatter_glMapVertexAttrib1fAPPLE((index), (size), (u1), (u2), (stride), (order), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMapVertexAttrib1fAPPLE, (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points))
#ifndef glMapVertexAttrib2dAPPLE
#define glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMapVertexAttrib2dAPPLE((index), (size), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMapVertexAttrib2dAPPLE, (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points))
#ifndef glMapVertexAttrib2fAPPLE
#define glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMapVertexAttrib2fAPPLE((index), (size), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMapVertexAttrib2fAPPLE, (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points))
#endif // defined(GL_APPLE_vertex_program_evaluators)
#if defined(GL_ARB_ES3_2_compatibility)
#ifndef glPrimitiveBoundingBoxARB
#define glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxARB((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveBoundingBoxARB, (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW))
#endif // defined(GL_ARB_ES3_2_compatibility)
#if defined(GL_ARB_bindless_texture)
#ifndef glGetImageHandleARB
#define glGetImageHandleARB(texture, level, layered, layer, format) glatter_glGetImageHandleARB((texture), (level), (layered), (layer), (format))
#endif
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetImageHandleARB, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format))
#ifndef glGetTextureHandleARB
#define glGetTextureHandleARB(texture) glatter_glGetTextureHandleARB((texture))
#endif
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureHandleARB, (GLuint texture))
#ifndef glGetTextureSamplerHandleARB
#define glGetTextureSamplerHandleARB(texture, sampler) glatter_glGetTextureSamplerHandleARB((texture), (sampler))
#endif
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureSamplerHandleARB, (GLuint texture, GLuint sampler))
#ifndef glGetVertexAttribLui64vARB
#define glGetVertexAttribLui64vARB(index, pname, params) glatter_glGetVertexAttribLui64vARB((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLui64vARB, (GLuint index, GLenum pname, GLuint64EXT *params))
#ifndef glIsImageHandleResidentARB
#define glIsImageHandleResidentARB(handle) glatter_glIsImageHandleResidentARB((handle))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsImageHandleResidentARB, (GLuint64 handle))
#ifndef glIsTextureHandleResidentARB
#define glIsTextureHandleResidentARB(handle) glatter_glIsTextureHandleResidentARB((handle))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTextureHandleResidentARB, (GLuint64 handle))
#ifndef glMakeImageHandleNonResidentARB
#define glMakeImageHandleNonResidentARB(handle) glatter_glMakeImageHandleNonResidentARB((handle))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleNonResidentARB, (GLuint64 handle))
#ifndef glMakeImageHandleResidentARB
#define glMakeImageHandleResidentARB(handle, access) glatter_glMakeImageHandleResidentARB((handle), (access))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleResidentARB, (GLuint64 handle, GLenum access))
#ifndef glMakeTextureHandleNonResidentARB
#define glMakeTextureHandleNonResidentARB(handle) glatter_glMakeTextureHandleNonResidentARB((handle))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleNonResidentARB, (GLuint64 handle))
#ifndef glMakeTextureHandleResidentARB
#define glMakeTextureHandleResidentARB(handle) glatter_glMakeTextureHandleResidentARB((handle))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleResidentARB, (GLuint64 handle))
#ifndef glProgramUniformHandleui64ARB
#define glProgramUniformHandleui64ARB(program, location, value) glatter_glProgramUniformHandleui64ARB((program), (location), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64ARB, (GLuint program, GLint location, GLuint64 value))
#ifndef glProgramUniformHandleui64vARB
#define glProgramUniformHandleui64vARB(program, location, count, values) glatter_glProgramUniformHandleui64vARB((program), (location), (count), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#ifndef glUniformHandleui64ARB
#define glUniformHandleui64ARB(location, value) glatter_glUniformHandleui64ARB((location), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64ARB, (GLint location, GLuint64 value))
#ifndef glUniformHandleui64vARB
#define glUniformHandleui64vARB(location, count, value) glatter_glUniformHandleui64vARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#ifndef glVertexAttribL1ui64ARB
#define glVertexAttribL1ui64ARB(index, x) glatter_glVertexAttribL1ui64ARB((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64ARB, (GLuint index, GLuint64EXT x))
#ifndef glVertexAttribL1ui64vARB
#define glVertexAttribL1ui64vARB(index, v) glatter_glVertexAttribL1ui64vARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64vARB, (GLuint index, const GLuint64EXT *v))
#endif // defined(GL_ARB_bindless_texture)
#if defined(GL_ARB_cl_event)
#ifndef glCreateSyncFromCLeventARB
#define glCreateSyncFromCLeventARB(context, event, flags) glatter_glCreateSyncFromCLeventARB((context), (event), (flags))
#endif
GLATTER_UBLOCK(GLsync, APIENTRY, glCreateSyncFromCLeventARB, (struct _cl_context *context, struct _cl_event *event, GLbitfield flags))
#endif // defined(GL_ARB_cl_event)
#if defined(GL_ARB_color_buffer_float)
#ifndef glClampColorARB
#define glClampColorARB(target, clamp) glatter_glClampColorARB((target), (clamp))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClampColorARB, (GLenum target, GLenum clamp))
#endif // defined(GL_ARB_color_buffer_float)
#if defined(GL_ARB_compute_variable_group_size)
#ifndef glDispatchComputeGroupSizeARB
#define glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) glatter_glDispatchComputeGroupSizeARB((num_groups_x), (num_groups_y), (num_groups_z), (group_size_x), (group_size_y), (group_size_z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDispatchComputeGroupSizeARB, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z))
#endif // defined(GL_ARB_compute_variable_group_size)
#if defined(GL_ARB_debug_output)
#ifndef glDebugMessageCallbackARB
#define glDebugMessageCallbackARB(callback, userParam) glatter_glDebugMessageCallbackARB((callback), (userParam))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallbackARB, (GLDEBUGPROCARB callback, const void *userParam))
#ifndef glDebugMessageControlARB
#define glDebugMessageControlARB(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlARB((source), (type), (severity), (count), (ids), (enabled))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageControlARB, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#ifndef glDebugMessageInsertARB
#define glDebugMessageInsertARB(source, type, id, severity, length, buf) glatter_glDebugMessageInsertARB((source), (type), (id), (severity), (length), (buf))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsertARB, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#ifndef glGetDebugMessageLogARB
#define glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogARB((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLogARB, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#endif // defined(GL_ARB_debug_output)
#if defined(GL_ARB_draw_buffers)
#ifndef glDrawBuffersARB
#define glDrawBuffersARB(n, bufs) glatter_glDrawBuffersARB((n), (bufs))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffersARB, (GLsizei n, const GLenum *bufs))
#endif // defined(GL_ARB_draw_buffers)
#if defined(GL_ARB_draw_buffers_blend)
#ifndef glBlendEquationSeparateiARB
#define glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiARB((buf), (modeRGB), (modeAlpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparateiARB, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#ifndef glBlendEquationiARB
#define glBlendEquationiARB(buf, mode) glatter_glBlendEquationiARB((buf), (mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationiARB, (GLuint buf, GLenum mode))
#ifndef glBlendFuncSeparateiARB
#define glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiARB((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateiARB, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#ifndef glBlendFunciARB
#define glBlendFunciARB(buf, src, dst) glatter_glBlendFunciARB((buf), (src), (dst))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendFunciARB, (GLuint buf, GLenum src, GLenum dst))
#endif // defined(GL_ARB_draw_buffers_blend)
#if defined(GL_ARB_draw_instanced)
#ifndef glDrawArraysInstancedARB
#define glDrawArraysInstancedARB(mode, first, count, primcount) glatter_glDrawArraysInstancedARB((mode), (first), (count), (primcount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedARB, (GLenum mode, GLint first, GLsizei count, GLsizei primcount))
#ifndef glDrawElementsInstancedARB
#define glDrawElementsInstancedARB(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedARB((mode), (count), (type), (indices), (primcount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedARB, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#endif // defined(GL_ARB_draw_instanced)
#if defined(GL_ARB_fragment_program)
#ifndef glBindProgramARB
#define glBindProgramARB(target, program) glatter_glBindProgramARB((target), (program))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindProgramARB, (GLenum target, GLuint program))
#ifndef glDeleteProgramsARB
#define glDeleteProgramsARB(n, programs) glatter_glDeleteProgramsARB((n), (programs))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgramsARB, (GLsizei n, const GLuint *programs))
#ifndef glGenProgramsARB
#define glGenProgramsARB(n, programs) glatter_glGenProgramsARB((n), (programs))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenProgramsARB, (GLsizei n, GLuint *programs))
#ifndef glGetProgramEnvParameterdvARB
#define glGetProgramEnvParameterdvARB(target, index, params) glatter_glGetProgramEnvParameterdvARB((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramEnvParameterdvARB, (GLenum target, GLuint index, GLdouble *params))
#ifndef glGetProgramEnvParameterfvARB
#define glGetProgramEnvParameterfvARB(target, index, params) glatter_glGetProgramEnvParameterfvARB((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramEnvParameterfvARB, (GLenum target, GLuint index, GLfloat *params))
#ifndef glGetProgramLocalParameterdvARB
#define glGetProgramLocalParameterdvARB(target, index, params) glatter_glGetProgramLocalParameterdvARB((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramLocalParameterdvARB, (GLenum target, GLuint index, GLdouble *params))
#ifndef glGetProgramLocalParameterfvARB
#define glGetProgramLocalParameterfvARB(target, index, params) glatter_glGetProgramLocalParameterfvARB((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramLocalParameterfvARB, (GLenum target, GLuint index, GLfloat *params))
#ifndef glGetProgramStringARB
#define glGetProgramStringARB(target, pname, string) glatter_glGetProgramStringARB((target), (pname), (string))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramStringARB, (GLenum target, GLenum pname, void *string))
#ifndef glGetProgramivARB
#define glGetProgramivARB(target, pname, params) glatter_glGetProgramivARB((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramivARB, (GLenum target, GLenum pname, GLint *params))
#ifndef glIsProgramARB
#define glIsProgramARB(program) glatter_glIsProgramARB((program))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgramARB, (GLuint program))
#ifndef glProgramEnvParameter4dARB
#define glProgramEnvParameter4dARB(target, index, x, y, z, w) glatter_glProgramEnvParameter4dARB((target), (index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameter4dARB, (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#ifndef glProgramEnvParameter4dvARB
#define glProgramEnvParameter4dvARB(target, index, params) glatter_glProgramEnvParameter4dvARB((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameter4dvARB, (GLenum target, GLuint index, const GLdouble *params))
#ifndef glProgramEnvParameter4fARB
#define glProgramEnvParameter4fARB(target, index, x, y, z, w) glatter_glProgramEnvParameter4fARB((target), (index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameter4fARB, (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#ifndef glProgramEnvParameter4fvARB
#define glProgramEnvParameter4fvARB(target, index, params) glatter_glProgramEnvParameter4fvARB((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameter4fvARB, (GLenum target, GLuint index, const GLfloat *params))
#ifndef glProgramLocalParameter4dARB
#define glProgramLocalParameter4dARB(target, index, x, y, z, w) glatter_glProgramLocalParameter4dARB((target), (index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameter4dARB, (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#ifndef glProgramLocalParameter4dvARB
#define glProgramLocalParameter4dvARB(target, index, params) glatter_glProgramLocalParameter4dvARB((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameter4dvARB, (GLenum target, GLuint index, const GLdouble *params))
#ifndef glProgramLocalParameter4fARB
#define glProgramLocalParameter4fARB(target, index, x, y, z, w) glatter_glProgramLocalParameter4fARB((target), (index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameter4fARB, (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#ifndef glProgramLocalParameter4fvARB
#define glProgramLocalParameter4fvARB(target, index, params) glatter_glProgramLocalParameter4fvARB((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameter4fvARB, (GLenum target, GLuint index, const GLfloat *params))
#ifndef glProgramStringARB
#define glProgramStringARB(target, format, len, string) glatter_glProgramStringARB((target), (format), (len), (string))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramStringARB, (GLenum target, GLenum format, GLsizei len, const void *string))
#endif // defined(GL_ARB_fragment_program)
#if defined(GL_ARB_geometry_shader4)
#ifndef glFramebufferTextureARB
#define glFramebufferTextureARB(target, attachment, texture, level) glatter_glFramebufferTextureARB((target), (attachment), (texture), (level))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureARB, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#ifndef glFramebufferTextureFaceARB
#define glFramebufferTextureFaceARB(target, attachment, texture, level, face) glatter_glFramebufferTextureFaceARB((target), (attachment), (texture), (level), (face))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureFaceARB, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face))
#ifndef glFramebufferTextureLayerARB
#define glFramebufferTextureLayerARB(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayerARB((target), (attachment), (texture), (level), (layer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureLayerARB, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#ifndef glProgramParameteriARB
#define glProgramParameteriARB(program, pname, value) glatter_glProgramParameteriARB((program), (pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramParameteriARB, (GLuint program, GLenum pname, GLint value))
#endif // defined(GL_ARB_geometry_shader4)
#if defined(GL_ARB_gl_spirv)
#ifndef glSpecializeShaderARB
#define glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) glatter_glSpecializeShaderARB((shader), (pEntryPoint), (numSpecializationConstants), (pConstantIndex), (pConstantValue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSpecializeShaderARB, (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue))
#endif // defined(GL_ARB_gl_spirv)
#if defined(GL_ARB_gpu_shader_int64)
#ifndef glGetUniformi64vARB
#define glGetUniformi64vARB(program, location, params) glatter_glGetUniformi64vARB((program), (location), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUniformi64vARB, (GLuint program, GLint location, GLint64 *params))
#ifndef glGetUniformui64vARB
#define glGetUniformui64vARB(program, location, params) glatter_glGetUniformui64vARB((program), (location), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUniformui64vARB, (GLuint program, GLint location, GLuint64 *params))
#ifndef glGetnUniformi64vARB
#define glGetnUniformi64vARB(program, location, bufSize, params) glatter_glGetnUniformi64vARB((program), (location), (bufSize), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformi64vARB, (GLuint program, GLint location, GLsizei bufSize, GLint64 *params))
#ifndef glGetnUniformui64vARB
#define glGetnUniformui64vARB(program, location, bufSize, params) glatter_glGetnUniformui64vARB((program), (location), (bufSize), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformui64vARB, (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params))
#ifndef glProgramUniform1i64ARB
#define glProgramUniform1i64ARB(program, location, x) glatter_glProgramUniform1i64ARB((program), (location), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64ARB, (GLuint program, GLint location, GLint64 x))
#ifndef glProgramUniform1i64vARB
#define glProgramUniform1i64vARB(program, location, count, value) glatter_glProgramUniform1i64vARB((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#ifndef glProgramUniform1ui64ARB
#define glProgramUniform1ui64ARB(program, location, x) glatter_glProgramUniform1ui64ARB((program), (location), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64ARB, (GLuint program, GLint location, GLuint64 x))
#ifndef glProgramUniform1ui64vARB
#define glProgramUniform1ui64vARB(program, location, count, value) glatter_glProgramUniform1ui64vARB((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#ifndef glProgramUniform2i64ARB
#define glProgramUniform2i64ARB(program, location, x, y) glatter_glProgramUniform2i64ARB((program), (location), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y))
#ifndef glProgramUniform2i64vARB
#define glProgramUniform2i64vARB(program, location, count, value) glatter_glProgramUniform2i64vARB((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#ifndef glProgramUniform2ui64ARB
#define glProgramUniform2ui64ARB(program, location, x, y) glatter_glProgramUniform2ui64ARB((program), (location), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y))
#ifndef glProgramUniform2ui64vARB
#define glProgramUniform2ui64vARB(program, location, count, value) glatter_glProgramUniform2ui64vARB((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#ifndef glProgramUniform3i64ARB
#define glProgramUniform3i64ARB(program, location, x, y, z) glatter_glProgramUniform3i64ARB((program), (location), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z))
#ifndef glProgramUniform3i64vARB
#define glProgramUniform3i64vARB(program, location, count, value) glatter_glProgramUniform3i64vARB((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#ifndef glProgramUniform3ui64ARB
#define glProgramUniform3ui64ARB(program, location, x, y, z) glatter_glProgramUniform3ui64ARB((program), (location), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z))
#ifndef glProgramUniform3ui64vARB
#define glProgramUniform3ui64vARB(program, location, count, value) glatter_glProgramUniform3ui64vARB((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#ifndef glProgramUniform4i64ARB
#define glProgramUniform4i64ARB(program, location, x, y, z, w) glatter_glProgramUniform4i64ARB((program), (location), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w))
#ifndef glProgramUniform4i64vARB
#define glProgramUniform4i64vARB(program, location, count, value) glatter_glProgramUniform4i64vARB((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#ifndef glProgramUniform4ui64ARB
#define glProgramUniform4ui64ARB(program, location, x, y, z, w) glatter_glProgramUniform4ui64ARB((program), (location), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w))
#ifndef glProgramUniform4ui64vARB
#define glProgramUniform4ui64vARB(program, location, count, value) glatter_glProgramUniform4ui64vARB((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#ifndef glUniform1i64ARB
#define glUniform1i64ARB(location, x) glatter_glUniform1i64ARB((location), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64ARB, (GLint location, GLint64 x))
#ifndef glUniform1i64vARB
#define glUniform1i64vARB(location, count, value) glatter_glUniform1i64vARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#ifndef glUniform1ui64ARB
#define glUniform1ui64ARB(location, x) glatter_glUniform1ui64ARB((location), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64ARB, (GLint location, GLuint64 x))
#ifndef glUniform1ui64vARB
#define glUniform1ui64vARB(location, count, value) glatter_glUniform1ui64vARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#ifndef glUniform2i64ARB
#define glUniform2i64ARB(location, x, y) glatter_glUniform2i64ARB((location), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64ARB, (GLint location, GLint64 x, GLint64 y))
#ifndef glUniform2i64vARB
#define glUniform2i64vARB(location, count, value) glatter_glUniform2i64vARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#ifndef glUniform2ui64ARB
#define glUniform2ui64ARB(location, x, y) glatter_glUniform2ui64ARB((location), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64ARB, (GLint location, GLuint64 x, GLuint64 y))
#ifndef glUniform2ui64vARB
#define glUniform2ui64vARB(location, count, value) glatter_glUniform2ui64vARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#ifndef glUniform3i64ARB
#define glUniform3i64ARB(location, x, y, z) glatter_glUniform3i64ARB((location), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64ARB, (GLint location, GLint64 x, GLint64 y, GLint64 z))
#ifndef glUniform3i64vARB
#define glUniform3i64vARB(location, count, value) glatter_glUniform3i64vARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#ifndef glUniform3ui64ARB
#define glUniform3ui64ARB(location, x, y, z) glatter_glUniform3ui64ARB((location), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64ARB, (GLint location, GLuint64 x, GLuint64 y, GLuint64 z))
#ifndef glUniform3ui64vARB
#define glUniform3ui64vARB(location, count, value) glatter_glUniform3ui64vARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#ifndef glUniform4i64ARB
#define glUniform4i64ARB(location, x, y, z, w) glatter_glUniform4i64ARB((location), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64ARB, (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w))
#ifndef glUniform4i64vARB
#define glUniform4i64vARB(location, count, value) glatter_glUniform4i64vARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#ifndef glUniform4ui64ARB
#define glUniform4ui64ARB(location, x, y, z, w) glatter_glUniform4ui64ARB((location), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64ARB, (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w))
#ifndef glUniform4ui64vARB
#define glUniform4ui64vARB(location, count, value) glatter_glUniform4ui64vARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#endif // defined(GL_ARB_gpu_shader_int64)
#if defined(GL_ARB_imaging)
#ifndef glColorSubTable
#define glColorSubTable(target, start, count, format, type, data) glatter_glColorSubTable((target), (start), (count), (format), (type), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorSubTable, (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data))
#ifndef glColorTable
#define glColorTable(target, internalformat, width, format, type, table) glatter_glColorTable((target), (internalformat), (width), (format), (type), (table))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorTable, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table))
#ifndef glColorTableParameterfv
#define glColorTableParameterfv(target, pname, params) glatter_glColorTableParameterfv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorTableParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#ifndef glColorTableParameteriv
#define glColorTableParameteriv(target, pname, params) glatter_glColorTableParameteriv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorTableParameteriv, (GLenum target, GLenum pname, const GLint *params))
#ifndef glConvolutionFilter1D
#define glConvolutionFilter1D(target, internalformat, width, format, type, image) glatter_glConvolutionFilter1D((target), (internalformat), (width), (format), (type), (image))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConvolutionFilter1D, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image))
#ifndef glConvolutionFilter2D
#define glConvolutionFilter2D(target, internalformat, width, height, format, type, image) glatter_glConvolutionFilter2D((target), (internalformat), (width), (height), (format), (type), (image))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConvolutionFilter2D, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image))
#ifndef glConvolutionParameterf
#define glConvolutionParameterf(target, pname, params) glatter_glConvolutionParameterf((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterf, (GLenum target, GLenum pname, GLfloat params))
#ifndef glConvolutionParameterfv
#define glConvolutionParameterfv(target, pname, params) glatter_glConvolutionParameterfv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#ifndef glConvolutionParameteri
#define glConvolutionParameteri(target, pname, params) glatter_glConvolutionParameteri((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameteri, (GLenum target, GLenum pname, GLint params))
#ifndef glConvolutionParameteriv
#define glConvolutionParameteriv(target, pname, params) glatter_glConvolutionParameteriv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameteriv, (GLenum target, GLenum pname, const GLint *params))
#ifndef glCopyColorSubTable
#define glCopyColorSubTable(target, start, x, y, width) glatter_glCopyColorSubTable((target), (start), (x), (y), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyColorSubTable, (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width))
#ifndef glCopyColorTable
#define glCopyColorTable(target, internalformat, x, y, width) glatter_glCopyColorTable((target), (internalformat), (x), (y), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyColorTable, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#ifndef glCopyConvolutionFilter1D
#define glCopyConvolutionFilter1D(target, internalformat, x, y, width) glatter_glCopyConvolutionFilter1D((target), (internalformat), (x), (y), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyConvolutionFilter1D, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#ifndef glCopyConvolutionFilter2D
#define glCopyConvolutionFilter2D(target, internalformat, x, y, width, height) glatter_glCopyConvolutionFilter2D((target), (internalformat), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyConvolutionFilter2D, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height))
#ifndef glGetColorTable
#define glGetColorTable(target, format, type, table) glatter_glGetColorTable((target), (format), (type), (table))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetColorTable, (GLenum target, GLenum format, GLenum type, void *table))
#ifndef glGetColorTableParameterfv
#define glGetColorTableParameterfv(target, pname, params) glatter_glGetColorTableParameterfv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetColorTableParameteriv
#define glGetColorTableParameteriv(target, pname, params) glatter_glGetColorTableParameteriv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameteriv, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetConvolutionFilter
#define glGetConvolutionFilter(target, format, type, image) glatter_glGetConvolutionFilter((target), (format), (type), (image))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionFilter, (GLenum target, GLenum format, GLenum type, void *image))
#ifndef glGetConvolutionParameterfv
#define glGetConvolutionParameterfv(target, pname, params) glatter_glGetConvolutionParameterfv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetConvolutionParameteriv
#define glGetConvolutionParameteriv(target, pname, params) glatter_glGetConvolutionParameteriv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameteriv, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetHistogram
#define glGetHistogram(target, reset, format, type, values) glatter_glGetHistogram((target), (reset), (format), (type), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetHistogram, (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values))
#ifndef glGetHistogramParameterfv
#define glGetHistogramParameterfv(target, pname, params) glatter_glGetHistogramParameterfv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetHistogramParameteriv
#define glGetHistogramParameteriv(target, pname, params) glatter_glGetHistogramParameteriv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameteriv, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetMinmax
#define glGetMinmax(target, reset, format, type, values) glatter_glGetMinmax((target), (reset), (format), (type), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMinmax, (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values))
#ifndef glGetMinmaxParameterfv
#define glGetMinmaxParameterfv(target, pname, params) glatter_glGetMinmaxParameterfv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetMinmaxParameteriv
#define glGetMinmaxParameteriv(target, pname, params) glatter_glGetMinmaxParameteriv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxParameteriv, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetSeparableFilter
#define glGetSeparableFilter(target, format, type, row, column, span) glatter_glGetSeparableFilter((target), (format), (type), (row), (column), (span))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetSeparableFilter, (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span))
#ifndef glHistogram
#define glHistogram(target, width, internalformat, sink) glatter_glHistogram((target), (width), (internalformat), (sink))
#endif
GLATTER_UBLOCK(void, APIENTRY, glHistogram, (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink))
#ifndef glMinmax
#define glMinmax(target, internalformat, sink) glatter_glMinmax((target), (internalformat), (sink))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMinmax, (GLenum target, GLenum internalformat, GLboolean sink))
#ifndef glResetHistogram
#define glResetHistogram(target) glatter_glResetHistogram((target))
#endif
GLATTER_UBLOCK(void, APIENTRY, glResetHistogram, (GLenum target))
#ifndef glResetMinmax
#define glResetMinmax(target) glatter_glResetMinmax((target))
#endif
GLATTER_UBLOCK(void, APIENTRY, glResetMinmax, (GLenum target))
#ifndef glSeparableFilter2D
#define glSeparableFilter2D(target, internalformat, width, height, format, type, row, column) glatter_glSeparableFilter2D((target), (internalformat), (width), (height), (format), (type), (row), (column))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSeparableFilter2D, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column))
#endif // defined(GL_ARB_imaging)
#if defined(GL_ARB_indirect_parameters)
#ifndef glMultiDrawArraysIndirectCountARB
#define glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCountARB((mode), (indirect), (drawcount), (maxdrawcount), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectCountARB, (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#ifndef glMultiDrawElementsIndirectCountARB
#define glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCountARB((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectCountARB, (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#endif // defined(GL_ARB_indirect_parameters)
#if defined(GL_ARB_instanced_arrays)
#ifndef glVertexAttribDivisorARB
#define glVertexAttribDivisorARB(index, divisor) glatter_glVertexAttribDivisorARB((index), (divisor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribDivisorARB, (GLuint index, GLuint divisor))
#endif // defined(GL_ARB_instanced_arrays)
#if defined(GL_ARB_matrix_palette)
#ifndef glCurrentPaletteMatrixARB
#define glCurrentPaletteMatrixARB(index) glatter_glCurrentPaletteMatrixARB((index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCurrentPaletteMatrixARB, (GLint index))
#ifndef glMatrixIndexPointerARB
#define glMatrixIndexPointerARB(size, type, stride, pointer) glatter_glMatrixIndexPointerARB((size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixIndexPointerARB, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#ifndef glMatrixIndexubvARB
#define glMatrixIndexubvARB(size, indices) glatter_glMatrixIndexubvARB((size), (indices))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixIndexubvARB, (GLint size, const GLubyte *indices))
#ifndef glMatrixIndexuivARB
#define glMatrixIndexuivARB(size, indices) glatter_glMatrixIndexuivARB((size), (indices))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixIndexuivARB, (GLint size, const GLuint *indices))
#ifndef glMatrixIndexusvARB
#define glMatrixIndexusvARB(size, indices) glatter_glMatrixIndexusvARB((size), (indices))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixIndexusvARB, (GLint size, const GLushort *indices))
#endif // defined(GL_ARB_matrix_palette)
#if defined(GL_ARB_multisample)
#ifndef glSampleCoverageARB
#define glSampleCoverageARB(value, invert) glatter_glSampleCoverageARB((value), (invert))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSampleCoverageARB, (GLfloat value, GLboolean invert))
#endif // defined(GL_ARB_multisample)
#if defined(GL_ARB_multitexture)
#ifndef glActiveTextureARB
#define glActiveTextureARB(texture) glatter_glActiveTextureARB((texture))
#endif
GLATTER_UBLOCK(void, APIENTRY, glActiveTextureARB, (GLenum texture))
#ifndef glClientActiveTextureARB
#define glClientActiveTextureARB(texture) glatter_glClientActiveTextureARB((texture))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClientActiveTextureARB, (GLenum texture))
#ifndef glMultiTexCoord1dARB
#define glMultiTexCoord1dARB(target, s) glatter_glMultiTexCoord1dARB((target), (s))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1dARB, (GLenum target, GLdouble s))
#ifndef glMultiTexCoord1dvARB
#define glMultiTexCoord1dvARB(target, v) glatter_glMultiTexCoord1dvARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1dvARB, (GLenum target, const GLdouble *v))
#ifndef glMultiTexCoord1fARB
#define glMultiTexCoord1fARB(target, s) glatter_glMultiTexCoord1fARB((target), (s))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1fARB, (GLenum target, GLfloat s))
#ifndef glMultiTexCoord1fvARB
#define glMultiTexCoord1fvARB(target, v) glatter_glMultiTexCoord1fvARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1fvARB, (GLenum target, const GLfloat *v))
#ifndef glMultiTexCoord1iARB
#define glMultiTexCoord1iARB(target, s) glatter_glMultiTexCoord1iARB((target), (s))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1iARB, (GLenum target, GLint s))
#ifndef glMultiTexCoord1ivARB
#define glMultiTexCoord1ivARB(target, v) glatter_glMultiTexCoord1ivARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1ivARB, (GLenum target, const GLint *v))
#ifndef glMultiTexCoord1sARB
#define glMultiTexCoord1sARB(target, s) glatter_glMultiTexCoord1sARB((target), (s))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1sARB, (GLenum target, GLshort s))
#ifndef glMultiTexCoord1svARB
#define glMultiTexCoord1svARB(target, v) glatter_glMultiTexCoord1svARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1svARB, (GLenum target, const GLshort *v))
#ifndef glMultiTexCoord2dARB
#define glMultiTexCoord2dARB(target, s, t) glatter_glMultiTexCoord2dARB((target), (s), (t))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2dARB, (GLenum target, GLdouble s, GLdouble t))
#ifndef glMultiTexCoord2dvARB
#define glMultiTexCoord2dvARB(target, v) glatter_glMultiTexCoord2dvARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2dvARB, (GLenum target, const GLdouble *v))
#ifndef glMultiTexCoord2fARB
#define glMultiTexCoord2fARB(target, s, t) glatter_glMultiTexCoord2fARB((target), (s), (t))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2fARB, (GLenum target, GLfloat s, GLfloat t))
#ifndef glMultiTexCoord2fvARB
#define glMultiTexCoord2fvARB(target, v) glatter_glMultiTexCoord2fvARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2fvARB, (GLenum target, const GLfloat *v))
#ifndef glMultiTexCoord2iARB
#define glMultiTexCoord2iARB(target, s, t) glatter_glMultiTexCoord2iARB((target), (s), (t))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2iARB, (GLenum target, GLint s, GLint t))
#ifndef glMultiTexCoord2ivARB
#define glMultiTexCoord2ivARB(target, v) glatter_glMultiTexCoord2ivARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2ivARB, (GLenum target, const GLint *v))
#ifndef glMultiTexCoord2sARB
#define glMultiTexCoord2sARB(target, s, t) glatter_glMultiTexCoord2sARB((target), (s), (t))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2sARB, (GLenum target, GLshort s, GLshort t))
#ifndef glMultiTexCoord2svARB
#define glMultiTexCoord2svARB(target, v) glatter_glMultiTexCoord2svARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2svARB, (GLenum target, const GLshort *v))
#ifndef glMultiTexCoord3dARB
#define glMultiTexCoord3dARB(target, s, t, r) glatter_glMultiTexCoord3dARB((target), (s), (t), (r))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3dARB, (GLenum target, GLdouble s, GLdouble t, GLdouble r))
#ifndef glMultiTexCoord3dvARB
#define glMultiTexCoord3dvARB(target, v) glatter_glMultiTexCoord3dvARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3dvARB, (GLenum target, const GLdouble *v))
#ifndef glMultiTexCoord3fARB
#define glMultiTexCoord3fARB(target, s, t, r) glatter_glMultiTexCoord3fARB((target), (s), (t), (r))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3fARB, (GLenum target, GLfloat s, GLfloat t, GLfloat r))
#ifndef glMultiTexCoord3fvARB
#define glMultiTexCoord3fvARB(target, v) glatter_glMultiTexCoord3fvARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3fvARB, (GLenum target, const GLfloat *v))
#ifndef glMultiTexCoord3iARB
#define glMultiTexCoord3iARB(target, s, t, r) glatter_glMultiTexCoord3iARB((target), (s), (t), (r))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3iARB, (GLenum target, GLint s, GLint t, GLint r))
#ifndef glMultiTexCoord3ivARB
#define glMultiTexCoord3ivARB(target, v) glatter_glMultiTexCoord3ivARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3ivARB, (GLenum target, const GLint *v))
#ifndef glMultiTexCoord3sARB
#define glMultiTexCoord3sARB(target, s, t, r) glatter_glMultiTexCoord3sARB((target), (s), (t), (r))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3sARB, (GLenum target, GLshort s, GLshort t, GLshort r))
#ifndef glMultiTexCoord3svARB
#define glMultiTexCoord3svARB(target, v) glatter_glMultiTexCoord3svARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3svARB, (GLenum target, const GLshort *v))
#ifndef glMultiTexCoord4dARB
#define glMultiTexCoord4dARB(target, s, t, r, q) glatter_glMultiTexCoord4dARB((target), (s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4dARB, (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q))
#ifndef glMultiTexCoord4dvARB
#define glMultiTexCoord4dvARB(target, v) glatter_glMultiTexCoord4dvARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4dvARB, (GLenum target, const GLdouble *v))
#ifndef glMultiTexCoord4fARB
#define glMultiTexCoord4fARB(target, s, t, r, q) glatter_glMultiTexCoord4fARB((target), (s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4fARB, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#ifndef glMultiTexCoord4fvARB
#define glMultiTexCoord4fvARB(target, v) glatter_glMultiTexCoord4fvARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4fvARB, (GLenum target, const GLfloat *v))
#ifndef glMultiTexCoord4iARB
#define glMultiTexCoord4iARB(target, s, t, r, q) glatter_glMultiTexCoord4iARB((target), (s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4iARB, (GLenum target, GLint s, GLint t, GLint r, GLint q))
#ifndef glMultiTexCoord4ivARB
#define glMultiTexCoord4ivARB(target, v) glatter_glMultiTexCoord4ivARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4ivARB, (GLenum target, const GLint *v))
#ifndef glMultiTexCoord4sARB
#define glMultiTexCoord4sARB(target, s, t, r, q) glatter_glMultiTexCoord4sARB((target), (s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4sARB, (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q))
#ifndef glMultiTexCoord4svARB
#define glMultiTexCoord4svARB(target, v) glatter_glMultiTexCoord4svARB((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4svARB, (GLenum target, const GLshort *v))
#endif // defined(GL_ARB_multitexture)
#if defined(GL_ARB_occlusion_query)
#ifndef glBeginQueryARB
#define glBeginQueryARB(target, id) glatter_glBeginQueryARB((target), (id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginQueryARB, (GLenum target, GLuint id))
#ifndef glDeleteQueriesARB
#define glDeleteQueriesARB(n, ids) glatter_glDeleteQueriesARB((n), (ids))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteQueriesARB, (GLsizei n, const GLuint *ids))
#ifndef glEndQueryARB
#define glEndQueryARB(target) glatter_glEndQueryARB((target))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndQueryARB, (GLenum target))
#ifndef glGenQueriesARB
#define glGenQueriesARB(n, ids) glatter_glGenQueriesARB((n), (ids))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenQueriesARB, (GLsizei n, GLuint *ids))
#ifndef glGetQueryObjectivARB
#define glGetQueryObjectivARB(id, pname, params) glatter_glGetQueryObjectivARB((id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectivARB, (GLuint id, GLenum pname, GLint *params))
#ifndef glGetQueryObjectuivARB
#define glGetQueryObjectuivARB(id, pname, params) glatter_glGetQueryObjectuivARB((id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectuivARB, (GLuint id, GLenum pname, GLuint *params))
#ifndef glGetQueryivARB
#define glGetQueryivARB(target, pname, params) glatter_glGetQueryivARB((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryivARB, (GLenum target, GLenum pname, GLint *params))
#ifndef glIsQueryARB
#define glIsQueryARB(id) glatter_glIsQueryARB((id))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsQueryARB, (GLuint id))
#endif // defined(GL_ARB_occlusion_query)
#if defined(GL_ARB_parallel_shader_compile)
#ifndef glMaxShaderCompilerThreadsARB
#define glMaxShaderCompilerThreadsARB(count) glatter_glMaxShaderCompilerThreadsARB((count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMaxShaderCompilerThreadsARB, (GLuint count))
#endif // defined(GL_ARB_parallel_shader_compile)
#if defined(GL_ARB_point_parameters)
#ifndef glPointParameterfARB
#define glPointParameterfARB(pname, param) glatter_glPointParameterfARB((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfARB, (GLenum pname, GLfloat param))
#ifndef glPointParameterfvARB
#define glPointParameterfvARB(pname, params) glatter_glPointParameterfvARB((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfvARB, (GLenum pname, const GLfloat *params))
#endif // defined(GL_ARB_point_parameters)
#if defined(GL_ARB_robustness)
#ifndef glGetGraphicsResetStatusARB
#define glGetGraphicsResetStatusARB() glatter_glGetGraphicsResetStatusARB()
#endif
GLATTER_UBLOCK(GLenum, APIENTRY, glGetGraphicsResetStatusARB, (void))
#ifndef glGetnColorTableARB
#define glGetnColorTableARB(target, format, type, bufSize, table) glatter_glGetnColorTableARB((target), (format), (type), (bufSize), (table))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnColorTableARB, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table))
#ifndef glGetnCompressedTexImageARB
#define glGetnCompressedTexImageARB(target, lod, bufSize, img) glatter_glGetnCompressedTexImageARB((target), (lod), (bufSize), (img))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnCompressedTexImageARB, (GLenum target, GLint lod, GLsizei bufSize, void *img))
#ifndef glGetnConvolutionFilterARB
#define glGetnConvolutionFilterARB(target, format, type, bufSize, image) glatter_glGetnConvolutionFilterARB((target), (format), (type), (bufSize), (image))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnConvolutionFilterARB, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image))
#ifndef glGetnHistogramARB
#define glGetnHistogramARB(target, reset, format, type, bufSize, values) glatter_glGetnHistogramARB((target), (reset), (format), (type), (bufSize), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnHistogramARB, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values))
#ifndef glGetnMapdvARB
#define glGetnMapdvARB(target, query, bufSize, v) glatter_glGetnMapdvARB((target), (query), (bufSize), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnMapdvARB, (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v))
#ifndef glGetnMapfvARB
#define glGetnMapfvARB(target, query, bufSize, v) glatter_glGetnMapfvARB((target), (query), (bufSize), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnMapfvARB, (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v))
#ifndef glGetnMapivARB
#define glGetnMapivARB(target, query, bufSize, v) glatter_glGetnMapivARB((target), (query), (bufSize), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnMapivARB, (GLenum target, GLenum query, GLsizei bufSize, GLint *v))
#ifndef glGetnMinmaxARB
#define glGetnMinmaxARB(target, reset, format, type, bufSize, values) glatter_glGetnMinmaxARB((target), (reset), (format), (type), (bufSize), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnMinmaxARB, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values))
#ifndef glGetnPixelMapfvARB
#define glGetnPixelMapfvARB(map, bufSize, values) glatter_glGetnPixelMapfvARB((map), (bufSize), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapfvARB, (GLenum map, GLsizei bufSize, GLfloat *values))
#ifndef glGetnPixelMapuivARB
#define glGetnPixelMapuivARB(map, bufSize, values) glatter_glGetnPixelMapuivARB((map), (bufSize), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapuivARB, (GLenum map, GLsizei bufSize, GLuint *values))
#ifndef glGetnPixelMapusvARB
#define glGetnPixelMapusvARB(map, bufSize, values) glatter_glGetnPixelMapusvARB((map), (bufSize), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapusvARB, (GLenum map, GLsizei bufSize, GLushort *values))
#ifndef glGetnPolygonStippleARB
#define glGetnPolygonStippleARB(bufSize, pattern) glatter_glGetnPolygonStippleARB((bufSize), (pattern))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnPolygonStippleARB, (GLsizei bufSize, GLubyte *pattern))
#ifndef glGetnSeparableFilterARB
#define glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span) glatter_glGetnSeparableFilterARB((target), (format), (type), (rowBufSize), (row), (columnBufSize), (column), (span))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnSeparableFilterARB, (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span))
#ifndef glGetnTexImageARB
#define glGetnTexImageARB(target, level, format, type, bufSize, img) glatter_glGetnTexImageARB((target), (level), (format), (type), (bufSize), (img))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnTexImageARB, (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img))
#ifndef glGetnUniformdvARB
#define glGetnUniformdvARB(program, location, bufSize, params) glatter_glGetnUniformdvARB((program), (location), (bufSize), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformdvARB, (GLuint program, GLint location, GLsizei bufSize, GLdouble *params))
#ifndef glGetnUniformfvARB
#define glGetnUniformfvARB(program, location, bufSize, params) glatter_glGetnUniformfvARB((program), (location), (bufSize), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformfvARB, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#ifndef glGetnUniformivARB
#define glGetnUniformivARB(program, location, bufSize, params) glatter_glGetnUniformivARB((program), (location), (bufSize), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformivARB, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#ifndef glGetnUniformuivARB
#define glGetnUniformuivARB(program, location, bufSize, params) glatter_glGetnUniformuivARB((program), (location), (bufSize), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformuivARB, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#ifndef glReadnPixelsARB
#define glReadnPixelsARB(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsARB((x), (y), (width), (height), (format), (type), (bufSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReadnPixelsARB, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#endif // defined(GL_ARB_robustness)
#if defined(GL_ARB_sample_locations)
#ifndef glEvaluateDepthValuesARB
#define glEvaluateDepthValuesARB() glatter_glEvaluateDepthValuesARB()
#endif
GLATTER_UBLOCK(void, APIENTRY, glEvaluateDepthValuesARB, (void))
#ifndef glFramebufferSampleLocationsfvARB
#define glFramebufferSampleLocationsfvARB(target, start, count, v) glatter_glFramebufferSampleLocationsfvARB((target), (start), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferSampleLocationsfvARB, (GLenum target, GLuint start, GLsizei count, const GLfloat *v))
#ifndef glNamedFramebufferSampleLocationsfvARB
#define glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvARB((framebuffer), (start), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferSampleLocationsfvARB, (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v))
#endif // defined(GL_ARB_sample_locations)
#if defined(GL_ARB_sample_shading)
#ifndef glMinSampleShadingARB
#define glMinSampleShadingARB(value) glatter_glMinSampleShadingARB((value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMinSampleShadingARB, (GLfloat value))
#endif // defined(GL_ARB_sample_shading)
#if defined(GL_ARB_shader_objects)
#ifndef glAttachObjectARB
#define glAttachObjectARB(containerObj, obj) glatter_glAttachObjectARB((containerObj), (obj))
#endif
GLATTER_UBLOCK(void, APIENTRY, glAttachObjectARB, (GLhandleARB containerObj, GLhandleARB obj))
#ifndef glCompileShaderARB
#define glCompileShaderARB(shaderObj) glatter_glCompileShaderARB((shaderObj))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompileShaderARB, (GLhandleARB shaderObj))
#ifndef glCreateProgramObjectARB
#define glCreateProgramObjectARB() glatter_glCreateProgramObjectARB()
#endif
GLATTER_UBLOCK(GLhandleARB, APIENTRY, glCreateProgramObjectARB, (void))
#ifndef glCreateShaderObjectARB
#define glCreateShaderObjectARB(shaderType) glatter_glCreateShaderObjectARB((shaderType))
#endif
GLATTER_UBLOCK(GLhandleARB, APIENTRY, glCreateShaderObjectARB, (GLenum shaderType))
#ifndef glDeleteObjectARB
#define glDeleteObjectARB(obj) glatter_glDeleteObjectARB((obj))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteObjectARB, (GLhandleARB obj))
#ifndef glDetachObjectARB
#define glDetachObjectARB(containerObj, attachedObj) glatter_glDetachObjectARB((containerObj), (attachedObj))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDetachObjectARB, (GLhandleARB containerObj, GLhandleARB attachedObj))
#ifndef glGetActiveUniformARB
#define glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name) glatter_glGetActiveUniformARB((programObj), (index), (maxLength), (length), (size), (type), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformARB, (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name))
#ifndef glGetAttachedObjectsARB
#define glGetAttachedObjectsARB(containerObj, maxCount, count, obj) glatter_glGetAttachedObjectsARB((containerObj), (maxCount), (count), (obj))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetAttachedObjectsARB, (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj))
#ifndef glGetHandleARB
#define glGetHandleARB(pname) glatter_glGetHandleARB((pname))
#endif
GLATTER_UBLOCK(GLhandleARB, APIENTRY, glGetHandleARB, (GLenum pname))
#ifndef glGetInfoLogARB
#define glGetInfoLogARB(obj, maxLength, length, infoLog) glatter_glGetInfoLogARB((obj), (maxLength), (length), (infoLog))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetInfoLogARB, (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog))
#ifndef glGetObjectParameterfvARB
#define glGetObjectParameterfvARB(obj, pname, params) glatter_glGetObjectParameterfvARB((obj), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetObjectParameterfvARB, (GLhandleARB obj, GLenum pname, GLfloat *params))
#ifndef glGetObjectParameterivARB
#define glGetObjectParameterivARB(obj, pname, params) glatter_glGetObjectParameterivARB((obj), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetObjectParameterivARB, (GLhandleARB obj, GLenum pname, GLint *params))
#ifndef glGetShaderSourceARB
#define glGetShaderSourceARB(obj, maxLength, length, source) glatter_glGetShaderSourceARB((obj), (maxLength), (length), (source))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetShaderSourceARB, (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source))
#ifndef glGetUniformLocationARB
#define glGetUniformLocationARB(programObj, name) glatter_glGetUniformLocationARB((programObj), (name))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glGetUniformLocationARB, (GLhandleARB programObj, const GLcharARB *name))
#ifndef glGetUniformfvARB
#define glGetUniformfvARB(programObj, location, params) glatter_glGetUniformfvARB((programObj), (location), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUniformfvARB, (GLhandleARB programObj, GLint location, GLfloat *params))
#ifndef glGetUniformivARB
#define glGetUniformivARB(programObj, location, params) glatter_glGetUniformivARB((programObj), (location), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUniformivARB, (GLhandleARB programObj, GLint location, GLint *params))
#ifndef glLinkProgramARB
#define glLinkProgramARB(programObj) glatter_glLinkProgramARB((programObj))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLinkProgramARB, (GLhandleARB programObj))
#ifndef glShaderSourceARB
#define glShaderSourceARB(shaderObj, count, string, length) glatter_glShaderSourceARB((shaderObj), (count), (string), (length))
#endif
GLATTER_UBLOCK(void, APIENTRY, glShaderSourceARB, (GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length))
#ifndef glUniform1fARB
#define glUniform1fARB(location, v0) glatter_glUniform1fARB((location), (v0))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1fARB, (GLint location, GLfloat v0))
#ifndef glUniform1fvARB
#define glUniform1fvARB(location, count, value) glatter_glUniform1fvARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1fvARB, (GLint location, GLsizei count, const GLfloat *value))
#ifndef glUniform1iARB
#define glUniform1iARB(location, v0) glatter_glUniform1iARB((location), (v0))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1iARB, (GLint location, GLint v0))
#ifndef glUniform1ivARB
#define glUniform1ivARB(location, count, value) glatter_glUniform1ivARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1ivARB, (GLint location, GLsizei count, const GLint *value))
#ifndef glUniform2fARB
#define glUniform2fARB(location, v0, v1) glatter_glUniform2fARB((location), (v0), (v1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2fARB, (GLint location, GLfloat v0, GLfloat v1))
#ifndef glUniform2fvARB
#define glUniform2fvARB(location, count, value) glatter_glUniform2fvARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2fvARB, (GLint location, GLsizei count, const GLfloat *value))
#ifndef glUniform2iARB
#define glUniform2iARB(location, v0, v1) glatter_glUniform2iARB((location), (v0), (v1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2iARB, (GLint location, GLint v0, GLint v1))
#ifndef glUniform2ivARB
#define glUniform2ivARB(location, count, value) glatter_glUniform2ivARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2ivARB, (GLint location, GLsizei count, const GLint *value))
#ifndef glUniform3fARB
#define glUniform3fARB(location, v0, v1, v2) glatter_glUniform3fARB((location), (v0), (v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3fARB, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#ifndef glUniform3fvARB
#define glUniform3fvARB(location, count, value) glatter_glUniform3fvARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3fvARB, (GLint location, GLsizei count, const GLfloat *value))
#ifndef glUniform3iARB
#define glUniform3iARB(location, v0, v1, v2) glatter_glUniform3iARB((location), (v0), (v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3iARB, (GLint location, GLint v0, GLint v1, GLint v2))
#ifndef glUniform3ivARB
#define glUniform3ivARB(location, count, value) glatter_glUniform3ivARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3ivARB, (GLint location, GLsizei count, const GLint *value))
#ifndef glUniform4fARB
#define glUniform4fARB(location, v0, v1, v2, v3) glatter_glUniform4fARB((location), (v0), (v1), (v2), (v3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4fARB, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#ifndef glUniform4fvARB
#define glUniform4fvARB(location, count, value) glatter_glUniform4fvARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4fvARB, (GLint location, GLsizei count, const GLfloat *value))
#ifndef glUniform4iARB
#define glUniform4iARB(location, v0, v1, v2, v3) glatter_glUniform4iARB((location), (v0), (v1), (v2), (v3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4iARB, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#ifndef glUniform4ivARB
#define glUniform4ivARB(location, count, value) glatter_glUniform4ivARB((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4ivARB, (GLint location, GLsizei count, const GLint *value))
#ifndef glUniformMatrix2fvARB
#define glUniformMatrix2fvARB(location, count, transpose, value) glatter_glUniformMatrix2fvARB((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2fvARB, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glUniformMatrix3fvARB
#define glUniformMatrix3fvARB(location, count, transpose, value) glatter_glUniformMatrix3fvARB((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3fvARB, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glUniformMatrix4fvARB
#define glUniformMatrix4fvARB(location, count, transpose, value) glatter_glUniformMatrix4fvARB((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4fvARB, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glUseProgramObjectARB
#define glUseProgramObjectARB(programObj) glatter_glUseProgramObjectARB((programObj))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUseProgramObjectARB, (GLhandleARB programObj))
#ifndef glValidateProgramARB
#define glValidateProgramARB(programObj) glatter_glValidateProgramARB((programObj))
#endif
GLATTER_UBLOCK(void, APIENTRY, glValidateProgramARB, (GLhandleARB programObj))
#endif // defined(GL_ARB_shader_objects)
#if defined(GL_ARB_shading_language_include)
#ifndef glCompileShaderIncludeARB
#define glCompileShaderIncludeARB(shader, count, path, length) glatter_glCompileShaderIncludeARB((shader), (count), (path), (length))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompileShaderIncludeARB, (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length))
#ifndef glDeleteNamedStringARB
#define glDeleteNamedStringARB(namelen, name) glatter_glDeleteNamedStringARB((namelen), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteNamedStringARB, (GLint namelen, const GLchar *name))
#ifndef glGetNamedStringARB
#define glGetNamedStringARB(namelen, name, bufSize, stringlen, string) glatter_glGetNamedStringARB((namelen), (name), (bufSize), (stringlen), (string))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedStringARB, (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string))
#ifndef glGetNamedStringivARB
#define glGetNamedStringivARB(namelen, name, pname, params) glatter_glGetNamedStringivARB((namelen), (name), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedStringivARB, (GLint namelen, const GLchar *name, GLenum pname, GLint *params))
#ifndef glIsNamedStringARB
#define glIsNamedStringARB(namelen, name) glatter_glIsNamedStringARB((namelen), (name))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsNamedStringARB, (GLint namelen, const GLchar *name))
#ifndef glNamedStringARB
#define glNamedStringARB(type, namelen, name, stringlen, string) glatter_glNamedStringARB((type), (namelen), (name), (stringlen), (string))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedStringARB, (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string))
#endif // defined(GL_ARB_shading_language_include)
#if defined(GL_ARB_sparse_buffer)
#ifndef glBufferPageCommitmentARB
#define glBufferPageCommitmentARB(target, offset, size, commit) glatter_glBufferPageCommitmentARB((target), (offset), (size), (commit))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBufferPageCommitmentARB, (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit))
#ifndef glNamedBufferPageCommitmentARB
#define glNamedBufferPageCommitmentARB(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentARB((buffer), (offset), (size), (commit))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferPageCommitmentARB, (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit))
#ifndef glNamedBufferPageCommitmentEXT
#define glNamedBufferPageCommitmentEXT(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentEXT((buffer), (offset), (size), (commit))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferPageCommitmentEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit))
#endif // defined(GL_ARB_sparse_buffer)
#if defined(GL_ARB_sparse_texture)
#ifndef glTexPageCommitmentARB
#define glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexPageCommitmentARB((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexPageCommitmentARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit))
#endif // defined(GL_ARB_sparse_texture)
#if defined(GL_ARB_texture_buffer_object)
#ifndef glTexBufferARB
#define glTexBufferARB(target, internalformat, buffer) glatter_glTexBufferARB((target), (internalformat), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexBufferARB, (GLenum target, GLenum internalformat, GLuint buffer))
#endif // defined(GL_ARB_texture_buffer_object)
#if defined(GL_ARB_texture_compression)
#ifndef glCompressedTexImage1DARB
#define glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1DARB((target), (level), (internalformat), (width), (border), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage1DARB, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data))
#ifndef glCompressedTexImage2DARB
#define glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2DARB((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage2DARB, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#ifndef glCompressedTexImage3DARB
#define glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3DARB((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage3DARB, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#ifndef glCompressedTexSubImage1DARB
#define glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1DARB((target), (level), (xoffset), (width), (format), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage1DARB, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#ifndef glCompressedTexSubImage2DARB
#define glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2DARB((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage2DARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#ifndef glCompressedTexSubImage3DARB
#define glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3DARB((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage3DARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#ifndef glGetCompressedTexImageARB
#define glGetCompressedTexImageARB(target, level, img) glatter_glGetCompressedTexImageARB((target), (level), (img))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTexImageARB, (GLenum target, GLint level, void *img))
#endif // defined(GL_ARB_texture_compression)
#if defined(GL_ARB_transpose_matrix)
#ifndef glLoadTransposeMatrixdARB
#define glLoadTransposeMatrixdARB(m) glatter_glLoadTransposeMatrixdARB((m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixdARB, (const GLdouble *m))
#ifndef glLoadTransposeMatrixfARB
#define glLoadTransposeMatrixfARB(m) glatter_glLoadTransposeMatrixfARB((m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixfARB, (const GLfloat *m))
#ifndef glMultTransposeMatrixdARB
#define glMultTransposeMatrixdARB(m) glatter_glMultTransposeMatrixdARB((m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixdARB, (const GLdouble *m))
#ifndef glMultTransposeMatrixfARB
#define glMultTransposeMatrixfARB(m) glatter_glMultTransposeMatrixfARB((m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixfARB, (const GLfloat *m))
#endif // defined(GL_ARB_transpose_matrix)
#if defined(GL_ARB_vertex_blend)
#ifndef glVertexBlendARB
#define glVertexBlendARB(count) glatter_glVertexBlendARB((count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexBlendARB, (GLint count))
#ifndef glWeightPointerARB
#define glWeightPointerARB(size, type, stride, pointer) glatter_glWeightPointerARB((size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWeightPointerARB, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#ifndef glWeightbvARB
#define glWeightbvARB(size, weights) glatter_glWeightbvARB((size), (weights))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWeightbvARB, (GLint size, const GLbyte *weights))
#ifndef glWeightdvARB
#define glWeightdvARB(size, weights) glatter_glWeightdvARB((size), (weights))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWeightdvARB, (GLint size, const GLdouble *weights))
#ifndef glWeightfvARB
#define glWeightfvARB(size, weights) glatter_glWeightfvARB((size), (weights))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWeightfvARB, (GLint size, const GLfloat *weights))
#ifndef glWeightivARB
#define glWeightivARB(size, weights) glatter_glWeightivARB((size), (weights))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWeightivARB, (GLint size, const GLint *weights))
#ifndef glWeightsvARB
#define glWeightsvARB(size, weights) glatter_glWeightsvARB((size), (weights))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWeightsvARB, (GLint size, const GLshort *weights))
#ifndef glWeightubvARB
#define glWeightubvARB(size, weights) glatter_glWeightubvARB((size), (weights))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWeightubvARB, (GLint size, const GLubyte *weights))
#ifndef glWeightuivARB
#define glWeightuivARB(size, weights) glatter_glWeightuivARB((size), (weights))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWeightuivARB, (GLint size, const GLuint *weights))
#ifndef glWeightusvARB
#define glWeightusvARB(size, weights) glatter_glWeightusvARB((size), (weights))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWeightusvARB, (GLint size, const GLushort *weights))
#endif // defined(GL_ARB_vertex_blend)
#if defined(GL_ARB_vertex_buffer_object)
#ifndef glBindBufferARB
#define glBindBufferARB(target, buffer) glatter_glBindBufferARB((target), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindBufferARB, (GLenum target, GLuint buffer))
#ifndef glBufferDataARB
#define glBufferDataARB(target, size, data, usage) glatter_glBufferDataARB((target), (size), (data), (usage))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBufferDataARB, (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage))
#ifndef glBufferSubDataARB
#define glBufferSubDataARB(target, offset, size, data) glatter_glBufferSubDataARB((target), (offset), (size), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBufferSubDataARB, (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data))
#ifndef glDeleteBuffersARB
#define glDeleteBuffersARB(n, buffers) glatter_glDeleteBuffersARB((n), (buffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteBuffersARB, (GLsizei n, const GLuint *buffers))
#ifndef glGenBuffersARB
#define glGenBuffersARB(n, buffers) glatter_glGenBuffersARB((n), (buffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenBuffersARB, (GLsizei n, GLuint *buffers))
#ifndef glGetBufferParameterivARB
#define glGetBufferParameterivARB(target, pname, params) glatter_glGetBufferParameterivARB((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameterivARB, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetBufferPointervARB
#define glGetBufferPointervARB(target, pname, params) glatter_glGetBufferPointervARB((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetBufferPointervARB, (GLenum target, GLenum pname, void **params))
#ifndef glGetBufferSubDataARB
#define glGetBufferSubDataARB(target, offset, size, data) glatter_glGetBufferSubDataARB((target), (offset), (size), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetBufferSubDataARB, (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data))
#ifndef glIsBufferARB
#define glIsBufferARB(buffer) glatter_glIsBufferARB((buffer))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsBufferARB, (GLuint buffer))
#ifndef glMapBufferARB
#define glMapBufferARB(target, access) glatter_glMapBufferARB((target), (access))
#endif
GLATTER_UBLOCK(void *, APIENTRY, glMapBufferARB, (GLenum target, GLenum access))
#ifndef glUnmapBufferARB
#define glUnmapBufferARB(target) glatter_glUnmapBufferARB((target))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapBufferARB, (GLenum target))
#endif // defined(GL_ARB_vertex_buffer_object)
#if defined(GL_ARB_vertex_program)
#ifndef glDisableVertexAttribArrayARB
#define glDisableVertexAttribArrayARB(index) glatter_glDisableVertexAttribArrayARB((index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexAttribArrayARB, (GLuint index))
#ifndef glEnableVertexAttribArrayARB
#define glEnableVertexAttribArrayARB(index) glatter_glEnableVertexAttribArrayARB((index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexAttribArrayARB, (GLuint index))
#ifndef glGetVertexAttribPointervARB
#define glGetVertexAttribPointervARB(index, pname, pointer) glatter_glGetVertexAttribPointervARB((index), (pname), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribPointervARB, (GLuint index, GLenum pname, void **pointer))
#ifndef glGetVertexAttribdvARB
#define glGetVertexAttribdvARB(index, pname, params) glatter_glGetVertexAttribdvARB((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribdvARB, (GLuint index, GLenum pname, GLdouble *params))
#ifndef glGetVertexAttribfvARB
#define glGetVertexAttribfvARB(index, pname, params) glatter_glGetVertexAttribfvARB((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribfvARB, (GLuint index, GLenum pname, GLfloat *params))
#ifndef glGetVertexAttribivARB
#define glGetVertexAttribivARB(index, pname, params) glatter_glGetVertexAttribivARB((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribivARB, (GLuint index, GLenum pname, GLint *params))
#ifndef glVertexAttrib1dARB
#define glVertexAttrib1dARB(index, x) glatter_glVertexAttrib1dARB((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dARB, (GLuint index, GLdouble x))
#ifndef glVertexAttrib1dvARB
#define glVertexAttrib1dvARB(index, v) glatter_glVertexAttrib1dvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dvARB, (GLuint index, const GLdouble *v))
#ifndef glVertexAttrib1fARB
#define glVertexAttrib1fARB(index, x) glatter_glVertexAttrib1fARB((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fARB, (GLuint index, GLfloat x))
#ifndef glVertexAttrib1fvARB
#define glVertexAttrib1fvARB(index, v) glatter_glVertexAttrib1fvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fvARB, (GLuint index, const GLfloat *v))
#ifndef glVertexAttrib1sARB
#define glVertexAttrib1sARB(index, x) glatter_glVertexAttrib1sARB((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1sARB, (GLuint index, GLshort x))
#ifndef glVertexAttrib1svARB
#define glVertexAttrib1svARB(index, v) glatter_glVertexAttrib1svARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1svARB, (GLuint index, const GLshort *v))
#ifndef glVertexAttrib2dARB
#define glVertexAttrib2dARB(index, x, y) glatter_glVertexAttrib2dARB((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dARB, (GLuint index, GLdouble x, GLdouble y))
#ifndef glVertexAttrib2dvARB
#define glVertexAttrib2dvARB(index, v) glatter_glVertexAttrib2dvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dvARB, (GLuint index, const GLdouble *v))
#ifndef glVertexAttrib2fARB
#define glVertexAttrib2fARB(index, x, y) glatter_glVertexAttrib2fARB((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fARB, (GLuint index, GLfloat x, GLfloat y))
#ifndef glVertexAttrib2fvARB
#define glVertexAttrib2fvARB(index, v) glatter_glVertexAttrib2fvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fvARB, (GLuint index, const GLfloat *v))
#ifndef glVertexAttrib2sARB
#define glVertexAttrib2sARB(index, x, y) glatter_glVertexAttrib2sARB((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2sARB, (GLuint index, GLshort x, GLshort y))
#ifndef glVertexAttrib2svARB
#define glVertexAttrib2svARB(index, v) glatter_glVertexAttrib2svARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2svARB, (GLuint index, const GLshort *v))
#ifndef glVertexAttrib3dARB
#define glVertexAttrib3dARB(index, x, y, z) glatter_glVertexAttrib3dARB((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dARB, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#ifndef glVertexAttrib3dvARB
#define glVertexAttrib3dvARB(index, v) glatter_glVertexAttrib3dvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dvARB, (GLuint index, const GLdouble *v))
#ifndef glVertexAttrib3fARB
#define glVertexAttrib3fARB(index, x, y, z) glatter_glVertexAttrib3fARB((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fARB, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#ifndef glVertexAttrib3fvARB
#define glVertexAttrib3fvARB(index, v) glatter_glVertexAttrib3fvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fvARB, (GLuint index, const GLfloat *v))
#ifndef glVertexAttrib3sARB
#define glVertexAttrib3sARB(index, x, y, z) glatter_glVertexAttrib3sARB((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3sARB, (GLuint index, GLshort x, GLshort y, GLshort z))
#ifndef glVertexAttrib3svARB
#define glVertexAttrib3svARB(index, v) glatter_glVertexAttrib3svARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3svARB, (GLuint index, const GLshort *v))
#ifndef glVertexAttrib4NbvARB
#define glVertexAttrib4NbvARB(index, v) glatter_glVertexAttrib4NbvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NbvARB, (GLuint index, const GLbyte *v))
#ifndef glVertexAttrib4NivARB
#define glVertexAttrib4NivARB(index, v) glatter_glVertexAttrib4NivARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NivARB, (GLuint index, const GLint *v))
#ifndef glVertexAttrib4NsvARB
#define glVertexAttrib4NsvARB(index, v) glatter_glVertexAttrib4NsvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NsvARB, (GLuint index, const GLshort *v))
#ifndef glVertexAttrib4NubARB
#define glVertexAttrib4NubARB(index, x, y, z, w) glatter_glVertexAttrib4NubARB((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NubARB, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w))
#ifndef glVertexAttrib4NubvARB
#define glVertexAttrib4NubvARB(index, v) glatter_glVertexAttrib4NubvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NubvARB, (GLuint index, const GLubyte *v))
#ifndef glVertexAttrib4NuivARB
#define glVertexAttrib4NuivARB(index, v) glatter_glVertexAttrib4NuivARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NuivARB, (GLuint index, const GLuint *v))
#ifndef glVertexAttrib4NusvARB
#define glVertexAttrib4NusvARB(index, v) glatter_glVertexAttrib4NusvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NusvARB, (GLuint index, const GLushort *v))
#ifndef glVertexAttrib4bvARB
#define glVertexAttrib4bvARB(index, v) glatter_glVertexAttrib4bvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4bvARB, (GLuint index, const GLbyte *v))
#ifndef glVertexAttrib4dARB
#define glVertexAttrib4dARB(index, x, y, z, w) glatter_glVertexAttrib4dARB((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dARB, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#ifndef glVertexAttrib4dvARB
#define glVertexAttrib4dvARB(index, v) glatter_glVertexAttrib4dvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dvARB, (GLuint index, const GLdouble *v))
#ifndef glVertexAttrib4fARB
#define glVertexAttrib4fARB(index, x, y, z, w) glatter_glVertexAttrib4fARB((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fARB, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#ifndef glVertexAttrib4fvARB
#define glVertexAttrib4fvARB(index, v) glatter_glVertexAttrib4fvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fvARB, (GLuint index, const GLfloat *v))
#ifndef glVertexAttrib4ivARB
#define glVertexAttrib4ivARB(index, v) glatter_glVertexAttrib4ivARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ivARB, (GLuint index, const GLint *v))
#ifndef glVertexAttrib4sARB
#define glVertexAttrib4sARB(index, x, y, z, w) glatter_glVertexAttrib4sARB((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4sARB, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w))
#ifndef glVertexAttrib4svARB
#define glVertexAttrib4svARB(index, v) glatter_glVertexAttrib4svARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4svARB, (GLuint index, const GLshort *v))
#ifndef glVertexAttrib4ubvARB
#define glVertexAttrib4ubvARB(index, v) glatter_glVertexAttrib4ubvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubvARB, (GLuint index, const GLubyte *v))
#ifndef glVertexAttrib4uivARB
#define glVertexAttrib4uivARB(index, v) glatter_glVertexAttrib4uivARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4uivARB, (GLuint index, const GLuint *v))
#ifndef glVertexAttrib4usvARB
#define glVertexAttrib4usvARB(index, v) glatter_glVertexAttrib4usvARB((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4usvARB, (GLuint index, const GLushort *v))
#ifndef glVertexAttribPointerARB
#define glVertexAttribPointerARB(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointerARB((index), (size), (type), (normalized), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribPointerARB, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#endif // defined(GL_ARB_vertex_program)
#if defined(GL_ARB_vertex_shader)
#ifndef glBindAttribLocationARB
#define glBindAttribLocationARB(programObj, index, name) glatter_glBindAttribLocationARB((programObj), (index), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindAttribLocationARB, (GLhandleARB programObj, GLuint index, const GLcharARB *name))
#ifndef glGetActiveAttribARB
#define glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name) glatter_glGetActiveAttribARB((programObj), (index), (maxLength), (length), (size), (type), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAttribARB, (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name))
#ifndef glGetAttribLocationARB
#define glGetAttribLocationARB(programObj, name) glatter_glGetAttribLocationARB((programObj), (name))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glGetAttribLocationARB, (GLhandleARB programObj, const GLcharARB *name))
#endif // defined(GL_ARB_vertex_shader)
#if defined(GL_ARB_viewport_array)
#ifndef glDepthRangeArraydvNV
#define glDepthRangeArraydvNV(first, count, v) glatter_glDepthRangeArraydvNV((first), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDepthRangeArraydvNV, (GLuint first, GLsizei count, const GLdouble *v))
#ifndef glDepthRangeIndexeddNV
#define glDepthRangeIndexeddNV(index, n, f) glatter_glDepthRangeIndexeddNV((index), (n), (f))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDepthRangeIndexeddNV, (GLuint index, GLdouble n, GLdouble f))
#endif // defined(GL_ARB_viewport_array)
#if defined(GL_ARB_window_pos)
#ifndef glWindowPos2dARB
#define glWindowPos2dARB(x, y) glatter_glWindowPos2dARB((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dARB, (GLdouble x, GLdouble y))
#ifndef glWindowPos2dvARB
#define glWindowPos2dvARB(v) glatter_glWindowPos2dvARB((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dvARB, (const GLdouble *v))
#ifndef glWindowPos2fARB
#define glWindowPos2fARB(x, y) glatter_glWindowPos2fARB((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fARB, (GLfloat x, GLfloat y))
#ifndef glWindowPos2fvARB
#define glWindowPos2fvARB(v) glatter_glWindowPos2fvARB((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fvARB, (const GLfloat *v))
#ifndef glWindowPos2iARB
#define glWindowPos2iARB(x, y) glatter_glWindowPos2iARB((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2iARB, (GLint x, GLint y))
#ifndef glWindowPos2ivARB
#define glWindowPos2ivARB(v) glatter_glWindowPos2ivARB((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2ivARB, (const GLint *v))
#ifndef glWindowPos2sARB
#define glWindowPos2sARB(x, y) glatter_glWindowPos2sARB((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2sARB, (GLshort x, GLshort y))
#ifndef glWindowPos2svARB
#define glWindowPos2svARB(v) glatter_glWindowPos2svARB((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2svARB, (const GLshort *v))
#ifndef glWindowPos3dARB
#define glWindowPos3dARB(x, y, z) glatter_glWindowPos3dARB((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dARB, (GLdouble x, GLdouble y, GLdouble z))
#ifndef glWindowPos3dvARB
#define glWindowPos3dvARB(v) glatter_glWindowPos3dvARB((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dvARB, (const GLdouble *v))
#ifndef glWindowPos3fARB
#define glWindowPos3fARB(x, y, z) glatter_glWindowPos3fARB((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fARB, (GLfloat x, GLfloat y, GLfloat z))
#ifndef glWindowPos3fvARB
#define glWindowPos3fvARB(v) glatter_glWindowPos3fvARB((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fvARB, (const GLfloat *v))
#ifndef glWindowPos3iARB
#define glWindowPos3iARB(x, y, z) glatter_glWindowPos3iARB((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3iARB, (GLint x, GLint y, GLint z))
#ifndef glWindowPos3ivARB
#define glWindowPos3ivARB(v) glatter_glWindowPos3ivARB((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3ivARB, (const GLint *v))
#ifndef glWindowPos3sARB
#define glWindowPos3sARB(x, y, z) glatter_glWindowPos3sARB((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3sARB, (GLshort x, GLshort y, GLshort z))
#ifndef glWindowPos3svARB
#define glWindowPos3svARB(v) glatter_glWindowPos3svARB((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3svARB, (const GLshort *v))
#endif // defined(GL_ARB_window_pos)
#if defined(GL_ATI_draw_buffers)
#ifndef glDrawBuffersATI
#define glDrawBuffersATI(n, bufs) glatter_glDrawBuffersATI((n), (bufs))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffersATI, (GLsizei n, const GLenum *bufs))
#endif // defined(GL_ATI_draw_buffers)
#if defined(GL_ATI_element_array)
#ifndef glDrawElementArrayATI
#define glDrawElementArrayATI(mode, count) glatter_glDrawElementArrayATI((mode), (count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawElementArrayATI, (GLenum mode, GLsizei count))
#ifndef glDrawRangeElementArrayATI
#define glDrawRangeElementArrayATI(mode, start, end, count) glatter_glDrawRangeElementArrayATI((mode), (start), (end), (count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementArrayATI, (GLenum mode, GLuint start, GLuint end, GLsizei count))
#ifndef glElementPointerATI
#define glElementPointerATI(type, pointer) glatter_glElementPointerATI((type), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glElementPointerATI, (GLenum type, const void *pointer))
#endif // defined(GL_ATI_element_array)
#if defined(GL_ATI_envmap_bumpmap)
#ifndef glGetTexBumpParameterfvATI
#define glGetTexBumpParameterfvATI(pname, param) glatter_glGetTexBumpParameterfvATI((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTexBumpParameterfvATI, (GLenum pname, GLfloat *param))
#ifndef glGetTexBumpParameterivATI
#define glGetTexBumpParameterivATI(pname, param) glatter_glGetTexBumpParameterivATI((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTexBumpParameterivATI, (GLenum pname, GLint *param))
#ifndef glTexBumpParameterfvATI
#define glTexBumpParameterfvATI(pname, param) glatter_glTexBumpParameterfvATI((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexBumpParameterfvATI, (GLenum pname, const GLfloat *param))
#ifndef glTexBumpParameterivATI
#define glTexBumpParameterivATI(pname, param) glatter_glTexBumpParameterivATI((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexBumpParameterivATI, (GLenum pname, const GLint *param))
#endif // defined(GL_ATI_envmap_bumpmap)
#if defined(GL_ATI_fragment_shader)
#ifndef glAlphaFragmentOp1ATI
#define glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod) glatter_glAlphaFragmentOp1ATI((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod))
#endif
GLATTER_UBLOCK(void, APIENTRY, glAlphaFragmentOp1ATI, (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod))
#ifndef glAlphaFragmentOp2ATI
#define glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) glatter_glAlphaFragmentOp2ATI((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod))
#endif
GLATTER_UBLOCK(void, APIENTRY, glAlphaFragmentOp2ATI, (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod))
#ifndef glAlphaFragmentOp3ATI
#define glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) glatter_glAlphaFragmentOp3ATI((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod), (arg3), (arg3Rep), (arg3Mod))
#endif
GLATTER_UBLOCK(void, APIENTRY, glAlphaFragmentOp3ATI, (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod))
#ifndef glBeginFragmentShaderATI
#define glBeginFragmentShaderATI() glatter_glBeginFragmentShaderATI()
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginFragmentShaderATI, (void))
#ifndef glBindFragmentShaderATI
#define glBindFragmentShaderATI(id) glatter_glBindFragmentShaderATI((id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindFragmentShaderATI, (GLuint id))
#ifndef glColorFragmentOp1ATI
#define glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) glatter_glColorFragmentOp1ATI((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorFragmentOp1ATI, (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod))
#ifndef glColorFragmentOp2ATI
#define glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) glatter_glColorFragmentOp2ATI((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorFragmentOp2ATI, (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod))
#ifndef glColorFragmentOp3ATI
#define glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) glatter_glColorFragmentOp3ATI((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod), (arg3), (arg3Rep), (arg3Mod))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorFragmentOp3ATI, (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod))
#ifndef glDeleteFragmentShaderATI
#define glDeleteFragmentShaderATI(id) glatter_glDeleteFragmentShaderATI((id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteFragmentShaderATI, (GLuint id))
#ifndef glEndFragmentShaderATI
#define glEndFragmentShaderATI() glatter_glEndFragmentShaderATI()
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndFragmentShaderATI, (void))
#ifndef glGenFragmentShadersATI
#define glGenFragmentShadersATI(range) glatter_glGenFragmentShadersATI((range))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glGenFragmentShadersATI, (GLuint range))
#ifndef glPassTexCoordATI
#define glPassTexCoordATI(dst, coord, swizzle) glatter_glPassTexCoordATI((dst), (coord), (swizzle))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPassTexCoordATI, (GLuint dst, GLuint coord, GLenum swizzle))
#ifndef glSampleMapATI
#define glSampleMapATI(dst, interp, swizzle) glatter_glSampleMapATI((dst), (interp), (swizzle))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSampleMapATI, (GLuint dst, GLuint interp, GLenum swizzle))
#ifndef glSetFragmentShaderConstantATI
#define glSetFragmentShaderConstantATI(dst, value) glatter_glSetFragmentShaderConstantATI((dst), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSetFragmentShaderConstantATI, (GLuint dst, const GLfloat *value))
#endif // defined(GL_ATI_fragment_shader)
#if defined(GL_ATI_map_object_buffer)
#ifndef glMapObjectBufferATI
#define glMapObjectBufferATI(buffer) glatter_glMapObjectBufferATI((buffer))
#endif
GLATTER_UBLOCK(void *, APIENTRY, glMapObjectBufferATI, (GLuint buffer))
#ifndef glUnmapObjectBufferATI
#define glUnmapObjectBufferATI(buffer) glatter_glUnmapObjectBufferATI((buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUnmapObjectBufferATI, (GLuint buffer))
#endif // defined(GL_ATI_map_object_buffer)
#if defined(GL_ATI_pn_triangles)
#ifndef glPNTrianglesfATI
#define glPNTrianglesfATI(pname, param) glatter_glPNTrianglesfATI((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPNTrianglesfATI, (GLenum pname, GLfloat param))
#ifndef glPNTrianglesiATI
#define glPNTrianglesiATI(pname, param) glatter_glPNTrianglesiATI((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPNTrianglesiATI, (GLenum pname, GLint param))
#endif // defined(GL_ATI_pn_triangles)
#if defined(GL_ATI_separate_stencil)
#ifndef glStencilFuncSeparateATI
#define glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask) glatter_glStencilFuncSeparateATI((frontfunc), (backfunc), (ref), (mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilFuncSeparateATI, (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask))
#ifndef glStencilOpSeparateATI
#define glStencilOpSeparateATI(face, sfail, dpfail, dppass) glatter_glStencilOpSeparateATI((face), (sfail), (dpfail), (dppass))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilOpSeparateATI, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#endif // defined(GL_ATI_separate_stencil)
#if defined(GL_ATI_vertex_array_object)
#ifndef glArrayObjectATI
#define glArrayObjectATI(array, size, type, stride, buffer, offset) glatter_glArrayObjectATI((array), (size), (type), (stride), (buffer), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glArrayObjectATI, (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset))
#ifndef glFreeObjectBufferATI
#define glFreeObjectBufferATI(buffer) glatter_glFreeObjectBufferATI((buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFreeObjectBufferATI, (GLuint buffer))
#ifndef glGetArrayObjectfvATI
#define glGetArrayObjectfvATI(array, pname, params) glatter_glGetArrayObjectfvATI((array), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetArrayObjectfvATI, (GLenum array, GLenum pname, GLfloat *params))
#ifndef glGetArrayObjectivATI
#define glGetArrayObjectivATI(array, pname, params) glatter_glGetArrayObjectivATI((array), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetArrayObjectivATI, (GLenum array, GLenum pname, GLint *params))
#ifndef glGetObjectBufferfvATI
#define glGetObjectBufferfvATI(buffer, pname, params) glatter_glGetObjectBufferfvATI((buffer), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetObjectBufferfvATI, (GLuint buffer, GLenum pname, GLfloat *params))
#ifndef glGetObjectBufferivATI
#define glGetObjectBufferivATI(buffer, pname, params) glatter_glGetObjectBufferivATI((buffer), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetObjectBufferivATI, (GLuint buffer, GLenum pname, GLint *params))
#ifndef glGetVariantArrayObjectfvATI
#define glGetVariantArrayObjectfvATI(id, pname, params) glatter_glGetVariantArrayObjectfvATI((id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVariantArrayObjectfvATI, (GLuint id, GLenum pname, GLfloat *params))
#ifndef glGetVariantArrayObjectivATI
#define glGetVariantArrayObjectivATI(id, pname, params) glatter_glGetVariantArrayObjectivATI((id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVariantArrayObjectivATI, (GLuint id, GLenum pname, GLint *params))
#ifndef glIsObjectBufferATI
#define glIsObjectBufferATI(buffer) glatter_glIsObjectBufferATI((buffer))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsObjectBufferATI, (GLuint buffer))
#ifndef glNewObjectBufferATI
#define glNewObjectBufferATI(size, pointer, usage) glatter_glNewObjectBufferATI((size), (pointer), (usage))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glNewObjectBufferATI, (GLsizei size, const void *pointer, GLenum usage))
#ifndef glUpdateObjectBufferATI
#define glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve) glatter_glUpdateObjectBufferATI((buffer), (offset), (size), (pointer), (preserve))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUpdateObjectBufferATI, (GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve))
#ifndef glVariantArrayObjectATI
#define glVariantArrayObjectATI(id, type, stride, buffer, offset) glatter_glVariantArrayObjectATI((id), (type), (stride), (buffer), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVariantArrayObjectATI, (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset))
#endif // defined(GL_ATI_vertex_array_object)
#if defined(GL_ATI_vertex_attrib_array_object)
#ifndef glGetVertexAttribArrayObjectfvATI
#define glGetVertexAttribArrayObjectfvATI(index, pname, params) glatter_glGetVertexAttribArrayObjectfvATI((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribArrayObjectfvATI, (GLuint index, GLenum pname, GLfloat *params))
#ifndef glGetVertexAttribArrayObjectivATI
#define glGetVertexAttribArrayObjectivATI(index, pname, params) glatter_glGetVertexAttribArrayObjectivATI((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribArrayObjectivATI, (GLuint index, GLenum pname, GLint *params))
#ifndef glVertexAttribArrayObjectATI
#define glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset) glatter_glVertexAttribArrayObjectATI((index), (size), (type), (normalized), (stride), (buffer), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribArrayObjectATI, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset))
#endif // defined(GL_ATI_vertex_attrib_array_object)
#if defined(GL_ATI_vertex_streams)
#ifndef glClientActiveVertexStreamATI
#define glClientActiveVertexStreamATI(stream) glatter_glClientActiveVertexStreamATI((stream))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClientActiveVertexStreamATI, (GLenum stream))
#ifndef glNormalStream3bATI
#define glNormalStream3bATI(stream, nx, ny, nz) glatter_glNormalStream3bATI((stream), (nx), (ny), (nz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3bATI, (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz))
#ifndef glNormalStream3bvATI
#define glNormalStream3bvATI(stream, coords) glatter_glNormalStream3bvATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3bvATI, (GLenum stream, const GLbyte *coords))
#ifndef glNormalStream3dATI
#define glNormalStream3dATI(stream, nx, ny, nz) glatter_glNormalStream3dATI((stream), (nx), (ny), (nz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3dATI, (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz))
#ifndef glNormalStream3dvATI
#define glNormalStream3dvATI(stream, coords) glatter_glNormalStream3dvATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3dvATI, (GLenum stream, const GLdouble *coords))
#ifndef glNormalStream3fATI
#define glNormalStream3fATI(stream, nx, ny, nz) glatter_glNormalStream3fATI((stream), (nx), (ny), (nz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3fATI, (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz))
#ifndef glNormalStream3fvATI
#define glNormalStream3fvATI(stream, coords) glatter_glNormalStream3fvATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3fvATI, (GLenum stream, const GLfloat *coords))
#ifndef glNormalStream3iATI
#define glNormalStream3iATI(stream, nx, ny, nz) glatter_glNormalStream3iATI((stream), (nx), (ny), (nz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3iATI, (GLenum stream, GLint nx, GLint ny, GLint nz))
#ifndef glNormalStream3ivATI
#define glNormalStream3ivATI(stream, coords) glatter_glNormalStream3ivATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3ivATI, (GLenum stream, const GLint *coords))
#ifndef glNormalStream3sATI
#define glNormalStream3sATI(stream, nx, ny, nz) glatter_glNormalStream3sATI((stream), (nx), (ny), (nz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3sATI, (GLenum stream, GLshort nx, GLshort ny, GLshort nz))
#ifndef glNormalStream3svATI
#define glNormalStream3svATI(stream, coords) glatter_glNormalStream3svATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3svATI, (GLenum stream, const GLshort *coords))
#ifndef glVertexBlendEnvfATI
#define glVertexBlendEnvfATI(pname, param) glatter_glVertexBlendEnvfATI((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexBlendEnvfATI, (GLenum pname, GLfloat param))
#ifndef glVertexBlendEnviATI
#define glVertexBlendEnviATI(pname, param) glatter_glVertexBlendEnviATI((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexBlendEnviATI, (GLenum pname, GLint param))
#ifndef glVertexStream1dATI
#define glVertexStream1dATI(stream, x) glatter_glVertexStream1dATI((stream), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1dATI, (GLenum stream, GLdouble x))
#ifndef glVertexStream1dvATI
#define glVertexStream1dvATI(stream, coords) glatter_glVertexStream1dvATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1dvATI, (GLenum stream, const GLdouble *coords))
#ifndef glVertexStream1fATI
#define glVertexStream1fATI(stream, x) glatter_glVertexStream1fATI((stream), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1fATI, (GLenum stream, GLfloat x))
#ifndef glVertexStream1fvATI
#define glVertexStream1fvATI(stream, coords) glatter_glVertexStream1fvATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1fvATI, (GLenum stream, const GLfloat *coords))
#ifndef glVertexStream1iATI
#define glVertexStream1iATI(stream, x) glatter_glVertexStream1iATI((stream), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1iATI, (GLenum stream, GLint x))
#ifndef glVertexStream1ivATI
#define glVertexStream1ivATI(stream, coords) glatter_glVertexStream1ivATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1ivATI, (GLenum stream, const GLint *coords))
#ifndef glVertexStream1sATI
#define glVertexStream1sATI(stream, x) glatter_glVertexStream1sATI((stream), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1sATI, (GLenum stream, GLshort x))
#ifndef glVertexStream1svATI
#define glVertexStream1svATI(stream, coords) glatter_glVertexStream1svATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1svATI, (GLenum stream, const GLshort *coords))
#ifndef glVertexStream2dATI
#define glVertexStream2dATI(stream, x, y) glatter_glVertexStream2dATI((stream), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2dATI, (GLenum stream, GLdouble x, GLdouble y))
#ifndef glVertexStream2dvATI
#define glVertexStream2dvATI(stream, coords) glatter_glVertexStream2dvATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2dvATI, (GLenum stream, const GLdouble *coords))
#ifndef glVertexStream2fATI
#define glVertexStream2fATI(stream, x, y) glatter_glVertexStream2fATI((stream), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2fATI, (GLenum stream, GLfloat x, GLfloat y))
#ifndef glVertexStream2fvATI
#define glVertexStream2fvATI(stream, coords) glatter_glVertexStream2fvATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2fvATI, (GLenum stream, const GLfloat *coords))
#ifndef glVertexStream2iATI
#define glVertexStream2iATI(stream, x, y) glatter_glVertexStream2iATI((stream), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2iATI, (GLenum stream, GLint x, GLint y))
#ifndef glVertexStream2ivATI
#define glVertexStream2ivATI(stream, coords) glatter_glVertexStream2ivATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2ivATI, (GLenum stream, const GLint *coords))
#ifndef glVertexStream2sATI
#define glVertexStream2sATI(stream, x, y) glatter_glVertexStream2sATI((stream), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2sATI, (GLenum stream, GLshort x, GLshort y))
#ifndef glVertexStream2svATI
#define glVertexStream2svATI(stream, coords) glatter_glVertexStream2svATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2svATI, (GLenum stream, const GLshort *coords))
#ifndef glVertexStream3dATI
#define glVertexStream3dATI(stream, x, y, z) glatter_glVertexStream3dATI((stream), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3dATI, (GLenum stream, GLdouble x, GLdouble y, GLdouble z))
#ifndef glVertexStream3dvATI
#define glVertexStream3dvATI(stream, coords) glatter_glVertexStream3dvATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3dvATI, (GLenum stream, const GLdouble *coords))
#ifndef glVertexStream3fATI
#define glVertexStream3fATI(stream, x, y, z) glatter_glVertexStream3fATI((stream), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3fATI, (GLenum stream, GLfloat x, GLfloat y, GLfloat z))
#ifndef glVertexStream3fvATI
#define glVertexStream3fvATI(stream, coords) glatter_glVertexStream3fvATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3fvATI, (GLenum stream, const GLfloat *coords))
#ifndef glVertexStream3iATI
#define glVertexStream3iATI(stream, x, y, z) glatter_glVertexStream3iATI((stream), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3iATI, (GLenum stream, GLint x, GLint y, GLint z))
#ifndef glVertexStream3ivATI
#define glVertexStream3ivATI(stream, coords) glatter_glVertexStream3ivATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3ivATI, (GLenum stream, const GLint *coords))
#ifndef glVertexStream3sATI
#define glVertexStream3sATI(stream, x, y, z) glatter_glVertexStream3sATI((stream), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3sATI, (GLenum stream, GLshort x, GLshort y, GLshort z))
#ifndef glVertexStream3svATI
#define glVertexStream3svATI(stream, coords) glatter_glVertexStream3svATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3svATI, (GLenum stream, const GLshort *coords))
#ifndef glVertexStream4dATI
#define glVertexStream4dATI(stream, x, y, z, w) glatter_glVertexStream4dATI((stream), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4dATI, (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#ifndef glVertexStream4dvATI
#define glVertexStream4dvATI(stream, coords) glatter_glVertexStream4dvATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4dvATI, (GLenum stream, const GLdouble *coords))
#ifndef glVertexStream4fATI
#define glVertexStream4fATI(stream, x, y, z, w) glatter_glVertexStream4fATI((stream), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4fATI, (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#ifndef glVertexStream4fvATI
#define glVertexStream4fvATI(stream, coords) glatter_glVertexStream4fvATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4fvATI, (GLenum stream, const GLfloat *coords))
#ifndef glVertexStream4iATI
#define glVertexStream4iATI(stream, x, y, z, w) glatter_glVertexStream4iATI((stream), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4iATI, (GLenum stream, GLint x, GLint y, GLint z, GLint w))
#ifndef glVertexStream4ivATI
#define glVertexStream4ivATI(stream, coords) glatter_glVertexStream4ivATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4ivATI, (GLenum stream, const GLint *coords))
#ifndef glVertexStream4sATI
#define glVertexStream4sATI(stream, x, y, z, w) glatter_glVertexStream4sATI((stream), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4sATI, (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w))
#ifndef glVertexStream4svATI
#define glVertexStream4svATI(stream, coords) glatter_glVertexStream4svATI((stream), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4svATI, (GLenum stream, const GLshort *coords))
#endif // defined(GL_ATI_vertex_streams)
#if defined(GL_EXT_EGL_image_storage)
#ifndef glEGLImageTargetTexStorageEXT
#define glEGLImageTargetTexStorageEXT(target, image, attrib_list) glatter_glEGLImageTargetTexStorageEXT((target), (image), (attrib_list))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEGLImageTargetTexStorageEXT, (GLenum target, GLeglImageOES image, const GLint* attrib_list))
#ifndef glEGLImageTargetTextureStorageEXT
#define glEGLImageTargetTextureStorageEXT(texture, image, attrib_list) glatter_glEGLImageTargetTextureStorageEXT((texture), (image), (attrib_list))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEGLImageTargetTextureStorageEXT, (GLuint texture, GLeglImageOES image, const GLint* attrib_list))
#endif // defined(GL_EXT_EGL_image_storage)
#if defined(GL_EXT_bindable_uniform)
#ifndef glGetUniformBufferSizeEXT
#define glGetUniformBufferSizeEXT(program, location) glatter_glGetUniformBufferSizeEXT((program), (location))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glGetUniformBufferSizeEXT, (GLuint program, GLint location))
#ifndef glGetUniformOffsetEXT
#define glGetUniformOffsetEXT(program, location) glatter_glGetUniformOffsetEXT((program), (location))
#endif
GLATTER_UBLOCK(GLintptr, APIENTRY, glGetUniformOffsetEXT, (GLuint program, GLint location))
#ifndef glUniformBufferEXT
#define glUniformBufferEXT(program, location, buffer) glatter_glUniformBufferEXT((program), (location), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformBufferEXT, (GLuint program, GLint location, GLuint buffer))
#endif // defined(GL_EXT_bindable_uniform)
#if defined(GL_EXT_blend_color)
#ifndef glBlendColorEXT
#define glBlendColorEXT(red, green, blue, alpha) glatter_glBlendColorEXT((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendColorEXT, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#endif // defined(GL_EXT_blend_color)
#if defined(GL_EXT_blend_equation_separate)
#ifndef glBlendEquationSeparateEXT
#define glBlendEquationSeparateEXT(modeRGB, modeAlpha) glatter_glBlendEquationSeparateEXT((modeRGB), (modeAlpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparateEXT, (GLenum modeRGB, GLenum modeAlpha))
#endif // defined(GL_EXT_blend_equation_separate)
#if defined(GL_EXT_blend_func_separate)
#ifndef glBlendFuncSeparateEXT
#define glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparateEXT((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateEXT, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#endif // defined(GL_EXT_blend_func_separate)
#if defined(GL_EXT_blend_minmax)
#ifndef glBlendEquationEXT
#define glBlendEquationEXT(mode) glatter_glBlendEquationEXT((mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationEXT, (GLenum mode))
#endif // defined(GL_EXT_blend_minmax)
#if defined(GL_EXT_color_subtable)
#ifndef glColorSubTableEXT
#define glColorSubTableEXT(target, start, count, format, type, data) glatter_glColorSubTableEXT((target), (start), (count), (format), (type), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorSubTableEXT, (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data))
#ifndef glCopyColorSubTableEXT
#define glCopyColorSubTableEXT(target, start, x, y, width) glatter_glCopyColorSubTableEXT((target), (start), (x), (y), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyColorSubTableEXT, (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width))
#endif // defined(GL_EXT_color_subtable)
#if defined(GL_EXT_compiled_vertex_array)
#ifndef glLockArraysEXT
#define glLockArraysEXT(first, count) glatter_glLockArraysEXT((first), (count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLockArraysEXT, (GLint first, GLsizei count))
#ifndef glUnlockArraysEXT
#define glUnlockArraysEXT() glatter_glUnlockArraysEXT()
#endif
GLATTER_UBLOCK(void, APIENTRY, glUnlockArraysEXT, (void))
#endif // defined(GL_EXT_compiled_vertex_array)
#if defined(GL_EXT_convolution)
#ifndef glConvolutionFilter1DEXT
#define glConvolutionFilter1DEXT(target, internalformat, width, format, type, image) glatter_glConvolutionFilter1DEXT((target), (internalformat), (width), (format), (type), (image))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConvolutionFilter1DEXT, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image))
#ifndef glConvolutionFilter2DEXT
#define glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image) glatter_glConvolutionFilter2DEXT((target), (internalformat), (width), (height), (format), (type), (image))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConvolutionFilter2DEXT, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image))
#ifndef glConvolutionParameterfEXT
#define glConvolutionParameterfEXT(target, pname, params) glatter_glConvolutionParameterfEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterfEXT, (GLenum target, GLenum pname, GLfloat params))
#ifndef glConvolutionParameterfvEXT
#define glConvolutionParameterfvEXT(target, pname, params) glatter_glConvolutionParameterfvEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterfvEXT, (GLenum target, GLenum pname, const GLfloat *params))
#ifndef glConvolutionParameteriEXT
#define glConvolutionParameteriEXT(target, pname, params) glatter_glConvolutionParameteriEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameteriEXT, (GLenum target, GLenum pname, GLint params))
#ifndef glConvolutionParameterivEXT
#define glConvolutionParameterivEXT(target, pname, params) glatter_glConvolutionParameterivEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterivEXT, (GLenum target, GLenum pname, const GLint *params))
#ifndef glCopyConvolutionFilter1DEXT
#define glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width) glatter_glCopyConvolutionFilter1DEXT((target), (internalformat), (x), (y), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyConvolutionFilter1DEXT, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#ifndef glCopyConvolutionFilter2DEXT
#define glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height) glatter_glCopyConvolutionFilter2DEXT((target), (internalformat), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyConvolutionFilter2DEXT, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height))
#ifndef glGetConvolutionFilterEXT
#define glGetConvolutionFilterEXT(target, format, type, image) glatter_glGetConvolutionFilterEXT((target), (format), (type), (image))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionFilterEXT, (GLenum target, GLenum format, GLenum type, void *image))
#ifndef glGetConvolutionParameterfvEXT
#define glGetConvolutionParameterfvEXT(target, pname, params) glatter_glGetConvolutionParameterfvEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetConvolutionParameterivEXT
#define glGetConvolutionParameterivEXT(target, pname, params) glatter_glGetConvolutionParameterivEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetSeparableFilterEXT
#define glGetSeparableFilterEXT(target, format, type, row, column, span) glatter_glGetSeparableFilterEXT((target), (format), (type), (row), (column), (span))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetSeparableFilterEXT, (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span))
#ifndef glSeparableFilter2DEXT
#define glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column) glatter_glSeparableFilter2DEXT((target), (internalformat), (width), (height), (format), (type), (row), (column))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSeparableFilter2DEXT, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column))
#endif // defined(GL_EXT_convolution)
#if defined(GL_EXT_coordinate_frame)
#ifndef glBinormal3bEXT
#define glBinormal3bEXT(bx, by, bz) glatter_glBinormal3bEXT((bx), (by), (bz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBinormal3bEXT, (GLbyte bx, GLbyte by, GLbyte bz))
#ifndef glBinormal3bvEXT
#define glBinormal3bvEXT(v) glatter_glBinormal3bvEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBinormal3bvEXT, (const GLbyte *v))
#ifndef glBinormal3dEXT
#define glBinormal3dEXT(bx, by, bz) glatter_glBinormal3dEXT((bx), (by), (bz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBinormal3dEXT, (GLdouble bx, GLdouble by, GLdouble bz))
#ifndef glBinormal3dvEXT
#define glBinormal3dvEXT(v) glatter_glBinormal3dvEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBinormal3dvEXT, (const GLdouble *v))
#ifndef glBinormal3fEXT
#define glBinormal3fEXT(bx, by, bz) glatter_glBinormal3fEXT((bx), (by), (bz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBinormal3fEXT, (GLfloat bx, GLfloat by, GLfloat bz))
#ifndef glBinormal3fvEXT
#define glBinormal3fvEXT(v) glatter_glBinormal3fvEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBinormal3fvEXT, (const GLfloat *v))
#ifndef glBinormal3iEXT
#define glBinormal3iEXT(bx, by, bz) glatter_glBinormal3iEXT((bx), (by), (bz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBinormal3iEXT, (GLint bx, GLint by, GLint bz))
#ifndef glBinormal3ivEXT
#define glBinormal3ivEXT(v) glatter_glBinormal3ivEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBinormal3ivEXT, (const GLint *v))
#ifndef glBinormal3sEXT
#define glBinormal3sEXT(bx, by, bz) glatter_glBinormal3sEXT((bx), (by), (bz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBinormal3sEXT, (GLshort bx, GLshort by, GLshort bz))
#ifndef glBinormal3svEXT
#define glBinormal3svEXT(v) glatter_glBinormal3svEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBinormal3svEXT, (const GLshort *v))
#ifndef glBinormalPointerEXT
#define glBinormalPointerEXT(type, stride, pointer) glatter_glBinormalPointerEXT((type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBinormalPointerEXT, (GLenum type, GLsizei stride, const void *pointer))
#ifndef glTangent3bEXT
#define glTangent3bEXT(tx, ty, tz) glatter_glTangent3bEXT((tx), (ty), (tz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTangent3bEXT, (GLbyte tx, GLbyte ty, GLbyte tz))
#ifndef glTangent3bvEXT
#define glTangent3bvEXT(v) glatter_glTangent3bvEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTangent3bvEXT, (const GLbyte *v))
#ifndef glTangent3dEXT
#define glTangent3dEXT(tx, ty, tz) glatter_glTangent3dEXT((tx), (ty), (tz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTangent3dEXT, (GLdouble tx, GLdouble ty, GLdouble tz))
#ifndef glTangent3dvEXT
#define glTangent3dvEXT(v) glatter_glTangent3dvEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTangent3dvEXT, (const GLdouble *v))
#ifndef glTangent3fEXT
#define glTangent3fEXT(tx, ty, tz) glatter_glTangent3fEXT((tx), (ty), (tz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTangent3fEXT, (GLfloat tx, GLfloat ty, GLfloat tz))
#ifndef glTangent3fvEXT
#define glTangent3fvEXT(v) glatter_glTangent3fvEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTangent3fvEXT, (const GLfloat *v))
#ifndef glTangent3iEXT
#define glTangent3iEXT(tx, ty, tz) glatter_glTangent3iEXT((tx), (ty), (tz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTangent3iEXT, (GLint tx, GLint ty, GLint tz))
#ifndef glTangent3ivEXT
#define glTangent3ivEXT(v) glatter_glTangent3ivEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTangent3ivEXT, (const GLint *v))
#ifndef glTangent3sEXT
#define glTangent3sEXT(tx, ty, tz) glatter_glTangent3sEXT((tx), (ty), (tz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTangent3sEXT, (GLshort tx, GLshort ty, GLshort tz))
#ifndef glTangent3svEXT
#define glTangent3svEXT(v) glatter_glTangent3svEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTangent3svEXT, (const GLshort *v))
#ifndef glTangentPointerEXT
#define glTangentPointerEXT(type, stride, pointer) glatter_glTangentPointerEXT((type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTangentPointerEXT, (GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_EXT_coordinate_frame)
#if defined(GL_EXT_copy_texture)
#ifndef glCopyTexImage1DEXT
#define glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1DEXT((target), (level), (internalformat), (x), (y), (width), (border))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage1DEXT, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#ifndef glCopyTexImage2DEXT
#define glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2DEXT((target), (level), (internalformat), (x), (y), (width), (height), (border))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage2DEXT, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#ifndef glCopyTexSubImage1DEXT
#define glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1DEXT((target), (level), (xoffset), (x), (y), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage1DEXT, (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#ifndef glCopyTexSubImage2DEXT
#define glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2DEXT((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage2DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#ifndef glCopyTexSubImage3DEXT
#define glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3DEXT((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage3DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_EXT_copy_texture)
#if defined(GL_EXT_cull_vertex)
#ifndef glCullParameterdvEXT
#define glCullParameterdvEXT(pname, params) glatter_glCullParameterdvEXT((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCullParameterdvEXT, (GLenum pname, GLdouble *params))
#ifndef glCullParameterfvEXT
#define glCullParameterfvEXT(pname, params) glatter_glCullParameterfvEXT((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCullParameterfvEXT, (GLenum pname, GLfloat *params))
#endif // defined(GL_EXT_cull_vertex)
#if defined(GL_EXT_debug_label)
#ifndef glGetObjectLabelEXT
#define glGetObjectLabelEXT(type, object, bufSize, length, label) glatter_glGetObjectLabelEXT((type), (object), (bufSize), (length), (label))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetObjectLabelEXT, (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label))
#ifndef glLabelObjectEXT
#define glLabelObjectEXT(type, object, length, label) glatter_glLabelObjectEXT((type), (object), (length), (label))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLabelObjectEXT, (GLenum type, GLuint object, GLsizei length, const GLchar *label))
#endif // defined(GL_EXT_debug_label)
#if defined(GL_EXT_debug_marker)
#ifndef glInsertEventMarkerEXT
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT((length), (marker))
#endif
GLATTER_UBLOCK(void, APIENTRY, glInsertEventMarkerEXT, (GLsizei length, const GLchar *marker))
#ifndef glPopGroupMarkerEXT
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT()
#endif
GLATTER_UBLOCK(void, APIENTRY, glPopGroupMarkerEXT, (void))
#ifndef glPushGroupMarkerEXT
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT((length), (marker))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPushGroupMarkerEXT, (GLsizei length, const GLchar *marker))
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_depth_bounds_test)
#ifndef glDepthBoundsEXT
#define glDepthBoundsEXT(zmin, zmax) glatter_glDepthBoundsEXT((zmin), (zmax))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDepthBoundsEXT, (GLclampd zmin, GLclampd zmax))
#endif // defined(GL_EXT_depth_bounds_test)
#if defined(GL_EXT_direct_state_access)
#ifndef glBindMultiTextureEXT
#define glBindMultiTextureEXT(texunit, target, texture) glatter_glBindMultiTextureEXT((texunit), (target), (texture))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindMultiTextureEXT, (GLenum texunit, GLenum target, GLuint texture))
#ifndef glCheckNamedFramebufferStatusEXT
#define glCheckNamedFramebufferStatusEXT(framebuffer, target) glatter_glCheckNamedFramebufferStatusEXT((framebuffer), (target))
#endif
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckNamedFramebufferStatusEXT, (GLuint framebuffer, GLenum target))
#ifndef glClearNamedBufferDataEXT
#define glClearNamedBufferDataEXT(buffer, internalformat, format, type, data) glatter_glClearNamedBufferDataEXT((buffer), (internalformat), (format), (type), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferDataEXT, (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data))
#ifndef glClearNamedBufferSubDataEXT
#define glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubDataEXT((buffer), (internalformat), (offset), (size), (format), (type), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferSubDataEXT, (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data))
#ifndef glClientAttribDefaultEXT
#define glClientAttribDefaultEXT(mask) glatter_glClientAttribDefaultEXT((mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClientAttribDefaultEXT, (GLbitfield mask))
#ifndef glCompressedMultiTexImage1DEXT
#define glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits) glatter_glCompressedMultiTexImage1DEXT((texunit), (target), (level), (internalformat), (width), (border), (imageSize), (bits))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits))
#ifndef glCompressedMultiTexImage2DEXT
#define glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits) glatter_glCompressedMultiTexImage2DEXT((texunit), (target), (level), (internalformat), (width), (height), (border), (imageSize), (bits))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits))
#ifndef glCompressedMultiTexImage3DEXT
#define glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) glatter_glCompressedMultiTexImage3DEXT((texunit), (target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (bits))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits))
#ifndef glCompressedMultiTexSubImage1DEXT
#define glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits) glatter_glCompressedMultiTexSubImage1DEXT((texunit), (target), (level), (xoffset), (width), (format), (imageSize), (bits))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits))
#ifndef glCompressedMultiTexSubImage2DEXT
#define glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) glatter_glCompressedMultiTexSubImage2DEXT((texunit), (target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (bits))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits))
#ifndef glCompressedMultiTexSubImage3DEXT
#define glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) glatter_glCompressedMultiTexSubImage3DEXT((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (bits))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits))
#ifndef glCompressedTextureImage1DEXT
#define glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits) glatter_glCompressedTextureImage1DEXT((texture), (target), (level), (internalformat), (width), (border), (imageSize), (bits))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits))
#ifndef glCompressedTextureImage2DEXT
#define glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits) glatter_glCompressedTextureImage2DEXT((texture), (target), (level), (internalformat), (width), (height), (border), (imageSize), (bits))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits))
#ifndef glCompressedTextureImage3DEXT
#define glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits) glatter_glCompressedTextureImage3DEXT((texture), (target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (bits))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureImage3DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits))
#ifndef glCompressedTextureSubImage1DEXT
#define glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits) glatter_glCompressedTextureSubImage1DEXT((texture), (target), (level), (xoffset), (width), (format), (imageSize), (bits))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits))
#ifndef glCompressedTextureSubImage2DEXT
#define glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) glatter_glCompressedTextureSubImage2DEXT((texture), (target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (bits))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits))
#ifndef glCompressedTextureSubImage3DEXT
#define glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) glatter_glCompressedTextureSubImage3DEXT((texture), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (bits))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits))
#ifndef glCopyMultiTexImage1DEXT
#define glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border) glatter_glCopyMultiTexImage1DEXT((texunit), (target), (level), (internalformat), (x), (y), (width), (border))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#ifndef glCopyMultiTexImage2DEXT
#define glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border) glatter_glCopyMultiTexImage2DEXT((texunit), (target), (level), (internalformat), (x), (y), (width), (height), (border))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#ifndef glCopyMultiTexSubImage1DEXT
#define glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width) glatter_glCopyMultiTexSubImage1DEXT((texunit), (target), (level), (xoffset), (x), (y), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#ifndef glCopyMultiTexSubImage2DEXT
#define glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyMultiTexSubImage2DEXT((texunit), (target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#ifndef glCopyMultiTexSubImage3DEXT
#define glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyMultiTexSubImage3DEXT((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#ifndef glCopyTextureImage1DEXT
#define glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border) glatter_glCopyTextureImage1DEXT((texture), (target), (level), (internalformat), (x), (y), (width), (border))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#ifndef glCopyTextureImage2DEXT
#define glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border) glatter_glCopyTextureImage2DEXT((texture), (target), (level), (internalformat), (x), (y), (width), (height), (border))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#ifndef glCopyTextureSubImage1DEXT
#define glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1DEXT((texture), (target), (level), (xoffset), (x), (y), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#ifndef glCopyTextureSubImage2DEXT
#define glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2DEXT((texture), (target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#ifndef glCopyTextureSubImage3DEXT
#define glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3DEXT((texture), (target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#ifndef glDisableClientStateIndexedEXT
#define glDisableClientStateIndexedEXT(array, index) glatter_glDisableClientStateIndexedEXT((array), (index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDisableClientStateIndexedEXT, (GLenum array, GLuint index))
#ifndef glDisableClientStateiEXT
#define glDisableClientStateiEXT(array, index) glatter_glDisableClientStateiEXT((array), (index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDisableClientStateiEXT, (GLenum array, GLuint index))
#ifndef glDisableIndexedEXT
#define glDisableIndexedEXT(target, index) glatter_glDisableIndexedEXT((target), (index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDisableIndexedEXT, (GLenum target, GLuint index))
#ifndef glDisableVertexArrayAttribEXT
#define glDisableVertexArrayAttribEXT(vaobj, index) glatter_glDisableVertexArrayAttribEXT((vaobj), (index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexArrayAttribEXT, (GLuint vaobj, GLuint index))
#ifndef glDisableVertexArrayEXT
#define glDisableVertexArrayEXT(vaobj, array) glatter_glDisableVertexArrayEXT((vaobj), (array))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexArrayEXT, (GLuint vaobj, GLenum array))
#ifndef glEnableClientStateIndexedEXT
#define glEnableClientStateIndexedEXT(array, index) glatter_glEnableClientStateIndexedEXT((array), (index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEnableClientStateIndexedEXT, (GLenum array, GLuint index))
#ifndef glEnableClientStateiEXT
#define glEnableClientStateiEXT(array, index) glatter_glEnableClientStateiEXT((array), (index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEnableClientStateiEXT, (GLenum array, GLuint index))
#ifndef glEnableIndexedEXT
#define glEnableIndexedEXT(target, index) glatter_glEnableIndexedEXT((target), (index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEnableIndexedEXT, (GLenum target, GLuint index))
#ifndef glEnableVertexArrayAttribEXT
#define glEnableVertexArrayAttribEXT(vaobj, index) glatter_glEnableVertexArrayAttribEXT((vaobj), (index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexArrayAttribEXT, (GLuint vaobj, GLuint index))
#ifndef glEnableVertexArrayEXT
#define glEnableVertexArrayEXT(vaobj, array) glatter_glEnableVertexArrayEXT((vaobj), (array))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexArrayEXT, (GLuint vaobj, GLenum array))
#ifndef glFlushMappedNamedBufferRangeEXT
#define glFlushMappedNamedBufferRangeEXT(buffer, offset, length) glatter_glFlushMappedNamedBufferRangeEXT((buffer), (offset), (length))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedNamedBufferRangeEXT, (GLuint buffer, GLintptr offset, GLsizeiptr length))
#ifndef glFramebufferDrawBufferEXT
#define glFramebufferDrawBufferEXT(framebuffer, mode) glatter_glFramebufferDrawBufferEXT((framebuffer), (mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferDrawBufferEXT, (GLuint framebuffer, GLenum mode))
#ifndef glFramebufferDrawBuffersEXT
#define glFramebufferDrawBuffersEXT(framebuffer, n, bufs) glatter_glFramebufferDrawBuffersEXT((framebuffer), (n), (bufs))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferDrawBuffersEXT, (GLuint framebuffer, GLsizei n, const GLenum *bufs))
#ifndef glFramebufferReadBufferEXT
#define glFramebufferReadBufferEXT(framebuffer, mode) glatter_glFramebufferReadBufferEXT((framebuffer), (mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferReadBufferEXT, (GLuint framebuffer, GLenum mode))
#ifndef glGenerateMultiTexMipmapEXT
#define glGenerateMultiTexMipmapEXT(texunit, target) glatter_glGenerateMultiTexMipmapEXT((texunit), (target))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenerateMultiTexMipmapEXT, (GLenum texunit, GLenum target))
#ifndef glGenerateTextureMipmapEXT
#define glGenerateTextureMipmapEXT(texture, target) glatter_glGenerateTextureMipmapEXT((texture), (target))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenerateTextureMipmapEXT, (GLuint texture, GLenum target))
#ifndef glGetBooleanIndexedvEXT
#define glGetBooleanIndexedvEXT(target, index, data) glatter_glGetBooleanIndexedvEXT((target), (index), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetBooleanIndexedvEXT, (GLenum target, GLuint index, GLboolean *data))
#ifndef glGetCompressedMultiTexImageEXT
#define glGetCompressedMultiTexImageEXT(texunit, target, lod, img) glatter_glGetCompressedMultiTexImageEXT((texunit), (target), (lod), (img))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedMultiTexImageEXT, (GLenum texunit, GLenum target, GLint lod, void *img))
#ifndef glGetCompressedTextureImageEXT
#define glGetCompressedTextureImageEXT(texture, target, lod, img) glatter_glGetCompressedTextureImageEXT((texture), (target), (lod), (img))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureImageEXT, (GLuint texture, GLenum target, GLint lod, void *img))
#ifndef glGetDoubleIndexedvEXT
#define glGetDoubleIndexedvEXT(target, index, data) glatter_glGetDoubleIndexedvEXT((target), (index), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetDoubleIndexedvEXT, (GLenum target, GLuint index, GLdouble *data))
#ifndef glGetDoublei_vEXT
#define glGetDoublei_vEXT(pname, index, params) glatter_glGetDoublei_vEXT((pname), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetDoublei_vEXT, (GLenum pname, GLuint index, GLdouble *params))
#ifndef glGetFloatIndexedvEXT
#define glGetFloatIndexedvEXT(target, index, data) glatter_glGetFloatIndexedvEXT((target), (index), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFloatIndexedvEXT, (GLenum target, GLuint index, GLfloat *data))
#ifndef glGetFloati_vEXT
#define glGetFloati_vEXT(pname, index, params) glatter_glGetFloati_vEXT((pname), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFloati_vEXT, (GLenum pname, GLuint index, GLfloat *params))
#ifndef glGetFramebufferParameterivEXT
#define glGetFramebufferParameterivEXT(framebuffer, pname, params) glatter_glGetFramebufferParameterivEXT((framebuffer), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferParameterivEXT, (GLuint framebuffer, GLenum pname, GLint *params))
#ifndef glGetIntegerIndexedvEXT
#define glGetIntegerIndexedvEXT(target, index, data) glatter_glGetIntegerIndexedvEXT((target), (index), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerIndexedvEXT, (GLenum target, GLuint index, GLint *data))
#ifndef glGetMultiTexEnvfvEXT
#define glGetMultiTexEnvfvEXT(texunit, target, pname, params) glatter_glGetMultiTexEnvfvEXT((texunit), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexEnvfvEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetMultiTexEnvivEXT
#define glGetMultiTexEnvivEXT(texunit, target, pname, params) glatter_glGetMultiTexEnvivEXT((texunit), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexEnvivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint *params))
#ifndef glGetMultiTexGendvEXT
#define glGetMultiTexGendvEXT(texunit, coord, pname, params) glatter_glGetMultiTexGendvEXT((texunit), (coord), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexGendvEXT, (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params))
#ifndef glGetMultiTexGenfvEXT
#define glGetMultiTexGenfvEXT(texunit, coord, pname, params) glatter_glGetMultiTexGenfvEXT((texunit), (coord), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexGenfvEXT, (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params))
#ifndef glGetMultiTexGenivEXT
#define glGetMultiTexGenivEXT(texunit, coord, pname, params) glatter_glGetMultiTexGenivEXT((texunit), (coord), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexGenivEXT, (GLenum texunit, GLenum coord, GLenum pname, GLint *params))
#ifndef glGetMultiTexImageEXT
#define glGetMultiTexImageEXT(texunit, target, level, format, type, pixels) glatter_glGetMultiTexImageEXT((texunit), (target), (level), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexImageEXT, (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels))
#ifndef glGetMultiTexLevelParameterfvEXT
#define glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params) glatter_glGetMultiTexLevelParameterfvEXT((texunit), (target), (level), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexLevelParameterfvEXT, (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params))
#ifndef glGetMultiTexLevelParameterivEXT
#define glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params) glatter_glGetMultiTexLevelParameterivEXT((texunit), (target), (level), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexLevelParameterivEXT, (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params))
#ifndef glGetMultiTexParameterIivEXT
#define glGetMultiTexParameterIivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterIivEXT((texunit), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterIivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint *params))
#ifndef glGetMultiTexParameterIuivEXT
#define glGetMultiTexParameterIuivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterIuivEXT((texunit), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterIuivEXT, (GLenum texunit, GLenum target, GLenum pname, GLuint *params))
#ifndef glGetMultiTexParameterfvEXT
#define glGetMultiTexParameterfvEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterfvEXT((texunit), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterfvEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetMultiTexParameterivEXT
#define glGetMultiTexParameterivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterivEXT((texunit), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint *params))
#ifndef glGetNamedBufferParameterivEXT
#define glGetNamedBufferParameterivEXT(buffer, pname, params) glatter_glGetNamedBufferParameterivEXT((buffer), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameterivEXT, (GLuint buffer, GLenum pname, GLint *params))
#ifndef glGetNamedBufferPointervEXT
#define glGetNamedBufferPointervEXT(buffer, pname, params) glatter_glGetNamedBufferPointervEXT((buffer), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferPointervEXT, (GLuint buffer, GLenum pname, void **params))
#ifndef glGetNamedBufferSubDataEXT
#define glGetNamedBufferSubDataEXT(buffer, offset, size, data) glatter_glGetNamedBufferSubDataEXT((buffer), (offset), (size), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferSubDataEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data))
#ifndef glGetNamedFramebufferAttachmentParameterivEXT
#define glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameterivEXT((framebuffer), (attachment), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferAttachmentParameterivEXT, (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params))
#ifndef glGetNamedFramebufferParameterivEXT
#define glGetNamedFramebufferParameterivEXT(framebuffer, pname, params) glatter_glGetNamedFramebufferParameterivEXT((framebuffer), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferParameterivEXT, (GLuint framebuffer, GLenum pname, GLint *params))
#ifndef glGetNamedProgramLocalParameterIivEXT
#define glGetNamedProgramLocalParameterIivEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterIivEXT((program), (target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterIivEXT, (GLuint program, GLenum target, GLuint index, GLint *params))
#ifndef glGetNamedProgramLocalParameterIuivEXT
#define glGetNamedProgramLocalParameterIuivEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterIuivEXT((program), (target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterIuivEXT, (GLuint program, GLenum target, GLuint index, GLuint *params))
#ifndef glGetNamedProgramLocalParameterdvEXT
#define glGetNamedProgramLocalParameterdvEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterdvEXT((program), (target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterdvEXT, (GLuint program, GLenum target, GLuint index, GLdouble *params))
#ifndef glGetNamedProgramLocalParameterfvEXT
#define glGetNamedProgramLocalParameterfvEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterfvEXT((program), (target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterfvEXT, (GLuint program, GLenum target, GLuint index, GLfloat *params))
#ifndef glGetNamedProgramStringEXT
#define glGetNamedProgramStringEXT(program, target, pname, string) glatter_glGetNamedProgramStringEXT((program), (target), (pname), (string))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramStringEXT, (GLuint program, GLenum target, GLenum pname, void *string))
#ifndef glGetNamedProgramivEXT
#define glGetNamedProgramivEXT(program, target, pname, params) glatter_glGetNamedProgramivEXT((program), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramivEXT, (GLuint program, GLenum target, GLenum pname, GLint *params))
#ifndef glGetNamedRenderbufferParameterivEXT
#define glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameterivEXT((renderbuffer), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedRenderbufferParameterivEXT, (GLuint renderbuffer, GLenum pname, GLint *params))
#ifndef glGetPointerIndexedvEXT
#define glGetPointerIndexedvEXT(target, index, data) glatter_glGetPointerIndexedvEXT((target), (index), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPointerIndexedvEXT, (GLenum target, GLuint index, void **data))
#ifndef glGetPointeri_vEXT
#define glGetPointeri_vEXT(pname, index, params) glatter_glGetPointeri_vEXT((pname), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPointeri_vEXT, (GLenum pname, GLuint index, void **params))
#ifndef glGetTextureImageEXT
#define glGetTextureImageEXT(texture, target, level, format, type, pixels) glatter_glGetTextureImageEXT((texture), (target), (level), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureImageEXT, (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels))
#ifndef glGetTextureLevelParameterfvEXT
#define glGetTextureLevelParameterfvEXT(texture, target, level, pname, params) glatter_glGetTextureLevelParameterfvEXT((texture), (target), (level), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameterfvEXT, (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params))
#ifndef glGetTextureLevelParameterivEXT
#define glGetTextureLevelParameterivEXT(texture, target, level, pname, params) glatter_glGetTextureLevelParameterivEXT((texture), (target), (level), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameterivEXT, (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params))
#ifndef glGetTextureParameterIivEXT
#define glGetTextureParameterIivEXT(texture, target, pname, params) glatter_glGetTextureParameterIivEXT((texture), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIivEXT, (GLuint texture, GLenum target, GLenum pname, GLint *params))
#ifndef glGetTextureParameterIuivEXT
#define glGetTextureParameterIuivEXT(texture, target, pname, params) glatter_glGetTextureParameterIuivEXT((texture), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIuivEXT, (GLuint texture, GLenum target, GLenum pname, GLuint *params))
#ifndef glGetTextureParameterfvEXT
#define glGetTextureParameterfvEXT(texture, target, pname, params) glatter_glGetTextureParameterfvEXT((texture), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterfvEXT, (GLuint texture, GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetTextureParameterivEXT
#define glGetTextureParameterivEXT(texture, target, pname, params) glatter_glGetTextureParameterivEXT((texture), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterivEXT, (GLuint texture, GLenum target, GLenum pname, GLint *params))
#ifndef glGetVertexArrayIntegeri_vEXT
#define glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param) glatter_glGetVertexArrayIntegeri_vEXT((vaobj), (index), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIntegeri_vEXT, (GLuint vaobj, GLuint index, GLenum pname, GLint *param))
#ifndef glGetVertexArrayIntegervEXT
#define glGetVertexArrayIntegervEXT(vaobj, pname, param) glatter_glGetVertexArrayIntegervEXT((vaobj), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIntegervEXT, (GLuint vaobj, GLenum pname, GLint *param))
#ifndef glGetVertexArrayPointeri_vEXT
#define glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param) glatter_glGetVertexArrayPointeri_vEXT((vaobj), (index), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayPointeri_vEXT, (GLuint vaobj, GLuint index, GLenum pname, void **param))
#ifndef glGetVertexArrayPointervEXT
#define glGetVertexArrayPointervEXT(vaobj, pname, param) glatter_glGetVertexArrayPointervEXT((vaobj), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayPointervEXT, (GLuint vaobj, GLenum pname, void **param))
#ifndef glIsEnabledIndexedEXT
#define glIsEnabledIndexedEXT(target, index) glatter_glIsEnabledIndexedEXT((target), (index))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabledIndexedEXT, (GLenum target, GLuint index))
#ifndef glMapNamedBufferEXT
#define glMapNamedBufferEXT(buffer, access) glatter_glMapNamedBufferEXT((buffer), (access))
#endif
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBufferEXT, (GLuint buffer, GLenum access))
#ifndef glMapNamedBufferRangeEXT
#define glMapNamedBufferRangeEXT(buffer, offset, length, access) glatter_glMapNamedBufferRangeEXT((buffer), (offset), (length), (access))
#endif
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBufferRangeEXT, (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access))
#ifndef glMatrixFrustumEXT
#define glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixFrustumEXT((mode), (left), (right), (bottom), (top), (zNear), (zFar))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixFrustumEXT, (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar))
#ifndef glMatrixLoadIdentityEXT
#define glMatrixLoadIdentityEXT(mode) glatter_glMatrixLoadIdentityEXT((mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadIdentityEXT, (GLenum mode))
#ifndef glMatrixLoadTransposedEXT
#define glMatrixLoadTransposedEXT(mode, m) glatter_glMatrixLoadTransposedEXT((mode), (m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadTransposedEXT, (GLenum mode, const GLdouble *m))
#ifndef glMatrixLoadTransposefEXT
#define glMatrixLoadTransposefEXT(mode, m) glatter_glMatrixLoadTransposefEXT((mode), (m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadTransposefEXT, (GLenum mode, const GLfloat *m))
#ifndef glMatrixLoaddEXT
#define glMatrixLoaddEXT(mode, m) glatter_glMatrixLoaddEXT((mode), (m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoaddEXT, (GLenum mode, const GLdouble *m))
#ifndef glMatrixLoadfEXT
#define glMatrixLoadfEXT(mode, m) glatter_glMatrixLoadfEXT((mode), (m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadfEXT, (GLenum mode, const GLfloat *m))
#ifndef glMatrixMultTransposedEXT
#define glMatrixMultTransposedEXT(mode, m) glatter_glMatrixMultTransposedEXT((mode), (m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultTransposedEXT, (GLenum mode, const GLdouble *m))
#ifndef glMatrixMultTransposefEXT
#define glMatrixMultTransposefEXT(mode, m) glatter_glMatrixMultTransposefEXT((mode), (m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultTransposefEXT, (GLenum mode, const GLfloat *m))
#ifndef glMatrixMultdEXT
#define glMatrixMultdEXT(mode, m) glatter_glMatrixMultdEXT((mode), (m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultdEXT, (GLenum mode, const GLdouble *m))
#ifndef glMatrixMultfEXT
#define glMatrixMultfEXT(mode, m) glatter_glMatrixMultfEXT((mode), (m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultfEXT, (GLenum mode, const GLfloat *m))
#ifndef glMatrixOrthoEXT
#define glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixOrthoEXT((mode), (left), (right), (bottom), (top), (zNear), (zFar))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixOrthoEXT, (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar))
#ifndef glMatrixPopEXT
#define glMatrixPopEXT(mode) glatter_glMatrixPopEXT((mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixPopEXT, (GLenum mode))
#ifndef glMatrixPushEXT
#define glMatrixPushEXT(mode) glatter_glMatrixPushEXT((mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixPushEXT, (GLenum mode))
#ifndef glMatrixRotatedEXT
#define glMatrixRotatedEXT(mode, angle, x, y, z) glatter_glMatrixRotatedEXT((mode), (angle), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixRotatedEXT, (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z))
#ifndef glMatrixRotatefEXT
#define glMatrixRotatefEXT(mode, angle, x, y, z) glatter_glMatrixRotatefEXT((mode), (angle), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixRotatefEXT, (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z))
#ifndef glMatrixScaledEXT
#define glMatrixScaledEXT(mode, x, y, z) glatter_glMatrixScaledEXT((mode), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixScaledEXT, (GLenum mode, GLdouble x, GLdouble y, GLdouble z))
#ifndef glMatrixScalefEXT
#define glMatrixScalefEXT(mode, x, y, z) glatter_glMatrixScalefEXT((mode), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixScalefEXT, (GLenum mode, GLfloat x, GLfloat y, GLfloat z))
#ifndef glMatrixTranslatedEXT
#define glMatrixTranslatedEXT(mode, x, y, z) glatter_glMatrixTranslatedEXT((mode), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixTranslatedEXT, (GLenum mode, GLdouble x, GLdouble y, GLdouble z))
#ifndef glMatrixTranslatefEXT
#define glMatrixTranslatefEXT(mode, x, y, z) glatter_glMatrixTranslatefEXT((mode), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixTranslatefEXT, (GLenum mode, GLfloat x, GLfloat y, GLfloat z))
#ifndef glMultiTexBufferEXT
#define glMultiTexBufferEXT(texunit, target, internalformat, buffer) glatter_glMultiTexBufferEXT((texunit), (target), (internalformat), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexBufferEXT, (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer))
#ifndef glMultiTexCoordPointerEXT
#define glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer) glatter_glMultiTexCoordPointerEXT((texunit), (size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordPointerEXT, (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer))
#ifndef glMultiTexEnvfEXT
#define glMultiTexEnvfEXT(texunit, target, pname, param) glatter_glMultiTexEnvfEXT((texunit), (target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnvfEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat param))
#ifndef glMultiTexEnvfvEXT
#define glMultiTexEnvfvEXT(texunit, target, pname, params) glatter_glMultiTexEnvfvEXT((texunit), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnvfvEXT, (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params))
#ifndef glMultiTexEnviEXT
#define glMultiTexEnviEXT(texunit, target, pname, param) glatter_glMultiTexEnviEXT((texunit), (target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnviEXT, (GLenum texunit, GLenum target, GLenum pname, GLint param))
#ifndef glMultiTexEnvivEXT
#define glMultiTexEnvivEXT(texunit, target, pname, params) glatter_glMultiTexEnvivEXT((texunit), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnvivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint *params))
#ifndef glMultiTexGendEXT
#define glMultiTexGendEXT(texunit, coord, pname, param) glatter_glMultiTexGendEXT((texunit), (coord), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGendEXT, (GLenum texunit, GLenum coord, GLenum pname, GLdouble param))
#ifndef glMultiTexGendvEXT
#define glMultiTexGendvEXT(texunit, coord, pname, params) glatter_glMultiTexGendvEXT((texunit), (coord), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGendvEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params))
#ifndef glMultiTexGenfEXT
#define glMultiTexGenfEXT(texunit, coord, pname, param) glatter_glMultiTexGenfEXT((texunit), (coord), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGenfEXT, (GLenum texunit, GLenum coord, GLenum pname, GLfloat param))
#ifndef glMultiTexGenfvEXT
#define glMultiTexGenfvEXT(texunit, coord, pname, params) glatter_glMultiTexGenfvEXT((texunit), (coord), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGenfvEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params))
#ifndef glMultiTexGeniEXT
#define glMultiTexGeniEXT(texunit, coord, pname, param) glatter_glMultiTexGeniEXT((texunit), (coord), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGeniEXT, (GLenum texunit, GLenum coord, GLenum pname, GLint param))
#ifndef glMultiTexGenivEXT
#define glMultiTexGenivEXT(texunit, coord, pname, params) glatter_glMultiTexGenivEXT((texunit), (coord), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGenivEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLint *params))
#ifndef glMultiTexImage1DEXT
#define glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels) glatter_glMultiTexImage1DEXT((texunit), (target), (level), (internalformat), (width), (border), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels))
#ifndef glMultiTexImage2DEXT
#define glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels) glatter_glMultiTexImage2DEXT((texunit), (target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#ifndef glMultiTexImage3DEXT
#define glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glMultiTexImage3DEXT((texunit), (target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#ifndef glMultiTexParameterIivEXT
#define glMultiTexParameterIivEXT(texunit, target, pname, params) glatter_glMultiTexParameterIivEXT((texunit), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterIivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint *params))
#ifndef glMultiTexParameterIuivEXT
#define glMultiTexParameterIuivEXT(texunit, target, pname, params) glatter_glMultiTexParameterIuivEXT((texunit), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterIuivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLuint *params))
#ifndef glMultiTexParameterfEXT
#define glMultiTexParameterfEXT(texunit, target, pname, param) glatter_glMultiTexParameterfEXT((texunit), (target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterfEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat param))
#ifndef glMultiTexParameterfvEXT
#define glMultiTexParameterfvEXT(texunit, target, pname, params) glatter_glMultiTexParameterfvEXT((texunit), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterfvEXT, (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params))
#ifndef glMultiTexParameteriEXT
#define glMultiTexParameteriEXT(texunit, target, pname, param) glatter_glMultiTexParameteriEXT((texunit), (target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameteriEXT, (GLenum texunit, GLenum target, GLenum pname, GLint param))
#ifndef glMultiTexParameterivEXT
#define glMultiTexParameterivEXT(texunit, target, pname, params) glatter_glMultiTexParameterivEXT((texunit), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint *params))
#ifndef glMultiTexRenderbufferEXT
#define glMultiTexRenderbufferEXT(texunit, target, renderbuffer) glatter_glMultiTexRenderbufferEXT((texunit), (target), (renderbuffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexRenderbufferEXT, (GLenum texunit, GLenum target, GLuint renderbuffer))
#ifndef glMultiTexSubImage1DEXT
#define glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels) glatter_glMultiTexSubImage1DEXT((texunit), (target), (level), (xoffset), (width), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#ifndef glMultiTexSubImage2DEXT
#define glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glMultiTexSubImage2DEXT((texunit), (target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#ifndef glMultiTexSubImage3DEXT
#define glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glMultiTexSubImage3DEXT((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#ifndef glNamedBufferDataEXT
#define glNamedBufferDataEXT(buffer, size, data, usage) glatter_glNamedBufferDataEXT((buffer), (size), (data), (usage))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferDataEXT, (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage))
#ifndef glNamedBufferStorageEXT
#define glNamedBufferStorageEXT(buffer, size, data, flags) glatter_glNamedBufferStorageEXT((buffer), (size), (data), (flags))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferStorageEXT, (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags))
#ifndef glNamedBufferSubDataEXT
#define glNamedBufferSubDataEXT(buffer, offset, size, data) glatter_glNamedBufferSubDataEXT((buffer), (offset), (size), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferSubDataEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data))
#ifndef glNamedCopyBufferSubDataEXT
#define glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glNamedCopyBufferSubDataEXT((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedCopyBufferSubDataEXT, (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#ifndef glNamedFramebufferParameteriEXT
#define glNamedFramebufferParameteriEXT(framebuffer, pname, param) glatter_glNamedFramebufferParameteriEXT((framebuffer), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferParameteriEXT, (GLuint framebuffer, GLenum pname, GLint param))
#ifndef glNamedFramebufferRenderbufferEXT
#define glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbufferEXT((framebuffer), (attachment), (renderbuffertarget), (renderbuffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferRenderbufferEXT, (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#ifndef glNamedFramebufferTexture1DEXT
#define glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level) glatter_glNamedFramebufferTexture1DEXT((framebuffer), (attachment), (textarget), (texture), (level))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture1DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#ifndef glNamedFramebufferTexture2DEXT
#define glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level) glatter_glNamedFramebufferTexture2DEXT((framebuffer), (attachment), (textarget), (texture), (level))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture2DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#ifndef glNamedFramebufferTexture3DEXT
#define glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset) glatter_glNamedFramebufferTexture3DEXT((framebuffer), (attachment), (textarget), (texture), (level), (zoffset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture3DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#ifndef glNamedFramebufferTextureEXT
#define glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTextureEXT((framebuffer), (attachment), (texture), (level))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level))
#ifndef glNamedFramebufferTextureFaceEXT
#define glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face) glatter_glNamedFramebufferTextureFaceEXT((framebuffer), (attachment), (texture), (level), (face))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureFaceEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face))
#ifndef glNamedFramebufferTextureLayerEXT
#define glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayerEXT((framebuffer), (attachment), (texture), (level), (layer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureLayerEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer))
#ifndef glNamedProgramLocalParameter4dEXT
#define glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameter4dEXT((program), (target), (index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4dEXT, (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#ifndef glNamedProgramLocalParameter4dvEXT
#define glNamedProgramLocalParameter4dvEXT(program, target, index, params) glatter_glNamedProgramLocalParameter4dvEXT((program), (target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4dvEXT, (GLuint program, GLenum target, GLuint index, const GLdouble *params))
#ifndef glNamedProgramLocalParameter4fEXT
#define glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameter4fEXT((program), (target), (index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4fEXT, (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#ifndef glNamedProgramLocalParameter4fvEXT
#define glNamedProgramLocalParameter4fvEXT(program, target, index, params) glatter_glNamedProgramLocalParameter4fvEXT((program), (target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4fvEXT, (GLuint program, GLenum target, GLuint index, const GLfloat *params))
#ifndef glNamedProgramLocalParameterI4iEXT
#define glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameterI4iEXT((program), (target), (index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4iEXT, (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w))
#ifndef glNamedProgramLocalParameterI4ivEXT
#define glNamedProgramLocalParameterI4ivEXT(program, target, index, params) glatter_glNamedProgramLocalParameterI4ivEXT((program), (target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4ivEXT, (GLuint program, GLenum target, GLuint index, const GLint *params))
#ifndef glNamedProgramLocalParameterI4uiEXT
#define glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameterI4uiEXT((program), (target), (index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4uiEXT, (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#ifndef glNamedProgramLocalParameterI4uivEXT
#define glNamedProgramLocalParameterI4uivEXT(program, target, index, params) glatter_glNamedProgramLocalParameterI4uivEXT((program), (target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4uivEXT, (GLuint program, GLenum target, GLuint index, const GLuint *params))
#ifndef glNamedProgramLocalParameters4fvEXT
#define glNamedProgramLocalParameters4fvEXT(program, target, index, count, params) glatter_glNamedProgramLocalParameters4fvEXT((program), (target), (index), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameters4fvEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params))
#ifndef glNamedProgramLocalParametersI4ivEXT
#define glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params) glatter_glNamedProgramLocalParametersI4ivEXT((program), (target), (index), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParametersI4ivEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params))
#ifndef glNamedProgramLocalParametersI4uivEXT
#define glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params) glatter_glNamedProgramLocalParametersI4uivEXT((program), (target), (index), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParametersI4uivEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params))
#ifndef glNamedProgramStringEXT
#define glNamedProgramStringEXT(program, target, format, len, string) glatter_glNamedProgramStringEXT((program), (target), (format), (len), (string))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramStringEXT, (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string))
#ifndef glNamedRenderbufferStorageEXT
#define glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorageEXT((renderbuffer), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageEXT, (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glNamedRenderbufferStorageMultisampleCoverageEXT
#define glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleCoverageEXT((renderbuffer), (coverageSamples), (colorSamples), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisampleCoverageEXT, (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glNamedRenderbufferStorageMultisampleEXT
#define glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleEXT((renderbuffer), (samples), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisampleEXT, (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glProgramUniform1dEXT
#define glProgramUniform1dEXT(program, location, x) glatter_glProgramUniform1dEXT((program), (location), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1dEXT, (GLuint program, GLint location, GLdouble x))
#ifndef glProgramUniform1dvEXT
#define glProgramUniform1dvEXT(program, location, count, value) glatter_glProgramUniform1dvEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#ifndef glProgramUniform1fEXT
#define glProgramUniform1fEXT(program, location, v0) glatter_glProgramUniform1fEXT((program), (location), (v0))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1fEXT, (GLuint program, GLint location, GLfloat v0))
#ifndef glProgramUniform1fvEXT
#define glProgramUniform1fvEXT(program, location, count, value) glatter_glProgramUniform1fvEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#ifndef glProgramUniform1iEXT
#define glProgramUniform1iEXT(program, location, v0) glatter_glProgramUniform1iEXT((program), (location), (v0))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1iEXT, (GLuint program, GLint location, GLint v0))
#ifndef glProgramUniform1ivEXT
#define glProgramUniform1ivEXT(program, location, count, value) glatter_glProgramUniform1ivEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#ifndef glProgramUniform1uiEXT
#define glProgramUniform1uiEXT(program, location, v0) glatter_glProgramUniform1uiEXT((program), (location), (v0))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1uiEXT, (GLuint program, GLint location, GLuint v0))
#ifndef glProgramUniform1uivEXT
#define glProgramUniform1uivEXT(program, location, count, value) glatter_glProgramUniform1uivEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#ifndef glProgramUniform2dEXT
#define glProgramUniform2dEXT(program, location, x, y) glatter_glProgramUniform2dEXT((program), (location), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y))
#ifndef glProgramUniform2dvEXT
#define glProgramUniform2dvEXT(program, location, count, value) glatter_glProgramUniform2dvEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#ifndef glProgramUniform2fEXT
#define glProgramUniform2fEXT(program, location, v0, v1) glatter_glProgramUniform2fEXT((program), (location), (v0), (v1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#ifndef glProgramUniform2fvEXT
#define glProgramUniform2fvEXT(program, location, count, value) glatter_glProgramUniform2fvEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#ifndef glProgramUniform2iEXT
#define glProgramUniform2iEXT(program, location, v0, v1) glatter_glProgramUniform2iEXT((program), (location), (v0), (v1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2iEXT, (GLuint program, GLint location, GLint v0, GLint v1))
#ifndef glProgramUniform2ivEXT
#define glProgramUniform2ivEXT(program, location, count, value) glatter_glProgramUniform2ivEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#ifndef glProgramUniform2uiEXT
#define glProgramUniform2uiEXT(program, location, v0, v1) glatter_glProgramUniform2uiEXT((program), (location), (v0), (v1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1))
#ifndef glProgramUniform2uivEXT
#define glProgramUniform2uivEXT(program, location, count, value) glatter_glProgramUniform2uivEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#ifndef glProgramUniform3dEXT
#define glProgramUniform3dEXT(program, location, x, y, z) glatter_glProgramUniform3dEXT((program), (location), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z))
#ifndef glProgramUniform3dvEXT
#define glProgramUniform3dvEXT(program, location, count, value) glatter_glProgramUniform3dvEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#ifndef glProgramUniform3fEXT
#define glProgramUniform3fEXT(program, location, v0, v1, v2) glatter_glProgramUniform3fEXT((program), (location), (v0), (v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#ifndef glProgramUniform3fvEXT
#define glProgramUniform3fvEXT(program, location, count, value) glatter_glProgramUniform3fvEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#ifndef glProgramUniform3iEXT
#define glProgramUniform3iEXT(program, location, v0, v1, v2) glatter_glProgramUniform3iEXT((program), (location), (v0), (v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3iEXT, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#ifndef glProgramUniform3ivEXT
#define glProgramUniform3ivEXT(program, location, count, value) glatter_glProgramUniform3ivEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#ifndef glProgramUniform3uiEXT
#define glProgramUniform3uiEXT(program, location, v0, v1, v2) glatter_glProgramUniform3uiEXT((program), (location), (v0), (v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#ifndef glProgramUniform3uivEXT
#define glProgramUniform3uivEXT(program, location, count, value) glatter_glProgramUniform3uivEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#ifndef glProgramUniform4dEXT
#define glProgramUniform4dEXT(program, location, x, y, z, w) glatter_glProgramUniform4dEXT((program), (location), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#ifndef glProgramUniform4dvEXT
#define glProgramUniform4dvEXT(program, location, count, value) glatter_glProgramUniform4dvEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#ifndef glProgramUniform4fEXT
#define glProgramUniform4fEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4fEXT((program), (location), (v0), (v1), (v2), (v3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#ifndef glProgramUniform4fvEXT
#define glProgramUniform4fvEXT(program, location, count, value) glatter_glProgramUniform4fvEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#ifndef glProgramUniform4iEXT
#define glProgramUniform4iEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4iEXT((program), (location), (v0), (v1), (v2), (v3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4iEXT, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#ifndef glProgramUniform4ivEXT
#define glProgramUniform4ivEXT(program, location, count, value) glatter_glProgramUniform4ivEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#ifndef glProgramUniform4uiEXT
#define glProgramUniform4uiEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4uiEXT((program), (location), (v0), (v1), (v2), (v3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#ifndef glProgramUniform4uivEXT
#define glProgramUniform4uivEXT(program, location, count, value) glatter_glProgramUniform4uivEXT((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#ifndef glProgramUniformMatrix2dvEXT
#define glProgramUniformMatrix2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix2fvEXT
#define glProgramUniformMatrix2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix2x3dvEXT
#define glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix2x3fvEXT
#define glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix2x4dvEXT
#define glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix2x4fvEXT
#define glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix3dvEXT
#define glProgramUniformMatrix3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix3fvEXT
#define glProgramUniformMatrix3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix3x2dvEXT
#define glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix3x2fvEXT
#define glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix3x4dvEXT
#define glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix3x4fvEXT
#define glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix4dvEXT
#define glProgramUniformMatrix4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix4fvEXT
#define glProgramUniformMatrix4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix4x2dvEXT
#define glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix4x2fvEXT
#define glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix4x3dvEXT
#define glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix4x3fvEXT
#define glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fvEXT((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glPushClientAttribDefaultEXT
#define glPushClientAttribDefaultEXT(mask) glatter_glPushClientAttribDefaultEXT((mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPushClientAttribDefaultEXT, (GLbitfield mask))
#ifndef glTextureBufferEXT
#define glTextureBufferEXT(texture, target, internalformat, buffer) glatter_glTextureBufferEXT((texture), (target), (internalformat), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureBufferEXT, (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer))
#ifndef glTextureBufferRangeEXT
#define glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size) glatter_glTextureBufferRangeEXT((texture), (target), (internalformat), (buffer), (offset), (size))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureBufferRangeEXT, (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#ifndef glTextureImage1DEXT
#define glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels) glatter_glTextureImage1DEXT((texture), (target), (level), (internalformat), (width), (border), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels))
#ifndef glTextureImage2DEXT
#define glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels) glatter_glTextureImage2DEXT((texture), (target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#ifndef glTextureImage3DEXT
#define glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTextureImage3DEXT((texture), (target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#ifndef glTexturePageCommitmentEXT
#define glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexturePageCommitmentEXT((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexturePageCommitmentEXT, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit))
#ifndef glTextureParameterIivEXT
#define glTextureParameterIivEXT(texture, target, pname, params) glatter_glTextureParameterIivEXT((texture), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIivEXT, (GLuint texture, GLenum target, GLenum pname, const GLint *params))
#ifndef glTextureParameterIuivEXT
#define glTextureParameterIuivEXT(texture, target, pname, params) glatter_glTextureParameterIuivEXT((texture), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIuivEXT, (GLuint texture, GLenum target, GLenum pname, const GLuint *params))
#ifndef glTextureParameterfEXT
#define glTextureParameterfEXT(texture, target, pname, param) glatter_glTextureParameterfEXT((texture), (target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterfEXT, (GLuint texture, GLenum target, GLenum pname, GLfloat param))
#ifndef glTextureParameterfvEXT
#define glTextureParameterfvEXT(texture, target, pname, params) glatter_glTextureParameterfvEXT((texture), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterfvEXT, (GLuint texture, GLenum target, GLenum pname, const GLfloat *params))
#ifndef glTextureParameteriEXT
#define glTextureParameteriEXT(texture, target, pname, param) glatter_glTextureParameteriEXT((texture), (target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteriEXT, (GLuint texture, GLenum target, GLenum pname, GLint param))
#ifndef glTextureParameterivEXT
#define glTextureParameterivEXT(texture, target, pname, params) glatter_glTextureParameterivEXT((texture), (target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterivEXT, (GLuint texture, GLenum target, GLenum pname, const GLint *params))
#ifndef glTextureRenderbufferEXT
#define glTextureRenderbufferEXT(texture, target, renderbuffer) glatter_glTextureRenderbufferEXT((texture), (target), (renderbuffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureRenderbufferEXT, (GLuint texture, GLenum target, GLuint renderbuffer))
#ifndef glTextureStorage1DEXT
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) glatter_glTextureStorage1DEXT((texture), (target), (levels), (internalformat), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage1DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#ifndef glTextureStorage2DEXT
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) glatter_glTextureStorage2DEXT((texture), (target), (levels), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glTextureStorage2DMultisampleEXT
#define glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisampleEXT((texture), (target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2DMultisampleEXT, (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#ifndef glTextureStorage3DEXT
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) glatter_glTextureStorage3DEXT((texture), (target), (levels), (internalformat), (width), (height), (depth))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#ifndef glTextureStorage3DMultisampleEXT
#define glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisampleEXT((texture), (target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3DMultisampleEXT, (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#ifndef glTextureSubImage1DEXT
#define glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1DEXT((texture), (target), (level), (xoffset), (width), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#ifndef glTextureSubImage2DEXT
#define glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2DEXT((texture), (target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#ifndef glTextureSubImage3DEXT
#define glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3DEXT((texture), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#ifndef glUnmapNamedBufferEXT
#define glUnmapNamedBufferEXT(buffer) glatter_glUnmapNamedBufferEXT((buffer))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapNamedBufferEXT, (GLuint buffer))
#ifndef glVertexArrayBindVertexBufferEXT
#define glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayBindVertexBufferEXT((vaobj), (bindingindex), (buffer), (offset), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayBindVertexBufferEXT, (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#ifndef glVertexArrayColorOffsetEXT
#define glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayColorOffsetEXT((vaobj), (buffer), (size), (type), (stride), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayColorOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#ifndef glVertexArrayEdgeFlagOffsetEXT
#define glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset) glatter_glVertexArrayEdgeFlagOffsetEXT((vaobj), (buffer), (stride), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayEdgeFlagOffsetEXT, (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset))
#ifndef glVertexArrayFogCoordOffsetEXT
#define glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayFogCoordOffsetEXT((vaobj), (buffer), (type), (stride), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayFogCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset))
#ifndef glVertexArrayIndexOffsetEXT
#define glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayIndexOffsetEXT((vaobj), (buffer), (type), (stride), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayIndexOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset))
#ifndef glVertexArrayMultiTexCoordOffsetEXT
#define glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset) glatter_glVertexArrayMultiTexCoordOffsetEXT((vaobj), (buffer), (texunit), (size), (type), (stride), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayMultiTexCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#ifndef glVertexArrayNormalOffsetEXT
#define glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayNormalOffsetEXT((vaobj), (buffer), (type), (stride), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayNormalOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset))
#ifndef glVertexArraySecondaryColorOffsetEXT
#define glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArraySecondaryColorOffsetEXT((vaobj), (buffer), (size), (type), (stride), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArraySecondaryColorOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#ifndef glVertexArrayTexCoordOffsetEXT
#define glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayTexCoordOffsetEXT((vaobj), (buffer), (size), (type), (stride), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayTexCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#ifndef glVertexArrayVertexAttribBindingEXT
#define glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex) glatter_glVertexArrayVertexAttribBindingEXT((vaobj), (attribindex), (bindingindex))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribBindingEXT, (GLuint vaobj, GLuint attribindex, GLuint bindingindex))
#ifndef glVertexArrayVertexAttribDivisorEXT
#define glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor) glatter_glVertexArrayVertexAttribDivisorEXT((vaobj), (index), (divisor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribDivisorEXT, (GLuint vaobj, GLuint index, GLuint divisor))
#ifndef glVertexArrayVertexAttribFormatEXT
#define glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayVertexAttribFormatEXT((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#ifndef glVertexArrayVertexAttribIFormatEXT
#define glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayVertexAttribIFormatEXT((vaobj), (attribindex), (size), (type), (relativeoffset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribIFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#ifndef glVertexArrayVertexAttribIOffsetEXT
#define glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset) glatter_glVertexArrayVertexAttribIOffsetEXT((vaobj), (buffer), (index), (size), (type), (stride), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribIOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#ifndef glVertexArrayVertexAttribLFormatEXT
#define glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayVertexAttribLFormatEXT((vaobj), (attribindex), (size), (type), (relativeoffset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribLFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#ifndef glVertexArrayVertexAttribLOffsetEXT
#define glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset) glatter_glVertexArrayVertexAttribLOffsetEXT((vaobj), (buffer), (index), (size), (type), (stride), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribLOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#ifndef glVertexArrayVertexAttribOffsetEXT
#define glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset) glatter_glVertexArrayVertexAttribOffsetEXT((vaobj), (buffer), (index), (size), (type), (normalized), (stride), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset))
#ifndef glVertexArrayVertexBindingDivisorEXT
#define glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor) glatter_glVertexArrayVertexBindingDivisorEXT((vaobj), (bindingindex), (divisor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBindingDivisorEXT, (GLuint vaobj, GLuint bindingindex, GLuint divisor))
#ifndef glVertexArrayVertexOffsetEXT
#define glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayVertexOffsetEXT((vaobj), (buffer), (size), (type), (stride), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#endif // defined(GL_EXT_direct_state_access)
#if defined(GL_EXT_draw_buffers2)
#ifndef glColorMaskIndexedEXT
#define glColorMaskIndexedEXT(index, r, g, b, a) glatter_glColorMaskIndexedEXT((index), (r), (g), (b), (a))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorMaskIndexedEXT, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#endif // defined(GL_EXT_draw_buffers2)
#if defined(GL_EXT_draw_instanced)
#ifndef glDrawArraysInstancedEXT
#define glDrawArraysInstancedEXT(mode, start, count, primcount) glatter_glDrawArraysInstancedEXT((mode), (start), (count), (primcount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedEXT, (GLenum mode, GLint start, GLsizei count, GLsizei primcount))
#ifndef glDrawElementsInstancedEXT
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedEXT((mode), (count), (type), (indices), (primcount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#endif // defined(GL_EXT_draw_instanced)
#if defined(GL_EXT_draw_range_elements)
#ifndef glDrawRangeElementsEXT
#define glDrawRangeElementsEXT(mode, start, end, count, type, indices) glatter_glDrawRangeElementsEXT((mode), (start), (end), (count), (type), (indices))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementsEXT, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#endif // defined(GL_EXT_draw_range_elements)
#if defined(GL_EXT_external_buffer)
#ifndef glBufferStorageExternalEXT
#define glBufferStorageExternalEXT(target, offset, size, clientBuffer, flags) glatter_glBufferStorageExternalEXT((target), (offset), (size), (clientBuffer), (flags))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBufferStorageExternalEXT, (GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags))
#ifndef glNamedBufferStorageExternalEXT
#define glNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags) glatter_glNamedBufferStorageExternalEXT((buffer), (offset), (size), (clientBuffer), (flags))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferStorageExternalEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags))
#endif // defined(GL_EXT_external_buffer)
#if defined(GL_EXT_fog_coord)
#ifndef glFogCoordPointerEXT
#define glFogCoordPointerEXT(type, stride, pointer) glatter_glFogCoordPointerEXT((type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogCoordPointerEXT, (GLenum type, GLsizei stride, const void *pointer))
#ifndef glFogCoorddEXT
#define glFogCoorddEXT(coord) glatter_glFogCoorddEXT((coord))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogCoorddEXT, (GLdouble coord))
#ifndef glFogCoorddvEXT
#define glFogCoorddvEXT(coord) glatter_glFogCoorddvEXT((coord))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogCoorddvEXT, (const GLdouble *coord))
#ifndef glFogCoordfEXT
#define glFogCoordfEXT(coord) glatter_glFogCoordfEXT((coord))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogCoordfEXT, (GLfloat coord))
#ifndef glFogCoordfvEXT
#define glFogCoordfvEXT(coord) glatter_glFogCoordfvEXT((coord))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogCoordfvEXT, (const GLfloat *coord))
#endif // defined(GL_EXT_fog_coord)
#if defined(GL_EXT_framebuffer_blit)
#ifndef glBlitFramebufferEXT
#define glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferEXT((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlitFramebufferEXT, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#endif // defined(GL_EXT_framebuffer_blit)
#if defined(GL_EXT_framebuffer_blit_layers)
#ifndef glBlitFramebufferLayerEXT
#define glBlitFramebufferLayerEXT(srcX0, srcY0, srcX1, srcY1, srcLayer, dstX0, dstY0, dstX1, dstY1, dstLayer, mask, filter) glatter_glBlitFramebufferLayerEXT((srcX0), (srcY0), (srcX1), (srcY1), (srcLayer), (dstX0), (dstY0), (dstX1), (dstY1), (dstLayer), (mask), (filter))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlitFramebufferLayerEXT, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint srcLayer, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLint dstLayer, GLbitfield mask, GLenum filter))
#ifndef glBlitFramebufferLayersEXT
#define glBlitFramebufferLayersEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferLayersEXT((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlitFramebufferLayersEXT, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#endif // defined(GL_EXT_framebuffer_blit_layers)
#if defined(GL_EXT_framebuffer_multisample)
#ifndef glRenderbufferStorageMultisampleEXT
#define glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleEXT((target), (samples), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageMultisampleEXT, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_EXT_framebuffer_multisample)
#if defined(GL_EXT_framebuffer_object)
#ifndef glBindFramebufferEXT
#define glBindFramebufferEXT(target, framebuffer) glatter_glBindFramebufferEXT((target), (framebuffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindFramebufferEXT, (GLenum target, GLuint framebuffer))
#ifndef glBindRenderbufferEXT
#define glBindRenderbufferEXT(target, renderbuffer) glatter_glBindRenderbufferEXT((target), (renderbuffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindRenderbufferEXT, (GLenum target, GLuint renderbuffer))
#ifndef glCheckFramebufferStatusEXT
#define glCheckFramebufferStatusEXT(target) glatter_glCheckFramebufferStatusEXT((target))
#endif
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckFramebufferStatusEXT, (GLenum target))
#ifndef glDeleteFramebuffersEXT
#define glDeleteFramebuffersEXT(n, framebuffers) glatter_glDeleteFramebuffersEXT((n), (framebuffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteFramebuffersEXT, (GLsizei n, const GLuint *framebuffers))
#ifndef glDeleteRenderbuffersEXT
#define glDeleteRenderbuffersEXT(n, renderbuffers) glatter_glDeleteRenderbuffersEXT((n), (renderbuffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteRenderbuffersEXT, (GLsizei n, const GLuint *renderbuffers))
#ifndef glFramebufferRenderbufferEXT
#define glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbufferEXT((target), (attachment), (renderbuffertarget), (renderbuffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferRenderbufferEXT, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#ifndef glFramebufferTexture1DEXT
#define glFramebufferTexture1DEXT(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1DEXT((target), (attachment), (textarget), (texture), (level))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture1DEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#ifndef glFramebufferTexture2DEXT
#define glFramebufferTexture2DEXT(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2DEXT((target), (attachment), (textarget), (texture), (level))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture2DEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#ifndef glFramebufferTexture3DEXT
#define glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3DEXT((target), (attachment), (textarget), (texture), (level), (zoffset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture3DEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#ifndef glGenFramebuffersEXT
#define glGenFramebuffersEXT(n, framebuffers) glatter_glGenFramebuffersEXT((n), (framebuffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenFramebuffersEXT, (GLsizei n, GLuint *framebuffers))
#ifndef glGenRenderbuffersEXT
#define glGenRenderbuffersEXT(n, renderbuffers) glatter_glGenRenderbuffersEXT((n), (renderbuffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenRenderbuffersEXT, (GLsizei n, GLuint *renderbuffers))
#ifndef glGenerateMipmapEXT
#define glGenerateMipmapEXT(target) glatter_glGenerateMipmapEXT((target))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenerateMipmapEXT, (GLenum target))
#ifndef glGetFramebufferAttachmentParameterivEXT
#define glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameterivEXT((target), (attachment), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferAttachmentParameterivEXT, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#ifndef glGetRenderbufferParameterivEXT
#define glGetRenderbufferParameterivEXT(target, pname, params) glatter_glGetRenderbufferParameterivEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetRenderbufferParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#ifndef glIsFramebufferEXT
#define glIsFramebufferEXT(framebuffer) glatter_glIsFramebufferEXT((framebuffer))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFramebufferEXT, (GLuint framebuffer))
#ifndef glIsRenderbufferEXT
#define glIsRenderbufferEXT(renderbuffer) glatter_glIsRenderbufferEXT((renderbuffer))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsRenderbufferEXT, (GLuint renderbuffer))
#ifndef glRenderbufferStorageEXT
#define glRenderbufferStorageEXT(target, internalformat, width, height) glatter_glRenderbufferStorageEXT((target), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageEXT, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_EXT_framebuffer_object)
#if defined(GL_EXT_geometry_shader4)
#ifndef glProgramParameteriEXT
#define glProgramParameteriEXT(program, pname, value) glatter_glProgramParameteriEXT((program), (pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramParameteriEXT, (GLuint program, GLenum pname, GLint value))
#endif // defined(GL_EXT_geometry_shader4)
#if defined(GL_EXT_gpu_program_parameters)
#ifndef glProgramEnvParameters4fvEXT
#define glProgramEnvParameters4fvEXT(target, index, count, params) glatter_glProgramEnvParameters4fvEXT((target), (index), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameters4fvEXT, (GLenum target, GLuint index, GLsizei count, const GLfloat *params))
#ifndef glProgramLocalParameters4fvEXT
#define glProgramLocalParameters4fvEXT(target, index, count, params) glatter_glProgramLocalParameters4fvEXT((target), (index), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameters4fvEXT, (GLenum target, GLuint index, GLsizei count, const GLfloat *params))
#endif // defined(GL_EXT_gpu_program_parameters)
#if defined(GL_EXT_gpu_shader4)
#ifndef glBindFragDataLocationEXT
#define glBindFragDataLocationEXT(program, color, name) glatter_glBindFragDataLocationEXT((program), (color), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocationEXT, (GLuint program, GLuint color, const GLchar *name))
#ifndef glGetFragDataLocationEXT
#define glGetFragDataLocationEXT(program, name) glatter_glGetFragDataLocationEXT((program), (name))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataLocationEXT, (GLuint program, const GLchar *name))
#ifndef glGetUniformuivEXT
#define glGetUniformuivEXT(program, location, params) glatter_glGetUniformuivEXT((program), (location), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUniformuivEXT, (GLuint program, GLint location, GLuint *params))
#ifndef glGetVertexAttribIivEXT
#define glGetVertexAttribIivEXT(index, pname, params) glatter_glGetVertexAttribIivEXT((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIivEXT, (GLuint index, GLenum pname, GLint *params))
#ifndef glGetVertexAttribIuivEXT
#define glGetVertexAttribIuivEXT(index, pname, params) glatter_glGetVertexAttribIuivEXT((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIuivEXT, (GLuint index, GLenum pname, GLuint *params))
#ifndef glUniform1uiEXT
#define glUniform1uiEXT(location, v0) glatter_glUniform1uiEXT((location), (v0))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1uiEXT, (GLint location, GLuint v0))
#ifndef glUniform1uivEXT
#define glUniform1uivEXT(location, count, value) glatter_glUniform1uivEXT((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1uivEXT, (GLint location, GLsizei count, const GLuint *value))
#ifndef glUniform2uiEXT
#define glUniform2uiEXT(location, v0, v1) glatter_glUniform2uiEXT((location), (v0), (v1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2uiEXT, (GLint location, GLuint v0, GLuint v1))
#ifndef glUniform2uivEXT
#define glUniform2uivEXT(location, count, value) glatter_glUniform2uivEXT((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2uivEXT, (GLint location, GLsizei count, const GLuint *value))
#ifndef glUniform3uiEXT
#define glUniform3uiEXT(location, v0, v1, v2) glatter_glUniform3uiEXT((location), (v0), (v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3uiEXT, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#ifndef glUniform3uivEXT
#define glUniform3uivEXT(location, count, value) glatter_glUniform3uivEXT((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3uivEXT, (GLint location, GLsizei count, const GLuint *value))
#ifndef glUniform4uiEXT
#define glUniform4uiEXT(location, v0, v1, v2, v3) glatter_glUniform4uiEXT((location), (v0), (v1), (v2), (v3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4uiEXT, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#ifndef glUniform4uivEXT
#define glUniform4uivEXT(location, count, value) glatter_glUniform4uivEXT((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4uivEXT, (GLint location, GLsizei count, const GLuint *value))
#ifndef glVertexAttribI1iEXT
#define glVertexAttribI1iEXT(index, x) glatter_glVertexAttribI1iEXT((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1iEXT, (GLuint index, GLint x))
#ifndef glVertexAttribI1ivEXT
#define glVertexAttribI1ivEXT(index, v) glatter_glVertexAttribI1ivEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1ivEXT, (GLuint index, const GLint *v))
#ifndef glVertexAttribI1uiEXT
#define glVertexAttribI1uiEXT(index, x) glatter_glVertexAttribI1uiEXT((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1uiEXT, (GLuint index, GLuint x))
#ifndef glVertexAttribI1uivEXT
#define glVertexAttribI1uivEXT(index, v) glatter_glVertexAttribI1uivEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1uivEXT, (GLuint index, const GLuint *v))
#ifndef glVertexAttribI2iEXT
#define glVertexAttribI2iEXT(index, x, y) glatter_glVertexAttribI2iEXT((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2iEXT, (GLuint index, GLint x, GLint y))
#ifndef glVertexAttribI2ivEXT
#define glVertexAttribI2ivEXT(index, v) glatter_glVertexAttribI2ivEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2ivEXT, (GLuint index, const GLint *v))
#ifndef glVertexAttribI2uiEXT
#define glVertexAttribI2uiEXT(index, x, y) glatter_glVertexAttribI2uiEXT((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2uiEXT, (GLuint index, GLuint x, GLuint y))
#ifndef glVertexAttribI2uivEXT
#define glVertexAttribI2uivEXT(index, v) glatter_glVertexAttribI2uivEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2uivEXT, (GLuint index, const GLuint *v))
#ifndef glVertexAttribI3iEXT
#define glVertexAttribI3iEXT(index, x, y, z) glatter_glVertexAttribI3iEXT((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3iEXT, (GLuint index, GLint x, GLint y, GLint z))
#ifndef glVertexAttribI3ivEXT
#define glVertexAttribI3ivEXT(index, v) glatter_glVertexAttribI3ivEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3ivEXT, (GLuint index, const GLint *v))
#ifndef glVertexAttribI3uiEXT
#define glVertexAttribI3uiEXT(index, x, y, z) glatter_glVertexAttribI3uiEXT((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3uiEXT, (GLuint index, GLuint x, GLuint y, GLuint z))
#ifndef glVertexAttribI3uivEXT
#define glVertexAttribI3uivEXT(index, v) glatter_glVertexAttribI3uivEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3uivEXT, (GLuint index, const GLuint *v))
#ifndef glVertexAttribI4bvEXT
#define glVertexAttribI4bvEXT(index, v) glatter_glVertexAttribI4bvEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4bvEXT, (GLuint index, const GLbyte *v))
#ifndef glVertexAttribI4iEXT
#define glVertexAttribI4iEXT(index, x, y, z, w) glatter_glVertexAttribI4iEXT((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4iEXT, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#ifndef glVertexAttribI4ivEXT
#define glVertexAttribI4ivEXT(index, v) glatter_glVertexAttribI4ivEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ivEXT, (GLuint index, const GLint *v))
#ifndef glVertexAttribI4svEXT
#define glVertexAttribI4svEXT(index, v) glatter_glVertexAttribI4svEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4svEXT, (GLuint index, const GLshort *v))
#ifndef glVertexAttribI4ubvEXT
#define glVertexAttribI4ubvEXT(index, v) glatter_glVertexAttribI4ubvEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ubvEXT, (GLuint index, const GLubyte *v))
#ifndef glVertexAttribI4uiEXT
#define glVertexAttribI4uiEXT(index, x, y, z, w) glatter_glVertexAttribI4uiEXT((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4uiEXT, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#ifndef glVertexAttribI4uivEXT
#define glVertexAttribI4uivEXT(index, v) glatter_glVertexAttribI4uivEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4uivEXT, (GLuint index, const GLuint *v))
#ifndef glVertexAttribI4usvEXT
#define glVertexAttribI4usvEXT(index, v) glatter_glVertexAttribI4usvEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4usvEXT, (GLuint index, const GLushort *v))
#ifndef glVertexAttribIPointerEXT
#define glVertexAttribIPointerEXT(index, size, type, stride, pointer) glatter_glVertexAttribIPointerEXT((index), (size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIPointerEXT, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_EXT_gpu_shader4)
#if defined(GL_EXT_histogram)
#ifndef glGetHistogramEXT
#define glGetHistogramEXT(target, reset, format, type, values) glatter_glGetHistogramEXT((target), (reset), (format), (type), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramEXT, (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values))
#ifndef glGetHistogramParameterfvEXT
#define glGetHistogramParameterfvEXT(target, pname, params) glatter_glGetHistogramParameterfvEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetHistogramParameterivEXT
#define glGetHistogramParameterivEXT(target, pname, params) glatter_glGetHistogramParameterivEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetMinmaxEXT
#define glGetMinmaxEXT(target, reset, format, type, values) glatter_glGetMinmaxEXT((target), (reset), (format), (type), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxEXT, (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values))
#ifndef glGetMinmaxParameterfvEXT
#define glGetMinmaxParameterfvEXT(target, pname, params) glatter_glGetMinmaxParameterfvEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetMinmaxParameterivEXT
#define glGetMinmaxParameterivEXT(target, pname, params) glatter_glGetMinmaxParameterivEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#ifndef glHistogramEXT
#define glHistogramEXT(target, width, internalformat, sink) glatter_glHistogramEXT((target), (width), (internalformat), (sink))
#endif
GLATTER_UBLOCK(void, APIENTRY, glHistogramEXT, (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink))
#ifndef glMinmaxEXT
#define glMinmaxEXT(target, internalformat, sink) glatter_glMinmaxEXT((target), (internalformat), (sink))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMinmaxEXT, (GLenum target, GLenum internalformat, GLboolean sink))
#ifndef glResetHistogramEXT
#define glResetHistogramEXT(target) glatter_glResetHistogramEXT((target))
#endif
GLATTER_UBLOCK(void, APIENTRY, glResetHistogramEXT, (GLenum target))
#ifndef glResetMinmaxEXT
#define glResetMinmaxEXT(target) glatter_glResetMinmaxEXT((target))
#endif
GLATTER_UBLOCK(void, APIENTRY, glResetMinmaxEXT, (GLenum target))
#endif // defined(GL_EXT_histogram)
#if defined(GL_EXT_index_func)
#ifndef glIndexFuncEXT
#define glIndexFuncEXT(func, ref) glatter_glIndexFuncEXT((func), (ref))
#endif
GLATTER_UBLOCK(void, APIENTRY, glIndexFuncEXT, (GLenum func, GLclampf ref))
#endif // defined(GL_EXT_index_func)
#if defined(GL_EXT_index_material)
#ifndef glIndexMaterialEXT
#define glIndexMaterialEXT(face, mode) glatter_glIndexMaterialEXT((face), (mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glIndexMaterialEXT, (GLenum face, GLenum mode))
#endif // defined(GL_EXT_index_material)
#if defined(GL_EXT_light_texture)
#ifndef glApplyTextureEXT
#define glApplyTextureEXT(mode) glatter_glApplyTextureEXT((mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glApplyTextureEXT, (GLenum mode))
#ifndef glTextureLightEXT
#define glTextureLightEXT(pname) glatter_glTextureLightEXT((pname))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureLightEXT, (GLenum pname))
#ifndef glTextureMaterialEXT
#define glTextureMaterialEXT(face, mode) glatter_glTextureMaterialEXT((face), (mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureMaterialEXT, (GLenum face, GLenum mode))
#endif // defined(GL_EXT_light_texture)
#if defined(GL_EXT_memory_object)
#ifndef glBufferStorageMemEXT
#define glBufferStorageMemEXT(target, size, memory, offset) glatter_glBufferStorageMemEXT((target), (size), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBufferStorageMemEXT, (GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset))
#ifndef glCreateMemoryObjectsEXT
#define glCreateMemoryObjectsEXT(n, memoryObjects) glatter_glCreateMemoryObjectsEXT((n), (memoryObjects))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCreateMemoryObjectsEXT, (GLsizei n, GLuint *memoryObjects))
#ifndef glDeleteMemoryObjectsEXT
#define glDeleteMemoryObjectsEXT(n, memoryObjects) glatter_glDeleteMemoryObjectsEXT((n), (memoryObjects))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteMemoryObjectsEXT, (GLsizei n, const GLuint *memoryObjects))
#ifndef glGetMemoryObjectParameterivEXT
#define glGetMemoryObjectParameterivEXT(memoryObject, pname, params) glatter_glGetMemoryObjectParameterivEXT((memoryObject), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMemoryObjectParameterivEXT, (GLuint memoryObject, GLenum pname, GLint *params))
#ifndef glGetUnsignedBytei_vEXT
#define glGetUnsignedBytei_vEXT(target, index, data) glatter_glGetUnsignedBytei_vEXT((target), (index), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUnsignedBytei_vEXT, (GLenum target, GLuint index, GLubyte *data))
#ifndef glGetUnsignedBytevEXT
#define glGetUnsignedBytevEXT(pname, data) glatter_glGetUnsignedBytevEXT((pname), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUnsignedBytevEXT, (GLenum pname, GLubyte *data))
#ifndef glIsMemoryObjectEXT
#define glIsMemoryObjectEXT(memoryObject) glatter_glIsMemoryObjectEXT((memoryObject))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsMemoryObjectEXT, (GLuint memoryObject))
#ifndef glMemoryObjectParameterivEXT
#define glMemoryObjectParameterivEXT(memoryObject, pname, params) glatter_glMemoryObjectParameterivEXT((memoryObject), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMemoryObjectParameterivEXT, (GLuint memoryObject, GLenum pname, const GLint *params))
#ifndef glNamedBufferStorageMemEXT
#define glNamedBufferStorageMemEXT(buffer, size, memory, offset) glatter_glNamedBufferStorageMemEXT((buffer), (size), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferStorageMemEXT, (GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset))
#ifndef glTexStorageMem1DEXT
#define glTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset) glatter_glTexStorageMem1DEXT((target), (levels), (internalFormat), (width), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexStorageMem1DEXT, (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset))
#ifndef glTexStorageMem2DEXT
#define glTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset) glatter_glTexStorageMem2DEXT((target), (levels), (internalFormat), (width), (height), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexStorageMem2DEXT, (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset))
#ifndef glTexStorageMem2DMultisampleEXT
#define glTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset) glatter_glTexStorageMem2DMultisampleEXT((target), (samples), (internalFormat), (width), (height), (fixedSampleLocations), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexStorageMem2DMultisampleEXT, (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset))
#ifndef glTexStorageMem3DEXT
#define glTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset) glatter_glTexStorageMem3DEXT((target), (levels), (internalFormat), (width), (height), (depth), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexStorageMem3DEXT, (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset))
#ifndef glTexStorageMem3DMultisampleEXT
#define glTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset) glatter_glTexStorageMem3DMultisampleEXT((target), (samples), (internalFormat), (width), (height), (depth), (fixedSampleLocations), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexStorageMem3DMultisampleEXT, (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset))
#ifndef glTextureStorageMem1DEXT
#define glTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset) glatter_glTextureStorageMem1DEXT((texture), (levels), (internalFormat), (width), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorageMem1DEXT, (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset))
#ifndef glTextureStorageMem2DEXT
#define glTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset) glatter_glTextureStorageMem2DEXT((texture), (levels), (internalFormat), (width), (height), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorageMem2DEXT, (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset))
#ifndef glTextureStorageMem2DMultisampleEXT
#define glTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset) glatter_glTextureStorageMem2DMultisampleEXT((texture), (samples), (internalFormat), (width), (height), (fixedSampleLocations), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorageMem2DMultisampleEXT, (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset))
#ifndef glTextureStorageMem3DEXT
#define glTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset) glatter_glTextureStorageMem3DEXT((texture), (levels), (internalFormat), (width), (height), (depth), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorageMem3DEXT, (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset))
#ifndef glTextureStorageMem3DMultisampleEXT
#define glTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset) glatter_glTextureStorageMem3DMultisampleEXT((texture), (samples), (internalFormat), (width), (height), (depth), (fixedSampleLocations), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorageMem3DMultisampleEXT, (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset))
#endif // defined(GL_EXT_memory_object)
#if defined(GL_EXT_memory_object_fd)
#ifndef glImportMemoryFdEXT
#define glImportMemoryFdEXT(memory, size, handleType, fd) glatter_glImportMemoryFdEXT((memory), (size), (handleType), (fd))
#endif
GLATTER_UBLOCK(void, APIENTRY, glImportMemoryFdEXT, (GLuint memory, GLuint64 size, GLenum handleType, GLint fd))
#endif // defined(GL_EXT_memory_object_fd)
#if defined(GL_EXT_memory_object_win32)
#ifndef glImportMemoryWin32HandleEXT
#define glImportMemoryWin32HandleEXT(memory, size, handleType, handle) glatter_glImportMemoryWin32HandleEXT((memory), (size), (handleType), (handle))
#endif
GLATTER_UBLOCK(void, APIENTRY, glImportMemoryWin32HandleEXT, (GLuint memory, GLuint64 size, GLenum handleType, void *handle))
#ifndef glImportMemoryWin32NameEXT
#define glImportMemoryWin32NameEXT(memory, size, handleType, name) glatter_glImportMemoryWin32NameEXT((memory), (size), (handleType), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glImportMemoryWin32NameEXT, (GLuint memory, GLuint64 size, GLenum handleType, const void *name))
#endif // defined(GL_EXT_memory_object_win32)
#if defined(GL_EXT_multi_draw_arrays)
#ifndef glMultiDrawArraysEXT
#define glMultiDrawArraysEXT(mode, first, count, primcount) glatter_glMultiDrawArraysEXT((mode), (first), (count), (primcount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysEXT, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount))
#ifndef glMultiDrawElementsEXT
#define glMultiDrawElementsEXT(mode, count, type, indices, primcount) glatter_glMultiDrawElementsEXT((mode), (count), (type), (indices), (primcount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsEXT, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount))
#endif // defined(GL_EXT_multi_draw_arrays)
#if defined(GL_EXT_multisample)
#ifndef glSampleMaskEXT
#define glSampleMaskEXT(value, invert) glatter_glSampleMaskEXT((value), (invert))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSampleMaskEXT, (GLclampf value, GLboolean invert))
#ifndef glSamplePatternEXT
#define glSamplePatternEXT(pattern) glatter_glSamplePatternEXT((pattern))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSamplePatternEXT, (GLenum pattern))
#endif // defined(GL_EXT_multisample)
#if defined(GL_EXT_paletted_texture)
#ifndef glColorTableEXT
#define glColorTableEXT(target, internalFormat, width, format, type, table) glatter_glColorTableEXT((target), (internalFormat), (width), (format), (type), (table))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorTableEXT, (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table))
#ifndef glGetColorTableEXT
#define glGetColorTableEXT(target, format, type, data) glatter_glGetColorTableEXT((target), (format), (type), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableEXT, (GLenum target, GLenum format, GLenum type, void *data))
#ifndef glGetColorTableParameterfvEXT
#define glGetColorTableParameterfvEXT(target, pname, params) glatter_glGetColorTableParameterfvEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetColorTableParameterivEXT
#define glGetColorTableParameterivEXT(target, pname, params) glatter_glGetColorTableParameterivEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#endif // defined(GL_EXT_paletted_texture)
#if defined(GL_EXT_pixel_transform)
#ifndef glGetPixelTransformParameterfvEXT
#define glGetPixelTransformParameterfvEXT(target, pname, params) glatter_glGetPixelTransformParameterfvEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPixelTransformParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetPixelTransformParameterivEXT
#define glGetPixelTransformParameterivEXT(target, pname, params) glatter_glGetPixelTransformParameterivEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPixelTransformParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#ifndef glPixelTransformParameterfEXT
#define glPixelTransformParameterfEXT(target, pname, param) glatter_glPixelTransformParameterfEXT((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPixelTransformParameterfEXT, (GLenum target, GLenum pname, GLfloat param))
#ifndef glPixelTransformParameterfvEXT
#define glPixelTransformParameterfvEXT(target, pname, params) glatter_glPixelTransformParameterfvEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPixelTransformParameterfvEXT, (GLenum target, GLenum pname, const GLfloat *params))
#ifndef glPixelTransformParameteriEXT
#define glPixelTransformParameteriEXT(target, pname, param) glatter_glPixelTransformParameteriEXT((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPixelTransformParameteriEXT, (GLenum target, GLenum pname, GLint param))
#ifndef glPixelTransformParameterivEXT
#define glPixelTransformParameterivEXT(target, pname, params) glatter_glPixelTransformParameterivEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPixelTransformParameterivEXT, (GLenum target, GLenum pname, const GLint *params))
#endif // defined(GL_EXT_pixel_transform)
#if defined(GL_EXT_point_parameters)
#ifndef glPointParameterfEXT
#define glPointParameterfEXT(pname, param) glatter_glPointParameterfEXT((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfEXT, (GLenum pname, GLfloat param))
#ifndef glPointParameterfvEXT
#define glPointParameterfvEXT(pname, params) glatter_glPointParameterfvEXT((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfvEXT, (GLenum pname, const GLfloat *params))
#endif // defined(GL_EXT_point_parameters)
#if defined(GL_EXT_polygon_offset)
#ifndef glPolygonOffsetEXT
#define glPolygonOffsetEXT(factor, bias) glatter_glPolygonOffsetEXT((factor), (bias))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffsetEXT, (GLfloat factor, GLfloat bias))
#endif // defined(GL_EXT_polygon_offset)
#if defined(GL_EXT_polygon_offset_clamp)
#ifndef glPolygonOffsetClampEXT
#define glPolygonOffsetClampEXT(factor, units, clamp) glatter_glPolygonOffsetClampEXT((factor), (units), (clamp))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffsetClampEXT, (GLfloat factor, GLfloat units, GLfloat clamp))
#endif // defined(GL_EXT_polygon_offset_clamp)
#if defined(GL_EXT_provoking_vertex)
#ifndef glProvokingVertexEXT
#define glProvokingVertexEXT(mode) glatter_glProvokingVertexEXT((mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProvokingVertexEXT, (GLenum mode))
#endif // defined(GL_EXT_provoking_vertex)
#if defined(GL_EXT_raster_multisample)
#ifndef glRasterSamplesEXT
#define glRasterSamplesEXT(samples, fixedsamplelocations) glatter_glRasterSamplesEXT((samples), (fixedsamplelocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRasterSamplesEXT, (GLuint samples, GLboolean fixedsamplelocations))
#endif // defined(GL_EXT_raster_multisample)
#if defined(GL_EXT_secondary_color)
#ifndef glSecondaryColor3bEXT
#define glSecondaryColor3bEXT(red, green, blue) glatter_glSecondaryColor3bEXT((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3bEXT, (GLbyte red, GLbyte green, GLbyte blue))
#ifndef glSecondaryColor3bvEXT
#define glSecondaryColor3bvEXT(v) glatter_glSecondaryColor3bvEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3bvEXT, (const GLbyte *v))
#ifndef glSecondaryColor3dEXT
#define glSecondaryColor3dEXT(red, green, blue) glatter_glSecondaryColor3dEXT((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3dEXT, (GLdouble red, GLdouble green, GLdouble blue))
#ifndef glSecondaryColor3dvEXT
#define glSecondaryColor3dvEXT(v) glatter_glSecondaryColor3dvEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3dvEXT, (const GLdouble *v))
#ifndef glSecondaryColor3fEXT
#define glSecondaryColor3fEXT(red, green, blue) glatter_glSecondaryColor3fEXT((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3fEXT, (GLfloat red, GLfloat green, GLfloat blue))
#ifndef glSecondaryColor3fvEXT
#define glSecondaryColor3fvEXT(v) glatter_glSecondaryColor3fvEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3fvEXT, (const GLfloat *v))
#ifndef glSecondaryColor3iEXT
#define glSecondaryColor3iEXT(red, green, blue) glatter_glSecondaryColor3iEXT((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3iEXT, (GLint red, GLint green, GLint blue))
#ifndef glSecondaryColor3ivEXT
#define glSecondaryColor3ivEXT(v) glatter_glSecondaryColor3ivEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ivEXT, (const GLint *v))
#ifndef glSecondaryColor3sEXT
#define glSecondaryColor3sEXT(red, green, blue) glatter_glSecondaryColor3sEXT((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3sEXT, (GLshort red, GLshort green, GLshort blue))
#ifndef glSecondaryColor3svEXT
#define glSecondaryColor3svEXT(v) glatter_glSecondaryColor3svEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3svEXT, (const GLshort *v))
#ifndef glSecondaryColor3ubEXT
#define glSecondaryColor3ubEXT(red, green, blue) glatter_glSecondaryColor3ubEXT((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ubEXT, (GLubyte red, GLubyte green, GLubyte blue))
#ifndef glSecondaryColor3ubvEXT
#define glSecondaryColor3ubvEXT(v) glatter_glSecondaryColor3ubvEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ubvEXT, (const GLubyte *v))
#ifndef glSecondaryColor3uiEXT
#define glSecondaryColor3uiEXT(red, green, blue) glatter_glSecondaryColor3uiEXT((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3uiEXT, (GLuint red, GLuint green, GLuint blue))
#ifndef glSecondaryColor3uivEXT
#define glSecondaryColor3uivEXT(v) glatter_glSecondaryColor3uivEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3uivEXT, (const GLuint *v))
#ifndef glSecondaryColor3usEXT
#define glSecondaryColor3usEXT(red, green, blue) glatter_glSecondaryColor3usEXT((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3usEXT, (GLushort red, GLushort green, GLushort blue))
#ifndef glSecondaryColor3usvEXT
#define glSecondaryColor3usvEXT(v) glatter_glSecondaryColor3usvEXT((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3usvEXT, (const GLushort *v))
#ifndef glSecondaryColorPointerEXT
#define glSecondaryColorPointerEXT(size, type, stride, pointer) glatter_glSecondaryColorPointerEXT((size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorPointerEXT, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_EXT_secondary_color)
#if defined(GL_EXT_semaphore)
#ifndef glDeleteSemaphoresEXT
#define glDeleteSemaphoresEXT(n, semaphores) glatter_glDeleteSemaphoresEXT((n), (semaphores))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteSemaphoresEXT, (GLsizei n, const GLuint *semaphores))
#ifndef glGenSemaphoresEXT
#define glGenSemaphoresEXT(n, semaphores) glatter_glGenSemaphoresEXT((n), (semaphores))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenSemaphoresEXT, (GLsizei n, GLuint *semaphores))
#ifndef glGetSemaphoreParameterui64vEXT
#define glGetSemaphoreParameterui64vEXT(semaphore, pname, params) glatter_glGetSemaphoreParameterui64vEXT((semaphore), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetSemaphoreParameterui64vEXT, (GLuint semaphore, GLenum pname, GLuint64 *params))
#ifndef glIsSemaphoreEXT
#define glIsSemaphoreEXT(semaphore) glatter_glIsSemaphoreEXT((semaphore))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsSemaphoreEXT, (GLuint semaphore))
#ifndef glSemaphoreParameterui64vEXT
#define glSemaphoreParameterui64vEXT(semaphore, pname, params) glatter_glSemaphoreParameterui64vEXT((semaphore), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSemaphoreParameterui64vEXT, (GLuint semaphore, GLenum pname, const GLuint64 *params))
#ifndef glSignalSemaphoreEXT
#define glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts) glatter_glSignalSemaphoreEXT((semaphore), (numBufferBarriers), (buffers), (numTextureBarriers), (textures), (dstLayouts))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSignalSemaphoreEXT, (GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts))
#ifndef glWaitSemaphoreEXT
#define glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts) glatter_glWaitSemaphoreEXT((semaphore), (numBufferBarriers), (buffers), (numTextureBarriers), (textures), (srcLayouts))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWaitSemaphoreEXT, (GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts))
#endif // defined(GL_EXT_semaphore)
#if defined(GL_EXT_semaphore_fd)
#ifndef glImportSemaphoreFdEXT
#define glImportSemaphoreFdEXT(semaphore, handleType, fd) glatter_glImportSemaphoreFdEXT((semaphore), (handleType), (fd))
#endif
GLATTER_UBLOCK(void, APIENTRY, glImportSemaphoreFdEXT, (GLuint semaphore, GLenum handleType, GLint fd))
#endif // defined(GL_EXT_semaphore_fd)
#if defined(GL_EXT_semaphore_win32)
#ifndef glImportSemaphoreWin32HandleEXT
#define glImportSemaphoreWin32HandleEXT(semaphore, handleType, handle) glatter_glImportSemaphoreWin32HandleEXT((semaphore), (handleType), (handle))
#endif
GLATTER_UBLOCK(void, APIENTRY, glImportSemaphoreWin32HandleEXT, (GLuint semaphore, GLenum handleType, void *handle))
#ifndef glImportSemaphoreWin32NameEXT
#define glImportSemaphoreWin32NameEXT(semaphore, handleType, name) glatter_glImportSemaphoreWin32NameEXT((semaphore), (handleType), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glImportSemaphoreWin32NameEXT, (GLuint semaphore, GLenum handleType, const void *name))
#endif // defined(GL_EXT_semaphore_win32)
#if defined(GL_EXT_separate_shader_objects)
#ifndef glActiveProgramEXT
#define glActiveProgramEXT(program) glatter_glActiveProgramEXT((program))
#endif
GLATTER_UBLOCK(void, APIENTRY, glActiveProgramEXT, (GLuint program))
#ifndef glCreateShaderProgramEXT
#define glCreateShaderProgramEXT(type, string) glatter_glCreateShaderProgramEXT((type), (string))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShaderProgramEXT, (GLenum type, const GLchar *string))
#ifndef glUseShaderProgramEXT
#define glUseShaderProgramEXT(type, program) glatter_glUseShaderProgramEXT((type), (program))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUseShaderProgramEXT, (GLenum type, GLuint program))
#endif // defined(GL_EXT_separate_shader_objects)
#if defined(GL_EXT_shader_framebuffer_fetch_non_coherent)
#ifndef glFramebufferFetchBarrierEXT
#define glFramebufferFetchBarrierEXT() glatter_glFramebufferFetchBarrierEXT()
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferFetchBarrierEXT, (void))
#endif // defined(GL_EXT_shader_framebuffer_fetch_non_coherent)
#if defined(GL_EXT_shader_image_load_store)
#ifndef glBindImageTextureEXT
#define glBindImageTextureEXT(index, texture, level, layered, layer, access, format) glatter_glBindImageTextureEXT((index), (texture), (level), (layered), (layer), (access), (format))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindImageTextureEXT, (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format))
#ifndef glMemoryBarrierEXT
#define glMemoryBarrierEXT(barriers) glatter_glMemoryBarrierEXT((barriers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrierEXT, (GLbitfield barriers))
#endif // defined(GL_EXT_shader_image_load_store)
#if defined(GL_EXT_stencil_clear_tag)
#ifndef glStencilClearTagEXT
#define glStencilClearTagEXT(stencilTagBits, stencilClearTag) glatter_glStencilClearTagEXT((stencilTagBits), (stencilClearTag))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilClearTagEXT, (GLsizei stencilTagBits, GLuint stencilClearTag))
#endif // defined(GL_EXT_stencil_clear_tag)
#if defined(GL_EXT_stencil_two_side)
#ifndef glActiveStencilFaceEXT
#define glActiveStencilFaceEXT(face) glatter_glActiveStencilFaceEXT((face))
#endif
GLATTER_UBLOCK(void, APIENTRY, glActiveStencilFaceEXT, (GLenum face))
#endif // defined(GL_EXT_stencil_two_side)
#if defined(GL_EXT_subtexture)
#ifndef glTexSubImage1DEXT
#define glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1DEXT((target), (level), (xoffset), (width), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage1DEXT, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#ifndef glTexSubImage2DEXT
#define glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2DEXT((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage2DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_EXT_subtexture)
#if defined(GL_EXT_texture3D)
#ifndef glTexImage3DEXT
#define glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3DEXT((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexImage3DEXT, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#ifndef glTexSubImage3DEXT
#define glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3DEXT((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage3DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_EXT_texture3D)
#if defined(GL_EXT_texture_array)
#ifndef glFramebufferTextureLayerEXT
#define glFramebufferTextureLayerEXT(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayerEXT((target), (attachment), (texture), (level), (layer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureLayerEXT, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#endif // defined(GL_EXT_texture_array)
#if defined(GL_EXT_texture_buffer_object)
#ifndef glTexBufferEXT
#define glTexBufferEXT(target, internalformat, buffer) glatter_glTexBufferEXT((target), (internalformat), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexBufferEXT, (GLenum target, GLenum internalformat, GLuint buffer))
#endif // defined(GL_EXT_texture_buffer_object)
#if defined(GL_EXT_texture_integer)
#ifndef glClearColorIiEXT
#define glClearColorIiEXT(red, green, blue, alpha) glatter_glClearColorIiEXT((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearColorIiEXT, (GLint red, GLint green, GLint blue, GLint alpha))
#ifndef glClearColorIuiEXT
#define glClearColorIuiEXT(red, green, blue, alpha) glatter_glClearColorIuiEXT((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearColorIuiEXT, (GLuint red, GLuint green, GLuint blue, GLuint alpha))
#ifndef glGetTexParameterIivEXT
#define glGetTexParameterIivEXT(target, pname, params) glatter_glGetTexParameterIivEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIivEXT, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetTexParameterIuivEXT
#define glGetTexParameterIuivEXT(target, pname, params) glatter_glGetTexParameterIuivEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIuivEXT, (GLenum target, GLenum pname, GLuint *params))
#ifndef glTexParameterIivEXT
#define glTexParameterIivEXT(target, pname, params) glatter_glTexParameterIivEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIivEXT, (GLenum target, GLenum pname, const GLint *params))
#ifndef glTexParameterIuivEXT
#define glTexParameterIuivEXT(target, pname, params) glatter_glTexParameterIuivEXT((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIuivEXT, (GLenum target, GLenum pname, const GLuint *params))
#endif // defined(GL_EXT_texture_integer)
#if defined(GL_EXT_texture_object)
#ifndef glAreTexturesResidentEXT
#define glAreTexturesResidentEXT(n, textures, residences) glatter_glAreTexturesResidentEXT((n), (textures), (residences))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glAreTexturesResidentEXT, (GLsizei n, const GLuint *textures, GLboolean *residences))
#ifndef glBindTextureEXT
#define glBindTextureEXT(target, texture) glatter_glBindTextureEXT((target), (texture))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindTextureEXT, (GLenum target, GLuint texture))
#ifndef glDeleteTexturesEXT
#define glDeleteTexturesEXT(n, textures) glatter_glDeleteTexturesEXT((n), (textures))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteTexturesEXT, (GLsizei n, const GLuint *textures))
#ifndef glGenTexturesEXT
#define glGenTexturesEXT(n, textures) glatter_glGenTexturesEXT((n), (textures))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenTexturesEXT, (GLsizei n, GLuint *textures))
#ifndef glIsTextureEXT
#define glIsTextureEXT(texture) glatter_glIsTextureEXT((texture))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTextureEXT, (GLuint texture))
#ifndef glPrioritizeTexturesEXT
#define glPrioritizeTexturesEXT(n, textures, priorities) glatter_glPrioritizeTexturesEXT((n), (textures), (priorities))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPrioritizeTexturesEXT, (GLsizei n, const GLuint *textures, const GLclampf *priorities))
#endif // defined(GL_EXT_texture_object)
#if defined(GL_EXT_texture_perturb_normal)
#ifndef glTextureNormalEXT
#define glTextureNormalEXT(mode) glatter_glTextureNormalEXT((mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureNormalEXT, (GLenum mode))
#endif // defined(GL_EXT_texture_perturb_normal)
#if defined(GL_EXT_texture_storage)
#ifndef glTexStorage1DEXT
#define glTexStorage1DEXT(target, levels, internalformat, width) glatter_glTexStorage1DEXT((target), (levels), (internalformat), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexStorage1DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#ifndef glTexStorage2DEXT
#define glTexStorage2DEXT(target, levels, internalformat, width, height) glatter_glTexStorage2DEXT((target), (levels), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexStorage2DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glTexStorage3DEXT
#define glTexStorage3DEXT(target, levels, internalformat, width, height, depth) glatter_glTexStorage3DEXT((target), (levels), (internalformat), (width), (height), (depth))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexStorage3DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GL_EXT_texture_storage)
#if defined(GL_EXT_timer_query)
#ifndef glGetQueryObjecti64vEXT
#define glGetQueryObjecti64vEXT(id, pname, params) glatter_glGetQueryObjecti64vEXT((id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjecti64vEXT, (GLuint id, GLenum pname, GLint64 *params))
#ifndef glGetQueryObjectui64vEXT
#define glGetQueryObjectui64vEXT(id, pname, params) glatter_glGetQueryObjectui64vEXT((id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectui64vEXT, (GLuint id, GLenum pname, GLuint64 *params))
#endif // defined(GL_EXT_timer_query)
#if defined(GL_EXT_transform_feedback)
#ifndef glBeginTransformFeedbackEXT
#define glBeginTransformFeedbackEXT(primitiveMode) glatter_glBeginTransformFeedbackEXT((primitiveMode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginTransformFeedbackEXT, (GLenum primitiveMode))
#ifndef glBindBufferBaseEXT
#define glBindBufferBaseEXT(target, index, buffer) glatter_glBindBufferBaseEXT((target), (index), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindBufferBaseEXT, (GLenum target, GLuint index, GLuint buffer))
#ifndef glBindBufferOffsetEXT
#define glBindBufferOffsetEXT(target, index, buffer, offset) glatter_glBindBufferOffsetEXT((target), (index), (buffer), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindBufferOffsetEXT, (GLenum target, GLuint index, GLuint buffer, GLintptr offset))
#ifndef glBindBufferRangeEXT
#define glBindBufferRangeEXT(target, index, buffer, offset, size) glatter_glBindBufferRangeEXT((target), (index), (buffer), (offset), (size))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindBufferRangeEXT, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#ifndef glEndTransformFeedbackEXT
#define glEndTransformFeedbackEXT() glatter_glEndTransformFeedbackEXT()
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndTransformFeedbackEXT, (void))
#ifndef glGetTransformFeedbackVaryingEXT
#define glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVaryingEXT((program), (index), (bufSize), (length), (size), (type), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackVaryingEXT, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#ifndef glTransformFeedbackVaryingsEXT
#define glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryingsEXT((program), (count), (varyings), (bufferMode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackVaryingsEXT, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#endif // defined(GL_EXT_transform_feedback)
#if defined(GL_EXT_vertex_array)
#ifndef glArrayElementEXT
#define glArrayElementEXT(i) glatter_glArrayElementEXT((i))
#endif
GLATTER_UBLOCK(void, APIENTRY, glArrayElementEXT, (GLint i))
#ifndef glColorPointerEXT
#define glColorPointerEXT(size, type, stride, count, pointer) glatter_glColorPointerEXT((size), (type), (stride), (count), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorPointerEXT, (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#ifndef glDrawArraysEXT
#define glDrawArraysEXT(mode, first, count) glatter_glDrawArraysEXT((mode), (first), (count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysEXT, (GLenum mode, GLint first, GLsizei count))
#ifndef glEdgeFlagPointerEXT
#define glEdgeFlagPointerEXT(stride, count, pointer) glatter_glEdgeFlagPointerEXT((stride), (count), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlagPointerEXT, (GLsizei stride, GLsizei count, const GLboolean *pointer))
#ifndef glGetPointervEXT
#define glGetPointervEXT(pname, params) glatter_glGetPointervEXT((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPointervEXT, (GLenum pname, void **params))
#ifndef glIndexPointerEXT
#define glIndexPointerEXT(type, stride, count, pointer) glatter_glIndexPointerEXT((type), (stride), (count), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glIndexPointerEXT, (GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#ifndef glNormalPointerEXT
#define glNormalPointerEXT(type, stride, count, pointer) glatter_glNormalPointerEXT((type), (stride), (count), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalPointerEXT, (GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#ifndef glTexCoordPointerEXT
#define glTexCoordPointerEXT(size, type, stride, count, pointer) glatter_glTexCoordPointerEXT((size), (type), (stride), (count), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoordPointerEXT, (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#ifndef glVertexPointerEXT
#define glVertexPointerEXT(size, type, stride, count, pointer) glatter_glVertexPointerEXT((size), (type), (stride), (count), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexPointerEXT, (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#endif // defined(GL_EXT_vertex_array)
#if defined(GL_EXT_vertex_attrib_64bit)
#ifndef glGetVertexAttribLdvEXT
#define glGetVertexAttribLdvEXT(index, pname, params) glatter_glGetVertexAttribLdvEXT((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLdvEXT, (GLuint index, GLenum pname, GLdouble *params))
#ifndef glVertexAttribL1dEXT
#define glVertexAttribL1dEXT(index, x) glatter_glVertexAttribL1dEXT((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1dEXT, (GLuint index, GLdouble x))
#ifndef glVertexAttribL1dvEXT
#define glVertexAttribL1dvEXT(index, v) glatter_glVertexAttribL1dvEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1dvEXT, (GLuint index, const GLdouble *v))
#ifndef glVertexAttribL2dEXT
#define glVertexAttribL2dEXT(index, x, y) glatter_glVertexAttribL2dEXT((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2dEXT, (GLuint index, GLdouble x, GLdouble y))
#ifndef glVertexAttribL2dvEXT
#define glVertexAttribL2dvEXT(index, v) glatter_glVertexAttribL2dvEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2dvEXT, (GLuint index, const GLdouble *v))
#ifndef glVertexAttribL3dEXT
#define glVertexAttribL3dEXT(index, x, y, z) glatter_glVertexAttribL3dEXT((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3dEXT, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#ifndef glVertexAttribL3dvEXT
#define glVertexAttribL3dvEXT(index, v) glatter_glVertexAttribL3dvEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3dvEXT, (GLuint index, const GLdouble *v))
#ifndef glVertexAttribL4dEXT
#define glVertexAttribL4dEXT(index, x, y, z, w) glatter_glVertexAttribL4dEXT((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4dEXT, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#ifndef glVertexAttribL4dvEXT
#define glVertexAttribL4dvEXT(index, v) glatter_glVertexAttribL4dvEXT((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4dvEXT, (GLuint index, const GLdouble *v))
#ifndef glVertexAttribLPointerEXT
#define glVertexAttribLPointerEXT(index, size, type, stride, pointer) glatter_glVertexAttribLPointerEXT((index), (size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLPointerEXT, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_EXT_vertex_attrib_64bit)
#if defined(GL_EXT_vertex_shader)
#ifndef glBeginVertexShaderEXT
#define glBeginVertexShaderEXT() glatter_glBeginVertexShaderEXT()
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginVertexShaderEXT, (void))
#ifndef glBindLightParameterEXT
#define glBindLightParameterEXT(light, value) glatter_glBindLightParameterEXT((light), (value))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glBindLightParameterEXT, (GLenum light, GLenum value))
#ifndef glBindMaterialParameterEXT
#define glBindMaterialParameterEXT(face, value) glatter_glBindMaterialParameterEXT((face), (value))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glBindMaterialParameterEXT, (GLenum face, GLenum value))
#ifndef glBindParameterEXT
#define glBindParameterEXT(value) glatter_glBindParameterEXT((value))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glBindParameterEXT, (GLenum value))
#ifndef glBindTexGenParameterEXT
#define glBindTexGenParameterEXT(unit, coord, value) glatter_glBindTexGenParameterEXT((unit), (coord), (value))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glBindTexGenParameterEXT, (GLenum unit, GLenum coord, GLenum value))
#ifndef glBindTextureUnitParameterEXT
#define glBindTextureUnitParameterEXT(unit, value) glatter_glBindTextureUnitParameterEXT((unit), (value))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glBindTextureUnitParameterEXT, (GLenum unit, GLenum value))
#ifndef glBindVertexShaderEXT
#define glBindVertexShaderEXT(id) glatter_glBindVertexShaderEXT((id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindVertexShaderEXT, (GLuint id))
#ifndef glDeleteVertexShaderEXT
#define glDeleteVertexShaderEXT(id) glatter_glDeleteVertexShaderEXT((id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteVertexShaderEXT, (GLuint id))
#ifndef glDisableVariantClientStateEXT
#define glDisableVariantClientStateEXT(id) glatter_glDisableVariantClientStateEXT((id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDisableVariantClientStateEXT, (GLuint id))
#ifndef glEnableVariantClientStateEXT
#define glEnableVariantClientStateEXT(id) glatter_glEnableVariantClientStateEXT((id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEnableVariantClientStateEXT, (GLuint id))
#ifndef glEndVertexShaderEXT
#define glEndVertexShaderEXT() glatter_glEndVertexShaderEXT()
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndVertexShaderEXT, (void))
#ifndef glExtractComponentEXT
#define glExtractComponentEXT(res, src, num) glatter_glExtractComponentEXT((res), (src), (num))
#endif
GLATTER_UBLOCK(void, APIENTRY, glExtractComponentEXT, (GLuint res, GLuint src, GLuint num))
#ifndef glGenSymbolsEXT
#define glGenSymbolsEXT(datatype, storagetype, range, components) glatter_glGenSymbolsEXT((datatype), (storagetype), (range), (components))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glGenSymbolsEXT, (GLenum datatype, GLenum storagetype, GLenum range, GLuint components))
#ifndef glGenVertexShadersEXT
#define glGenVertexShadersEXT(range) glatter_glGenVertexShadersEXT((range))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glGenVertexShadersEXT, (GLuint range))
#ifndef glGetInvariantBooleanvEXT
#define glGetInvariantBooleanvEXT(id, value, data) glatter_glGetInvariantBooleanvEXT((id), (value), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetInvariantBooleanvEXT, (GLuint id, GLenum value, GLboolean *data))
#ifndef glGetInvariantFloatvEXT
#define glGetInvariantFloatvEXT(id, value, data) glatter_glGetInvariantFloatvEXT((id), (value), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetInvariantFloatvEXT, (GLuint id, GLenum value, GLfloat *data))
#ifndef glGetInvariantIntegervEXT
#define glGetInvariantIntegervEXT(id, value, data) glatter_glGetInvariantIntegervEXT((id), (value), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetInvariantIntegervEXT, (GLuint id, GLenum value, GLint *data))
#ifndef glGetLocalConstantBooleanvEXT
#define glGetLocalConstantBooleanvEXT(id, value, data) glatter_glGetLocalConstantBooleanvEXT((id), (value), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetLocalConstantBooleanvEXT, (GLuint id, GLenum value, GLboolean *data))
#ifndef glGetLocalConstantFloatvEXT
#define glGetLocalConstantFloatvEXT(id, value, data) glatter_glGetLocalConstantFloatvEXT((id), (value), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetLocalConstantFloatvEXT, (GLuint id, GLenum value, GLfloat *data))
#ifndef glGetLocalConstantIntegervEXT
#define glGetLocalConstantIntegervEXT(id, value, data) glatter_glGetLocalConstantIntegervEXT((id), (value), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetLocalConstantIntegervEXT, (GLuint id, GLenum value, GLint *data))
#ifndef glGetVariantBooleanvEXT
#define glGetVariantBooleanvEXT(id, value, data) glatter_glGetVariantBooleanvEXT((id), (value), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVariantBooleanvEXT, (GLuint id, GLenum value, GLboolean *data))
#ifndef glGetVariantFloatvEXT
#define glGetVariantFloatvEXT(id, value, data) glatter_glGetVariantFloatvEXT((id), (value), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVariantFloatvEXT, (GLuint id, GLenum value, GLfloat *data))
#ifndef glGetVariantIntegervEXT
#define glGetVariantIntegervEXT(id, value, data) glatter_glGetVariantIntegervEXT((id), (value), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVariantIntegervEXT, (GLuint id, GLenum value, GLint *data))
#ifndef glGetVariantPointervEXT
#define glGetVariantPointervEXT(id, value, data) glatter_glGetVariantPointervEXT((id), (value), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVariantPointervEXT, (GLuint id, GLenum value, void **data))
#ifndef glInsertComponentEXT
#define glInsertComponentEXT(res, src, num) glatter_glInsertComponentEXT((res), (src), (num))
#endif
GLATTER_UBLOCK(void, APIENTRY, glInsertComponentEXT, (GLuint res, GLuint src, GLuint num))
#ifndef glIsVariantEnabledEXT
#define glIsVariantEnabledEXT(id, cap) glatter_glIsVariantEnabledEXT((id), (cap))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVariantEnabledEXT, (GLuint id, GLenum cap))
#ifndef glSetInvariantEXT
#define glSetInvariantEXT(id, type, addr) glatter_glSetInvariantEXT((id), (type), (addr))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSetInvariantEXT, (GLuint id, GLenum type, const void *addr))
#ifndef glSetLocalConstantEXT
#define glSetLocalConstantEXT(id, type, addr) glatter_glSetLocalConstantEXT((id), (type), (addr))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSetLocalConstantEXT, (GLuint id, GLenum type, const void *addr))
#ifndef glShaderOp1EXT
#define glShaderOp1EXT(op, res, arg1) glatter_glShaderOp1EXT((op), (res), (arg1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glShaderOp1EXT, (GLenum op, GLuint res, GLuint arg1))
#ifndef glShaderOp2EXT
#define glShaderOp2EXT(op, res, arg1, arg2) glatter_glShaderOp2EXT((op), (res), (arg1), (arg2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glShaderOp2EXT, (GLenum op, GLuint res, GLuint arg1, GLuint arg2))
#ifndef glShaderOp3EXT
#define glShaderOp3EXT(op, res, arg1, arg2, arg3) glatter_glShaderOp3EXT((op), (res), (arg1), (arg2), (arg3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glShaderOp3EXT, (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3))
#ifndef glSwizzleEXT
#define glSwizzleEXT(res, in, outX, outY, outZ, outW) glatter_glSwizzleEXT((res), (in), (outX), (outY), (outZ), (outW))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSwizzleEXT, (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW))
#ifndef glVariantPointerEXT
#define glVariantPointerEXT(id, type, stride, addr) glatter_glVariantPointerEXT((id), (type), (stride), (addr))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVariantPointerEXT, (GLuint id, GLenum type, GLuint stride, const void *addr))
#ifndef glVariantbvEXT
#define glVariantbvEXT(id, addr) glatter_glVariantbvEXT((id), (addr))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVariantbvEXT, (GLuint id, const GLbyte *addr))
#ifndef glVariantdvEXT
#define glVariantdvEXT(id, addr) glatter_glVariantdvEXT((id), (addr))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVariantdvEXT, (GLuint id, const GLdouble *addr))
#ifndef glVariantfvEXT
#define glVariantfvEXT(id, addr) glatter_glVariantfvEXT((id), (addr))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVariantfvEXT, (GLuint id, const GLfloat *addr))
#ifndef glVariantivEXT
#define glVariantivEXT(id, addr) glatter_glVariantivEXT((id), (addr))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVariantivEXT, (GLuint id, const GLint *addr))
#ifndef glVariantsvEXT
#define glVariantsvEXT(id, addr) glatter_glVariantsvEXT((id), (addr))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVariantsvEXT, (GLuint id, const GLshort *addr))
#ifndef glVariantubvEXT
#define glVariantubvEXT(id, addr) glatter_glVariantubvEXT((id), (addr))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVariantubvEXT, (GLuint id, const GLubyte *addr))
#ifndef glVariantuivEXT
#define glVariantuivEXT(id, addr) glatter_glVariantuivEXT((id), (addr))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVariantuivEXT, (GLuint id, const GLuint *addr))
#ifndef glVariantusvEXT
#define glVariantusvEXT(id, addr) glatter_glVariantusvEXT((id), (addr))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVariantusvEXT, (GLuint id, const GLushort *addr))
#ifndef glWriteMaskEXT
#define glWriteMaskEXT(res, in, outX, outY, outZ, outW) glatter_glWriteMaskEXT((res), (in), (outX), (outY), (outZ), (outW))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWriteMaskEXT, (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW))
#endif // defined(GL_EXT_vertex_shader)
#if defined(GL_EXT_vertex_weighting)
#ifndef glVertexWeightPointerEXT
#define glVertexWeightPointerEXT(size, type, stride, pointer) glatter_glVertexWeightPointerEXT((size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexWeightPointerEXT, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#ifndef glVertexWeightfEXT
#define glVertexWeightfEXT(weight) glatter_glVertexWeightfEXT((weight))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexWeightfEXT, (GLfloat weight))
#ifndef glVertexWeightfvEXT
#define glVertexWeightfvEXT(weight) glatter_glVertexWeightfvEXT((weight))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexWeightfvEXT, (const GLfloat *weight))
#endif // defined(GL_EXT_vertex_weighting)
#if defined(GL_EXT_win32_keyed_mutex)
#ifndef glAcquireKeyedMutexWin32EXT
#define glAcquireKeyedMutexWin32EXT(memory, key, timeout) glatter_glAcquireKeyedMutexWin32EXT((memory), (key), (timeout))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glAcquireKeyedMutexWin32EXT, (GLuint memory, GLuint64 key, GLuint timeout))
#ifndef glReleaseKeyedMutexWin32EXT
#define glReleaseKeyedMutexWin32EXT(memory, key) glatter_glReleaseKeyedMutexWin32EXT((memory), (key))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glReleaseKeyedMutexWin32EXT, (GLuint memory, GLuint64 key))
#endif // defined(GL_EXT_win32_keyed_mutex)
#if defined(GL_EXT_window_rectangles)
#ifndef glWindowRectanglesEXT
#define glWindowRectanglesEXT(mode, count, box) glatter_glWindowRectanglesEXT((mode), (count), (box))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowRectanglesEXT, (GLenum mode, GLsizei count, const GLint *box))
#endif // defined(GL_EXT_window_rectangles)
#if defined(GL_EXT_x11_sync_object)
#ifndef glImportSyncEXT
#define glImportSyncEXT(external_sync_type, external_sync, flags) glatter_glImportSyncEXT((external_sync_type), (external_sync), (flags))
#endif
GLATTER_UBLOCK(GLsync, APIENTRY, glImportSyncEXT, (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags))
#endif // defined(GL_EXT_x11_sync_object)
#if defined(GL_GREMEDY_frame_terminator)
#ifndef glFrameTerminatorGREMEDY
#define glFrameTerminatorGREMEDY() glatter_glFrameTerminatorGREMEDY()
#endif
GLATTER_UBLOCK(void, APIENTRY, glFrameTerminatorGREMEDY, (void))
#endif // defined(GL_GREMEDY_frame_terminator)
#if defined(GL_GREMEDY_string_marker)
#ifndef glStringMarkerGREMEDY
#define glStringMarkerGREMEDY(len, string) glatter_glStringMarkerGREMEDY((len), (string))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStringMarkerGREMEDY, (GLsizei len, const void *string))
#endif // defined(GL_GREMEDY_string_marker)
#if defined(GL_HP_image_transform)
#ifndef glGetImageTransformParameterfvHP
#define glGetImageTransformParameterfvHP(target, pname, params) glatter_glGetImageTransformParameterfvHP((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetImageTransformParameterfvHP, (GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetImageTransformParameterivHP
#define glGetImageTransformParameterivHP(target, pname, params) glatter_glGetImageTransformParameterivHP((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetImageTransformParameterivHP, (GLenum target, GLenum pname, GLint *params))
#ifndef glImageTransformParameterfHP
#define glImageTransformParameterfHP(target, pname, param) glatter_glImageTransformParameterfHP((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glImageTransformParameterfHP, (GLenum target, GLenum pname, GLfloat param))
#ifndef glImageTransformParameterfvHP
#define glImageTransformParameterfvHP(target, pname, params) glatter_glImageTransformParameterfvHP((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glImageTransformParameterfvHP, (GLenum target, GLenum pname, const GLfloat *params))
#ifndef glImageTransformParameteriHP
#define glImageTransformParameteriHP(target, pname, param) glatter_glImageTransformParameteriHP((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glImageTransformParameteriHP, (GLenum target, GLenum pname, GLint param))
#ifndef glImageTransformParameterivHP
#define glImageTransformParameterivHP(target, pname, params) glatter_glImageTransformParameterivHP((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glImageTransformParameterivHP, (GLenum target, GLenum pname, const GLint *params))
#endif // defined(GL_HP_image_transform)
#if defined(GL_IBM_multimode_draw_arrays)
#ifndef glMultiModeDrawArraysIBM
#define glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride) glatter_glMultiModeDrawArraysIBM((mode), (first), (count), (primcount), (modestride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiModeDrawArraysIBM, (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride))
#ifndef glMultiModeDrawElementsIBM
#define glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride) glatter_glMultiModeDrawElementsIBM((mode), (count), (type), (indices), (primcount), (modestride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiModeDrawElementsIBM, (const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride))
#endif // defined(GL_IBM_multimode_draw_arrays)
#if defined(GL_IBM_static_data)
#ifndef glFlushStaticDataIBM
#define glFlushStaticDataIBM(target) glatter_glFlushStaticDataIBM((target))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFlushStaticDataIBM, (GLenum target))
#endif // defined(GL_IBM_static_data)
#if defined(GL_IBM_vertex_array_lists)
#ifndef glColorPointerListIBM
#define glColorPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glColorPointerListIBM((size), (type), (stride), (pointer), (ptrstride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorPointerListIBM, (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#ifndef glEdgeFlagPointerListIBM
#define glEdgeFlagPointerListIBM(stride, pointer, ptrstride) glatter_glEdgeFlagPointerListIBM((stride), (pointer), (ptrstride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlagPointerListIBM, (GLint stride, const GLboolean **pointer, GLint ptrstride))
#ifndef glFogCoordPointerListIBM
#define glFogCoordPointerListIBM(type, stride, pointer, ptrstride) glatter_glFogCoordPointerListIBM((type), (stride), (pointer), (ptrstride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogCoordPointerListIBM, (GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#ifndef glIndexPointerListIBM
#define glIndexPointerListIBM(type, stride, pointer, ptrstride) glatter_glIndexPointerListIBM((type), (stride), (pointer), (ptrstride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glIndexPointerListIBM, (GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#ifndef glNormalPointerListIBM
#define glNormalPointerListIBM(type, stride, pointer, ptrstride) glatter_glNormalPointerListIBM((type), (stride), (pointer), (ptrstride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalPointerListIBM, (GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#ifndef glSecondaryColorPointerListIBM
#define glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glSecondaryColorPointerListIBM((size), (type), (stride), (pointer), (ptrstride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorPointerListIBM, (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#ifndef glTexCoordPointerListIBM
#define glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glTexCoordPointerListIBM((size), (type), (stride), (pointer), (ptrstride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoordPointerListIBM, (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#ifndef glVertexPointerListIBM
#define glVertexPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glVertexPointerListIBM((size), (type), (stride), (pointer), (ptrstride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexPointerListIBM, (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#endif // defined(GL_IBM_vertex_array_lists)
#if defined(GL_INGR_blend_func_separate)
#ifndef glBlendFuncSeparateINGR
#define glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparateINGR((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateINGR, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#endif // defined(GL_INGR_blend_func_separate)
#if defined(GL_INTEL_framebuffer_CMAA)
#ifndef glApplyFramebufferAttachmentCMAAINTEL
#define glApplyFramebufferAttachmentCMAAINTEL() glatter_glApplyFramebufferAttachmentCMAAINTEL()
#endif
GLATTER_UBLOCK(void, APIENTRY, glApplyFramebufferAttachmentCMAAINTEL, (void))
#endif // defined(GL_INTEL_framebuffer_CMAA)
#if defined(GL_INTEL_map_texture)
#ifndef glMapTexture2DINTEL
#define glMapTexture2DINTEL(texture, level, access, stride, layout) glatter_glMapTexture2DINTEL((texture), (level), (access), (stride), (layout))
#endif
GLATTER_UBLOCK(void *, APIENTRY, glMapTexture2DINTEL, (GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout))
#ifndef glSyncTextureINTEL
#define glSyncTextureINTEL(texture) glatter_glSyncTextureINTEL((texture))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSyncTextureINTEL, (GLuint texture))
#ifndef glUnmapTexture2DINTEL
#define glUnmapTexture2DINTEL(texture, level) glatter_glUnmapTexture2DINTEL((texture), (level))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUnmapTexture2DINTEL, (GLuint texture, GLint level))
#endif // defined(GL_INTEL_map_texture)
#if defined(GL_INTEL_parallel_arrays)
#ifndef glColorPointervINTEL
#define glColorPointervINTEL(size, type, pointer) glatter_glColorPointervINTEL((size), (type), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorPointervINTEL, (GLint size, GLenum type, const void **pointer))
#ifndef glNormalPointervINTEL
#define glNormalPointervINTEL(type, pointer) glatter_glNormalPointervINTEL((type), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalPointervINTEL, (GLenum type, const void **pointer))
#ifndef glTexCoordPointervINTEL
#define glTexCoordPointervINTEL(size, type, pointer) glatter_glTexCoordPointervINTEL((size), (type), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoordPointervINTEL, (GLint size, GLenum type, const void **pointer))
#ifndef glVertexPointervINTEL
#define glVertexPointervINTEL(size, type, pointer) glatter_glVertexPointervINTEL((size), (type), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexPointervINTEL, (GLint size, GLenum type, const void **pointer))
#endif // defined(GL_INTEL_parallel_arrays)
#if defined(GL_INTEL_performance_query)
#ifndef glBeginPerfQueryINTEL
#define glBeginPerfQueryINTEL(queryHandle) glatter_glBeginPerfQueryINTEL((queryHandle))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginPerfQueryINTEL, (GLuint queryHandle))
#ifndef glCreatePerfQueryINTEL
#define glCreatePerfQueryINTEL(queryId, queryHandle) glatter_glCreatePerfQueryINTEL((queryId), (queryHandle))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCreatePerfQueryINTEL, (GLuint queryId, GLuint *queryHandle))
#ifndef glDeletePerfQueryINTEL
#define glDeletePerfQueryINTEL(queryHandle) glatter_glDeletePerfQueryINTEL((queryHandle))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeletePerfQueryINTEL, (GLuint queryHandle))
#ifndef glEndPerfQueryINTEL
#define glEndPerfQueryINTEL(queryHandle) glatter_glEndPerfQueryINTEL((queryHandle))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndPerfQueryINTEL, (GLuint queryHandle))
#ifndef glGetFirstPerfQueryIdINTEL
#define glGetFirstPerfQueryIdINTEL(queryId) glatter_glGetFirstPerfQueryIdINTEL((queryId))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFirstPerfQueryIdINTEL, (GLuint *queryId))
#ifndef glGetNextPerfQueryIdINTEL
#define glGetNextPerfQueryIdINTEL(queryId, nextQueryId) glatter_glGetNextPerfQueryIdINTEL((queryId), (nextQueryId))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNextPerfQueryIdINTEL, (GLuint queryId, GLuint *nextQueryId))
#ifndef glGetPerfCounterInfoINTEL
#define glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) glatter_glGetPerfCounterInfoINTEL((queryId), (counterId), (counterNameLength), (counterName), (counterDescLength), (counterDesc), (counterOffset), (counterDataSize), (counterTypeEnum), (counterDataTypeEnum), (rawCounterMaxValue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPerfCounterInfoINTEL, (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue))
#ifndef glGetPerfQueryDataINTEL
#define glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten) glatter_glGetPerfQueryDataINTEL((queryHandle), (flags), (dataSize), (data), (bytesWritten))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryDataINTEL, (GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten))
#ifndef glGetPerfQueryIdByNameINTEL
#define glGetPerfQueryIdByNameINTEL(queryName, queryId) glatter_glGetPerfQueryIdByNameINTEL((queryName), (queryId))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryIdByNameINTEL, (GLchar *queryName, GLuint *queryId))
#ifndef glGetPerfQueryInfoINTEL
#define glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) glatter_glGetPerfQueryInfoINTEL((queryId), (queryNameLength), (queryName), (dataSize), (noCounters), (noInstances), (capsMask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryInfoINTEL, (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask))
#endif // defined(GL_INTEL_performance_query)
#if defined(GL_KHR_blend_equation_advanced)
#ifndef glBlendBarrierKHR
#define glBlendBarrierKHR() glatter_glBlendBarrierKHR()
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendBarrierKHR, (void))
#endif // defined(GL_KHR_blend_equation_advanced)
#if defined(GL_KHR_parallel_shader_compile)
#ifndef glMaxShaderCompilerThreadsKHR
#define glMaxShaderCompilerThreadsKHR(count) glatter_glMaxShaderCompilerThreadsKHR((count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMaxShaderCompilerThreadsKHR, (GLuint count))
#endif // defined(GL_KHR_parallel_shader_compile)
#if defined(GL_MESA_framebuffer_flip_y)
#ifndef glFramebufferParameteriMESA
#define glFramebufferParameteriMESA(target, pname, param) glatter_glFramebufferParameteriMESA((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferParameteriMESA, (GLenum target, GLenum pname, GLint param))
#ifndef glGetFramebufferParameterivMESA
#define glGetFramebufferParameterivMESA(target, pname, params) glatter_glGetFramebufferParameterivMESA((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferParameterivMESA, (GLenum target, GLenum pname, GLint *params))
#endif // defined(GL_MESA_framebuffer_flip_y)
#if defined(GL_MESA_resize_buffers)
#ifndef glResizeBuffersMESA
#define glResizeBuffersMESA() glatter_glResizeBuffersMESA()
#endif
GLATTER_UBLOCK(void, APIENTRY, glResizeBuffersMESA, (void))
#endif // defined(GL_MESA_resize_buffers)
#if defined(GL_MESA_window_pos)
#ifndef glWindowPos2dMESA
#define glWindowPos2dMESA(x, y) glatter_glWindowPos2dMESA((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dMESA, (GLdouble x, GLdouble y))
#ifndef glWindowPos2dvMESA
#define glWindowPos2dvMESA(v) glatter_glWindowPos2dvMESA((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dvMESA, (const GLdouble *v))
#ifndef glWindowPos2fMESA
#define glWindowPos2fMESA(x, y) glatter_glWindowPos2fMESA((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fMESA, (GLfloat x, GLfloat y))
#ifndef glWindowPos2fvMESA
#define glWindowPos2fvMESA(v) glatter_glWindowPos2fvMESA((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fvMESA, (const GLfloat *v))
#ifndef glWindowPos2iMESA
#define glWindowPos2iMESA(x, y) glatter_glWindowPos2iMESA((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2iMESA, (GLint x, GLint y))
#ifndef glWindowPos2ivMESA
#define glWindowPos2ivMESA(v) glatter_glWindowPos2ivMESA((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2ivMESA, (const GLint *v))
#ifndef glWindowPos2sMESA
#define glWindowPos2sMESA(x, y) glatter_glWindowPos2sMESA((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2sMESA, (GLshort x, GLshort y))
#ifndef glWindowPos2svMESA
#define glWindowPos2svMESA(v) glatter_glWindowPos2svMESA((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2svMESA, (const GLshort *v))
#ifndef glWindowPos3dMESA
#define glWindowPos3dMESA(x, y, z) glatter_glWindowPos3dMESA((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dMESA, (GLdouble x, GLdouble y, GLdouble z))
#ifndef glWindowPos3dvMESA
#define glWindowPos3dvMESA(v) glatter_glWindowPos3dvMESA((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dvMESA, (const GLdouble *v))
#ifndef glWindowPos3fMESA
#define glWindowPos3fMESA(x, y, z) glatter_glWindowPos3fMESA((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fMESA, (GLfloat x, GLfloat y, GLfloat z))
#ifndef glWindowPos3fvMESA
#define glWindowPos3fvMESA(v) glatter_glWindowPos3fvMESA((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fvMESA, (const GLfloat *v))
#ifndef glWindowPos3iMESA
#define glWindowPos3iMESA(x, y, z) glatter_glWindowPos3iMESA((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3iMESA, (GLint x, GLint y, GLint z))
#ifndef glWindowPos3ivMESA
#define glWindowPos3ivMESA(v) glatter_glWindowPos3ivMESA((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3ivMESA, (const GLint *v))
#ifndef glWindowPos3sMESA
#define glWindowPos3sMESA(x, y, z) glatter_glWindowPos3sMESA((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3sMESA, (GLshort x, GLshort y, GLshort z))
#ifndef glWindowPos3svMESA
#define glWindowPos3svMESA(v) glatter_glWindowPos3svMESA((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3svMESA, (const GLshort *v))
#ifndef glWindowPos4dMESA
#define glWindowPos4dMESA(x, y, z, w) glatter_glWindowPos4dMESA((x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4dMESA, (GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#ifndef glWindowPos4dvMESA
#define glWindowPos4dvMESA(v) glatter_glWindowPos4dvMESA((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4dvMESA, (const GLdouble *v))
#ifndef glWindowPos4fMESA
#define glWindowPos4fMESA(x, y, z, w) glatter_glWindowPos4fMESA((x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4fMESA, (GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#ifndef glWindowPos4fvMESA
#define glWindowPos4fvMESA(v) glatter_glWindowPos4fvMESA((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4fvMESA, (const GLfloat *v))
#ifndef glWindowPos4iMESA
#define glWindowPos4iMESA(x, y, z, w) glatter_glWindowPos4iMESA((x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4iMESA, (GLint x, GLint y, GLint z, GLint w))
#ifndef glWindowPos4ivMESA
#define glWindowPos4ivMESA(v) glatter_glWindowPos4ivMESA((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4ivMESA, (const GLint *v))
#ifndef glWindowPos4sMESA
#define glWindowPos4sMESA(x, y, z, w) glatter_glWindowPos4sMESA((x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4sMESA, (GLshort x, GLshort y, GLshort z, GLshort w))
#ifndef glWindowPos4svMESA
#define glWindowPos4svMESA(v) glatter_glWindowPos4svMESA((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4svMESA, (const GLshort *v))
#endif // defined(GL_MESA_window_pos)
#if defined(GL_NVX_conditional_render)
#ifndef glBeginConditionalRenderNVX
#define glBeginConditionalRenderNVX(id) glatter_glBeginConditionalRenderNVX((id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginConditionalRenderNVX, (GLuint id))
#ifndef glEndConditionalRenderNVX
#define glEndConditionalRenderNVX() glatter_glEndConditionalRenderNVX()
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndConditionalRenderNVX, (void))
#endif // defined(GL_NVX_conditional_render)
#if defined(GL_NVX_gpu_multicast2)
#ifndef glAsyncCopyBufferSubDataNVX
#define glAsyncCopyBufferSubDataNVX(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray) glatter_glAsyncCopyBufferSubDataNVX((waitSemaphoreCount), (waitSemaphoreArray), (fenceValueArray), (readGpu), (writeGpuMask), (readBuffer), (writeBuffer), (readOffset), (writeOffset), (size), (signalSemaphoreCount), (signalSemaphoreArray), (signalValueArray))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glAsyncCopyBufferSubDataNVX, (GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray))
#ifndef glAsyncCopyImageSubDataNVX
#define glAsyncCopyImageSubDataNVX(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray) glatter_glAsyncCopyImageSubDataNVX((waitSemaphoreCount), (waitSemaphoreArray), (waitValueArray), (srcGpu), (dstGpuMask), (srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), (signalSemaphoreCount), (signalSemaphoreArray), (signalValueArray))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glAsyncCopyImageSubDataNVX, (GLsizei waitSemaphoreCount, const GLuint *waitSemaphoreArray, const GLuint64 *waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, const GLuint *signalSemaphoreArray, const GLuint64 *signalValueArray))
#ifndef glMulticastScissorArrayvNVX
#define glMulticastScissorArrayvNVX(gpu, first, count, v) glatter_glMulticastScissorArrayvNVX((gpu), (first), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMulticastScissorArrayvNVX, (GLuint gpu, GLuint first, GLsizei count, const GLint *v))
#ifndef glMulticastViewportArrayvNVX
#define glMulticastViewportArrayvNVX(gpu, first, count, v) glatter_glMulticastViewportArrayvNVX((gpu), (first), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMulticastViewportArrayvNVX, (GLuint gpu, GLuint first, GLsizei count, const GLfloat *v))
#ifndef glMulticastViewportPositionWScaleNVX
#define glMulticastViewportPositionWScaleNVX(gpu, index, xcoeff, ycoeff) glatter_glMulticastViewportPositionWScaleNVX((gpu), (index), (xcoeff), (ycoeff))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMulticastViewportPositionWScaleNVX, (GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff))
#ifndef glUploadGpuMaskNVX
#define glUploadGpuMaskNVX(mask) glatter_glUploadGpuMaskNVX((mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUploadGpuMaskNVX, (GLbitfield mask))
#endif // defined(GL_NVX_gpu_multicast2)
#if defined(GL_NVX_linked_gpu_multicast)
#ifndef glLGPUCopyImageSubDataNVX
#define glLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_glLGPUCopyImageSubDataNVX((sourceGpu), (destinationGpuMask), (srcName), (srcTarget), (srcLevel), (srcX), (srxY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLGPUCopyImageSubDataNVX, (GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth))
#ifndef glLGPUInterlockNVX
#define glLGPUInterlockNVX() glatter_glLGPUInterlockNVX()
#endif
GLATTER_UBLOCK(void, APIENTRY, glLGPUInterlockNVX, (void))
#ifndef glLGPUNamedBufferSubDataNVX
#define glLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data) glatter_glLGPUNamedBufferSubDataNVX((gpuMask), (buffer), (offset), (size), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLGPUNamedBufferSubDataNVX, (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data))
#endif // defined(GL_NVX_linked_gpu_multicast)
#if defined(GL_NVX_progress_fence)
#ifndef glClientWaitSemaphoreui64NVX
#define glClientWaitSemaphoreui64NVX(fenceObjectCount, semaphoreArray, fenceValueArray) glatter_glClientWaitSemaphoreui64NVX((fenceObjectCount), (semaphoreArray), (fenceValueArray))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClientWaitSemaphoreui64NVX, (GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray))
#ifndef glCreateProgressFenceNVX
#define glCreateProgressFenceNVX() glatter_glCreateProgressFenceNVX()
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateProgressFenceNVX, (void))
#ifndef glSignalSemaphoreui64NVX
#define glSignalSemaphoreui64NVX(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray) glatter_glSignalSemaphoreui64NVX((signalGpu), (fenceObjectCount), (semaphoreArray), (fenceValueArray))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSignalSemaphoreui64NVX, (GLuint signalGpu, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray))
#ifndef glWaitSemaphoreui64NVX
#define glWaitSemaphoreui64NVX(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray) glatter_glWaitSemaphoreui64NVX((waitGpu), (fenceObjectCount), (semaphoreArray), (fenceValueArray))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWaitSemaphoreui64NVX, (GLuint waitGpu, GLsizei fenceObjectCount, const GLuint *semaphoreArray, const GLuint64 *fenceValueArray))
#endif // defined(GL_NVX_progress_fence)
#if defined(GL_NV_alpha_to_coverage_dither_control)
#ifndef glAlphaToCoverageDitherControlNV
#define glAlphaToCoverageDitherControlNV(mode) glatter_glAlphaToCoverageDitherControlNV((mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glAlphaToCoverageDitherControlNV, (GLenum mode))
#endif // defined(GL_NV_alpha_to_coverage_dither_control)
#if defined(GL_NV_bindless_multi_draw_indirect)
#ifndef glMultiDrawArraysIndirectBindlessNV
#define glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount) glatter_glMultiDrawArraysIndirectBindlessNV((mode), (indirect), (drawCount), (stride), (vertexBufferCount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectBindlessNV, (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount))
#ifndef glMultiDrawElementsIndirectBindlessNV
#define glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount) glatter_glMultiDrawElementsIndirectBindlessNV((mode), (type), (indirect), (drawCount), (stride), (vertexBufferCount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectBindlessNV, (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount))
#endif // defined(GL_NV_bindless_multi_draw_indirect)
#if defined(GL_NV_bindless_multi_draw_indirect_count)
#ifndef glMultiDrawArraysIndirectBindlessCountNV
#define glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) glatter_glMultiDrawArraysIndirectBindlessCountNV((mode), (indirect), (drawCount), (maxDrawCount), (stride), (vertexBufferCount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectBindlessCountNV, (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount))
#ifndef glMultiDrawElementsIndirectBindlessCountNV
#define glMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) glatter_glMultiDrawElementsIndirectBindlessCountNV((mode), (type), (indirect), (drawCount), (maxDrawCount), (stride), (vertexBufferCount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectBindlessCountNV, (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount))
#endif // defined(GL_NV_bindless_multi_draw_indirect_count)
#if defined(GL_NV_bindless_texture)
#ifndef glGetImageHandleNV
#define glGetImageHandleNV(texture, level, layered, layer, format) glatter_glGetImageHandleNV((texture), (level), (layered), (layer), (format))
#endif
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetImageHandleNV, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format))
#ifndef glGetTextureHandleNV
#define glGetTextureHandleNV(texture) glatter_glGetTextureHandleNV((texture))
#endif
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureHandleNV, (GLuint texture))
#ifndef glGetTextureSamplerHandleNV
#define glGetTextureSamplerHandleNV(texture, sampler) glatter_glGetTextureSamplerHandleNV((texture), (sampler))
#endif
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureSamplerHandleNV, (GLuint texture, GLuint sampler))
#ifndef glIsImageHandleResidentNV
#define glIsImageHandleResidentNV(handle) glatter_glIsImageHandleResidentNV((handle))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsImageHandleResidentNV, (GLuint64 handle))
#ifndef glIsTextureHandleResidentNV
#define glIsTextureHandleResidentNV(handle) glatter_glIsTextureHandleResidentNV((handle))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTextureHandleResidentNV, (GLuint64 handle))
#ifndef glMakeImageHandleNonResidentNV
#define glMakeImageHandleNonResidentNV(handle) glatter_glMakeImageHandleNonResidentNV((handle))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleNonResidentNV, (GLuint64 handle))
#ifndef glMakeImageHandleResidentNV
#define glMakeImageHandleResidentNV(handle, access) glatter_glMakeImageHandleResidentNV((handle), (access))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleResidentNV, (GLuint64 handle, GLenum access))
#ifndef glMakeTextureHandleNonResidentNV
#define glMakeTextureHandleNonResidentNV(handle) glatter_glMakeTextureHandleNonResidentNV((handle))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleNonResidentNV, (GLuint64 handle))
#ifndef glMakeTextureHandleResidentNV
#define glMakeTextureHandleResidentNV(handle) glatter_glMakeTextureHandleResidentNV((handle))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleResidentNV, (GLuint64 handle))
#ifndef glProgramUniformHandleui64NV
#define glProgramUniformHandleui64NV(program, location, value) glatter_glProgramUniformHandleui64NV((program), (location), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64NV, (GLuint program, GLint location, GLuint64 value))
#ifndef glProgramUniformHandleui64vNV
#define glProgramUniformHandleui64vNV(program, location, count, values) glatter_glProgramUniformHandleui64vNV((program), (location), (count), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#ifndef glUniformHandleui64NV
#define glUniformHandleui64NV(location, value) glatter_glUniformHandleui64NV((location), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64NV, (GLint location, GLuint64 value))
#ifndef glUniformHandleui64vNV
#define glUniformHandleui64vNV(location, count, value) glatter_glUniformHandleui64vNV((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64vNV, (GLint location, GLsizei count, const GLuint64 *value))
#endif // defined(GL_NV_bindless_texture)
#if defined(GL_NV_blend_equation_advanced)
#ifndef glBlendBarrierNV
#define glBlendBarrierNV() glatter_glBlendBarrierNV()
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendBarrierNV, (void))
#ifndef glBlendParameteriNV
#define glBlendParameteriNV(pname, value) glatter_glBlendParameteriNV((pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendParameteriNV, (GLenum pname, GLint value))
#endif // defined(GL_NV_blend_equation_advanced)
#if defined(GL_NV_clip_space_w_scaling)
#ifndef glViewportPositionWScaleNV
#define glViewportPositionWScaleNV(index, xcoeff, ycoeff) glatter_glViewportPositionWScaleNV((index), (xcoeff), (ycoeff))
#endif
GLATTER_UBLOCK(void, APIENTRY, glViewportPositionWScaleNV, (GLuint index, GLfloat xcoeff, GLfloat ycoeff))
#endif // defined(GL_NV_clip_space_w_scaling)
#if defined(GL_NV_command_list)
#ifndef glCallCommandListNV
#define glCallCommandListNV(list) glatter_glCallCommandListNV((list))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCallCommandListNV, (GLuint list))
#ifndef glCommandListSegmentsNV
#define glCommandListSegmentsNV(list, segments) glatter_glCommandListSegmentsNV((list), (segments))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCommandListSegmentsNV, (GLuint list, GLuint segments))
#ifndef glCompileCommandListNV
#define glCompileCommandListNV(list) glatter_glCompileCommandListNV((list))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompileCommandListNV, (GLuint list))
#ifndef glCreateCommandListsNV
#define glCreateCommandListsNV(n, lists) glatter_glCreateCommandListsNV((n), (lists))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCreateCommandListsNV, (GLsizei n, GLuint *lists))
#ifndef glCreateStatesNV
#define glCreateStatesNV(n, states) glatter_glCreateStatesNV((n), (states))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCreateStatesNV, (GLsizei n, GLuint *states))
#ifndef glDeleteCommandListsNV
#define glDeleteCommandListsNV(n, lists) glatter_glDeleteCommandListsNV((n), (lists))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteCommandListsNV, (GLsizei n, const GLuint *lists))
#ifndef glDeleteStatesNV
#define glDeleteStatesNV(n, states) glatter_glDeleteStatesNV((n), (states))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteStatesNV, (GLsizei n, const GLuint *states))
#ifndef glDrawCommandsAddressNV
#define glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count) glatter_glDrawCommandsAddressNV((primitiveMode), (indirects), (sizes), (count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsAddressNV, (GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count))
#ifndef glDrawCommandsNV
#define glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count) glatter_glDrawCommandsNV((primitiveMode), (buffer), (indirects), (sizes), (count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsNV, (GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count))
#ifndef glDrawCommandsStatesAddressNV
#define glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count) glatter_glDrawCommandsStatesAddressNV((indirects), (sizes), (states), (fbos), (count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsStatesAddressNV, (const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count))
#ifndef glDrawCommandsStatesNV
#define glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count) glatter_glDrawCommandsStatesNV((buffer), (indirects), (sizes), (states), (fbos), (count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsStatesNV, (GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count))
#ifndef glGetCommandHeaderNV
#define glGetCommandHeaderNV(tokenID, size) glatter_glGetCommandHeaderNV((tokenID), (size))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glGetCommandHeaderNV, (GLenum tokenID, GLuint size))
#ifndef glGetStageIndexNV
#define glGetStageIndexNV(shadertype) glatter_glGetStageIndexNV((shadertype))
#endif
GLATTER_UBLOCK(GLushort, APIENTRY, glGetStageIndexNV, (GLenum shadertype))
#ifndef glIsCommandListNV
#define glIsCommandListNV(list) glatter_glIsCommandListNV((list))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsCommandListNV, (GLuint list))
#ifndef glIsStateNV
#define glIsStateNV(state) glatter_glIsStateNV((state))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsStateNV, (GLuint state))
#ifndef glListDrawCommandsStatesClientNV
#define glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count) glatter_glListDrawCommandsStatesClientNV((list), (segment), (indirects), (sizes), (states), (fbos), (count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glListDrawCommandsStatesClientNV, (GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count))
#ifndef glStateCaptureNV
#define glStateCaptureNV(state, mode) glatter_glStateCaptureNV((state), (mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStateCaptureNV, (GLuint state, GLenum mode))
#endif // defined(GL_NV_command_list)
#if defined(GL_NV_conditional_render)
#ifndef glBeginConditionalRenderNV
#define glBeginConditionalRenderNV(id, mode) glatter_glBeginConditionalRenderNV((id), (mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginConditionalRenderNV, (GLuint id, GLenum mode))
#ifndef glEndConditionalRenderNV
#define glEndConditionalRenderNV() glatter_glEndConditionalRenderNV()
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndConditionalRenderNV, (void))
#endif // defined(GL_NV_conditional_render)
#if defined(GL_NV_conservative_raster)
#ifndef glSubpixelPrecisionBiasNV
#define glSubpixelPrecisionBiasNV(xbits, ybits) glatter_glSubpixelPrecisionBiasNV((xbits), (ybits))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSubpixelPrecisionBiasNV, (GLuint xbits, GLuint ybits))
#endif // defined(GL_NV_conservative_raster)
#if defined(GL_NV_conservative_raster_dilate)
#ifndef glConservativeRasterParameterfNV
#define glConservativeRasterParameterfNV(pname, value) glatter_glConservativeRasterParameterfNV((pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConservativeRasterParameterfNV, (GLenum pname, GLfloat value))
#endif // defined(GL_NV_conservative_raster_dilate)
#if defined(GL_NV_conservative_raster_pre_snap_triangles)
#ifndef glConservativeRasterParameteriNV
#define glConservativeRasterParameteriNV(pname, param) glatter_glConservativeRasterParameteriNV((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConservativeRasterParameteriNV, (GLenum pname, GLint param))
#endif // defined(GL_NV_conservative_raster_pre_snap_triangles)
#if defined(GL_NV_copy_image)
#ifndef glCopyImageSubDataNV
#define glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_glCopyImageSubDataNV((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyImageSubDataNV, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GL_NV_copy_image)
#if defined(GL_NV_depth_buffer_float)
#ifndef glClearDepthdNV
#define glClearDepthdNV(depth) glatter_glClearDepthdNV((depth))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearDepthdNV, (GLdouble depth))
#ifndef glDepthBoundsdNV
#define glDepthBoundsdNV(zmin, zmax) glatter_glDepthBoundsdNV((zmin), (zmax))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDepthBoundsdNV, (GLdouble zmin, GLdouble zmax))
#ifndef glDepthRangedNV
#define glDepthRangedNV(zNear, zFar) glatter_glDepthRangedNV((zNear), (zFar))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDepthRangedNV, (GLdouble zNear, GLdouble zFar))
#endif // defined(GL_NV_depth_buffer_float)
#if defined(GL_NV_draw_texture)
#ifndef glDrawTextureNV
#define glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) glatter_glDrawTextureNV((texture), (sampler), (x0), (y0), (x1), (y1), (z), (s0), (t0), (s1), (t1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawTextureNV, (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1))
#endif // defined(GL_NV_draw_texture)
#if defined(GL_NV_draw_vulkan_image)
#ifndef glDrawVkImageNV
#define glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) glatter_glDrawVkImageNV((vkImage), (sampler), (x0), (y0), (x1), (y1), (z), (s0), (t0), (s1), (t1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawVkImageNV, (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1))
#ifndef glGetVkProcAddrNV
#define glGetVkProcAddrNV(name) glatter_glGetVkProcAddrNV((name))
#endif
GLATTER_UBLOCK(GLVULKANPROCNV, APIENTRY, glGetVkProcAddrNV, (const GLchar *name))
#ifndef glSignalVkFenceNV
#define glSignalVkFenceNV(vkFence) glatter_glSignalVkFenceNV((vkFence))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSignalVkFenceNV, (GLuint64 vkFence))
#ifndef glSignalVkSemaphoreNV
#define glSignalVkSemaphoreNV(vkSemaphore) glatter_glSignalVkSemaphoreNV((vkSemaphore))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSignalVkSemaphoreNV, (GLuint64 vkSemaphore))
#ifndef glWaitVkSemaphoreNV
#define glWaitVkSemaphoreNV(vkSemaphore) glatter_glWaitVkSemaphoreNV((vkSemaphore))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWaitVkSemaphoreNV, (GLuint64 vkSemaphore))
#endif // defined(GL_NV_draw_vulkan_image)
#if defined(GL_NV_evaluators)
#ifndef glEvalMapsNV
#define glEvalMapsNV(target, mode) glatter_glEvalMapsNV((target), (mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEvalMapsNV, (GLenum target, GLenum mode))
#ifndef glGetMapAttribParameterfvNV
#define glGetMapAttribParameterfvNV(target, index, pname, params) glatter_glGetMapAttribParameterfvNV((target), (index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMapAttribParameterfvNV, (GLenum target, GLuint index, GLenum pname, GLfloat *params))
#ifndef glGetMapAttribParameterivNV
#define glGetMapAttribParameterivNV(target, index, pname, params) glatter_glGetMapAttribParameterivNV((target), (index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMapAttribParameterivNV, (GLenum target, GLuint index, GLenum pname, GLint *params))
#ifndef glGetMapControlPointsNV
#define glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points) glatter_glGetMapControlPointsNV((target), (index), (type), (ustride), (vstride), (packed), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMapControlPointsNV, (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points))
#ifndef glGetMapParameterfvNV
#define glGetMapParameterfvNV(target, pname, params) glatter_glGetMapParameterfvNV((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMapParameterfvNV, (GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetMapParameterivNV
#define glGetMapParameterivNV(target, pname, params) glatter_glGetMapParameterivNV((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMapParameterivNV, (GLenum target, GLenum pname, GLint *params))
#ifndef glMapControlPointsNV
#define glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points) glatter_glMapControlPointsNV((target), (index), (type), (ustride), (vstride), (uorder), (vorder), (packed), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMapControlPointsNV, (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points))
#ifndef glMapParameterfvNV
#define glMapParameterfvNV(target, pname, params) glatter_glMapParameterfvNV((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMapParameterfvNV, (GLenum target, GLenum pname, const GLfloat *params))
#ifndef glMapParameterivNV
#define glMapParameterivNV(target, pname, params) glatter_glMapParameterivNV((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMapParameterivNV, (GLenum target, GLenum pname, const GLint *params))
#endif // defined(GL_NV_evaluators)
#if defined(GL_NV_explicit_multisample)
#ifndef glGetMultisamplefvNV
#define glGetMultisamplefvNV(pname, index, val) glatter_glGetMultisamplefvNV((pname), (index), (val))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMultisamplefvNV, (GLenum pname, GLuint index, GLfloat *val))
#ifndef glSampleMaskIndexedNV
#define glSampleMaskIndexedNV(index, mask) glatter_glSampleMaskIndexedNV((index), (mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSampleMaskIndexedNV, (GLuint index, GLbitfield mask))
#ifndef glTexRenderbufferNV
#define glTexRenderbufferNV(target, renderbuffer) glatter_glTexRenderbufferNV((target), (renderbuffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexRenderbufferNV, (GLenum target, GLuint renderbuffer))
#endif // defined(GL_NV_explicit_multisample)
#if defined(GL_NV_fence)
#ifndef glDeleteFencesNV
#define glDeleteFencesNV(n, fences) glatter_glDeleteFencesNV((n), (fences))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteFencesNV, (GLsizei n, const GLuint *fences))
#ifndef glFinishFenceNV
#define glFinishFenceNV(fence) glatter_glFinishFenceNV((fence))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFinishFenceNV, (GLuint fence))
#ifndef glGenFencesNV
#define glGenFencesNV(n, fences) glatter_glGenFencesNV((n), (fences))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenFencesNV, (GLsizei n, GLuint *fences))
#ifndef glGetFenceivNV
#define glGetFenceivNV(fence, pname, params) glatter_glGetFenceivNV((fence), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFenceivNV, (GLuint fence, GLenum pname, GLint *params))
#ifndef glIsFenceNV
#define glIsFenceNV(fence) glatter_glIsFenceNV((fence))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFenceNV, (GLuint fence))
#ifndef glSetFenceNV
#define glSetFenceNV(fence, condition) glatter_glSetFenceNV((fence), (condition))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSetFenceNV, (GLuint fence, GLenum condition))
#ifndef glTestFenceNV
#define glTestFenceNV(fence) glatter_glTestFenceNV((fence))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glTestFenceNV, (GLuint fence))
#endif // defined(GL_NV_fence)
#if defined(GL_NV_fragment_coverage_to_color)
#ifndef glFragmentCoverageColorNV
#define glFragmentCoverageColorNV(color) glatter_glFragmentCoverageColorNV((color))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFragmentCoverageColorNV, (GLuint color))
#endif // defined(GL_NV_fragment_coverage_to_color)
#if defined(GL_NV_fragment_program)
#ifndef glGetProgramNamedParameterdvNV
#define glGetProgramNamedParameterdvNV(id, len, name, params) glatter_glGetProgramNamedParameterdvNV((id), (len), (name), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramNamedParameterdvNV, (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params))
#ifndef glGetProgramNamedParameterfvNV
#define glGetProgramNamedParameterfvNV(id, len, name, params) glatter_glGetProgramNamedParameterfvNV((id), (len), (name), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramNamedParameterfvNV, (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params))
#ifndef glProgramNamedParameter4dNV
#define glProgramNamedParameter4dNV(id, len, name, x, y, z, w) glatter_glProgramNamedParameter4dNV((id), (len), (name), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramNamedParameter4dNV, (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#ifndef glProgramNamedParameter4dvNV
#define glProgramNamedParameter4dvNV(id, len, name, v) glatter_glProgramNamedParameter4dvNV((id), (len), (name), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramNamedParameter4dvNV, (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v))
#ifndef glProgramNamedParameter4fNV
#define glProgramNamedParameter4fNV(id, len, name, x, y, z, w) glatter_glProgramNamedParameter4fNV((id), (len), (name), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramNamedParameter4fNV, (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#ifndef glProgramNamedParameter4fvNV
#define glProgramNamedParameter4fvNV(id, len, name, v) glatter_glProgramNamedParameter4fvNV((id), (len), (name), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramNamedParameter4fvNV, (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v))
#endif // defined(GL_NV_fragment_program)
#if defined(GL_NV_framebuffer_mixed_samples)
#ifndef glCoverageModulationNV
#define glCoverageModulationNV(components) glatter_glCoverageModulationNV((components))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCoverageModulationNV, (GLenum components))
#ifndef glCoverageModulationTableNV
#define glCoverageModulationTableNV(n, v) glatter_glCoverageModulationTableNV((n), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCoverageModulationTableNV, (GLsizei n, const GLfloat *v))
#ifndef glGetCoverageModulationTableNV
#define glGetCoverageModulationTableNV(bufSize, v) glatter_glGetCoverageModulationTableNV((bufSize), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetCoverageModulationTableNV, (GLsizei bufSize, GLfloat *v))
#endif // defined(GL_NV_framebuffer_mixed_samples)
#if defined(GL_NV_framebuffer_multisample_coverage)
#ifndef glRenderbufferStorageMultisampleCoverageNV
#define glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleCoverageNV((target), (coverageSamples), (colorSamples), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageMultisampleCoverageNV, (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_NV_framebuffer_multisample_coverage)
#if defined(GL_NV_geometry_program4)
#ifndef glFramebufferTextureEXT
#define glFramebufferTextureEXT(target, attachment, texture, level) glatter_glFramebufferTextureEXT((target), (attachment), (texture), (level))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureEXT, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#ifndef glFramebufferTextureFaceEXT
#define glFramebufferTextureFaceEXT(target, attachment, texture, level, face) glatter_glFramebufferTextureFaceEXT((target), (attachment), (texture), (level), (face))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureFaceEXT, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face))
#ifndef glProgramVertexLimitNV
#define glProgramVertexLimitNV(target, limit) glatter_glProgramVertexLimitNV((target), (limit))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramVertexLimitNV, (GLenum target, GLint limit))
#endif // defined(GL_NV_geometry_program4)
#if defined(GL_NV_gpu_multicast)
#ifndef glMulticastBarrierNV
#define glMulticastBarrierNV() glatter_glMulticastBarrierNV()
#endif
GLATTER_UBLOCK(void, APIENTRY, glMulticastBarrierNV, (void))
#ifndef glMulticastBlitFramebufferNV
#define glMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glMulticastBlitFramebufferNV((srcGpu), (dstGpu), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMulticastBlitFramebufferNV, (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#ifndef glMulticastBufferSubDataNV
#define glMulticastBufferSubDataNV(gpuMask, buffer, offset, size, data) glatter_glMulticastBufferSubDataNV((gpuMask), (buffer), (offset), (size), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMulticastBufferSubDataNV, (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data))
#ifndef glMulticastCopyBufferSubDataNV
#define glMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glMulticastCopyBufferSubDataNV((readGpu), (writeGpuMask), (readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMulticastCopyBufferSubDataNV, (GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#ifndef glMulticastCopyImageSubDataNV
#define glMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glMulticastCopyImageSubDataNV((srcGpu), (dstGpuMask), (srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMulticastCopyImageSubDataNV, (GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth))
#ifndef glMulticastFramebufferSampleLocationsfvNV
#define glMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v) glatter_glMulticastFramebufferSampleLocationsfvNV((gpu), (framebuffer), (start), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMulticastFramebufferSampleLocationsfvNV, (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v))
#ifndef glMulticastGetQueryObjecti64vNV
#define glMulticastGetQueryObjecti64vNV(gpu, id, pname, params) glatter_glMulticastGetQueryObjecti64vNV((gpu), (id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMulticastGetQueryObjecti64vNV, (GLuint gpu, GLuint id, GLenum pname, GLint64 *params))
#ifndef glMulticastGetQueryObjectivNV
#define glMulticastGetQueryObjectivNV(gpu, id, pname, params) glatter_glMulticastGetQueryObjectivNV((gpu), (id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMulticastGetQueryObjectivNV, (GLuint gpu, GLuint id, GLenum pname, GLint *params))
#ifndef glMulticastGetQueryObjectui64vNV
#define glMulticastGetQueryObjectui64vNV(gpu, id, pname, params) glatter_glMulticastGetQueryObjectui64vNV((gpu), (id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMulticastGetQueryObjectui64vNV, (GLuint gpu, GLuint id, GLenum pname, GLuint64 *params))
#ifndef glMulticastGetQueryObjectuivNV
#define glMulticastGetQueryObjectuivNV(gpu, id, pname, params) glatter_glMulticastGetQueryObjectuivNV((gpu), (id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMulticastGetQueryObjectuivNV, (GLuint gpu, GLuint id, GLenum pname, GLuint *params))
#ifndef glMulticastWaitSyncNV
#define glMulticastWaitSyncNV(signalGpu, waitGpuMask) glatter_glMulticastWaitSyncNV((signalGpu), (waitGpuMask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMulticastWaitSyncNV, (GLuint signalGpu, GLbitfield waitGpuMask))
#ifndef glRenderGpuMaskNV
#define glRenderGpuMaskNV(mask) glatter_glRenderGpuMaskNV((mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRenderGpuMaskNV, (GLbitfield mask))
#endif // defined(GL_NV_gpu_multicast)
#if defined(GL_NV_gpu_program4)
#ifndef glGetProgramEnvParameterIivNV
#define glGetProgramEnvParameterIivNV(target, index, params) glatter_glGetProgramEnvParameterIivNV((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramEnvParameterIivNV, (GLenum target, GLuint index, GLint *params))
#ifndef glGetProgramEnvParameterIuivNV
#define glGetProgramEnvParameterIuivNV(target, index, params) glatter_glGetProgramEnvParameterIuivNV((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramEnvParameterIuivNV, (GLenum target, GLuint index, GLuint *params))
#ifndef glGetProgramLocalParameterIivNV
#define glGetProgramLocalParameterIivNV(target, index, params) glatter_glGetProgramLocalParameterIivNV((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramLocalParameterIivNV, (GLenum target, GLuint index, GLint *params))
#ifndef glGetProgramLocalParameterIuivNV
#define glGetProgramLocalParameterIuivNV(target, index, params) glatter_glGetProgramLocalParameterIuivNV((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramLocalParameterIuivNV, (GLenum target, GLuint index, GLuint *params))
#ifndef glProgramEnvParameterI4iNV
#define glProgramEnvParameterI4iNV(target, index, x, y, z, w) glatter_glProgramEnvParameterI4iNV((target), (index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameterI4iNV, (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w))
#ifndef glProgramEnvParameterI4ivNV
#define glProgramEnvParameterI4ivNV(target, index, params) glatter_glProgramEnvParameterI4ivNV((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameterI4ivNV, (GLenum target, GLuint index, const GLint *params))
#ifndef glProgramEnvParameterI4uiNV
#define glProgramEnvParameterI4uiNV(target, index, x, y, z, w) glatter_glProgramEnvParameterI4uiNV((target), (index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameterI4uiNV, (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#ifndef glProgramEnvParameterI4uivNV
#define glProgramEnvParameterI4uivNV(target, index, params) glatter_glProgramEnvParameterI4uivNV((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameterI4uivNV, (GLenum target, GLuint index, const GLuint *params))
#ifndef glProgramEnvParametersI4ivNV
#define glProgramEnvParametersI4ivNV(target, index, count, params) glatter_glProgramEnvParametersI4ivNV((target), (index), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParametersI4ivNV, (GLenum target, GLuint index, GLsizei count, const GLint *params))
#ifndef glProgramEnvParametersI4uivNV
#define glProgramEnvParametersI4uivNV(target, index, count, params) glatter_glProgramEnvParametersI4uivNV((target), (index), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParametersI4uivNV, (GLenum target, GLuint index, GLsizei count, const GLuint *params))
#ifndef glProgramLocalParameterI4iNV
#define glProgramLocalParameterI4iNV(target, index, x, y, z, w) glatter_glProgramLocalParameterI4iNV((target), (index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameterI4iNV, (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w))
#ifndef glProgramLocalParameterI4ivNV
#define glProgramLocalParameterI4ivNV(target, index, params) glatter_glProgramLocalParameterI4ivNV((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameterI4ivNV, (GLenum target, GLuint index, const GLint *params))
#ifndef glProgramLocalParameterI4uiNV
#define glProgramLocalParameterI4uiNV(target, index, x, y, z, w) glatter_glProgramLocalParameterI4uiNV((target), (index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameterI4uiNV, (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#ifndef glProgramLocalParameterI4uivNV
#define glProgramLocalParameterI4uivNV(target, index, params) glatter_glProgramLocalParameterI4uivNV((target), (index), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameterI4uivNV, (GLenum target, GLuint index, const GLuint *params))
#ifndef glProgramLocalParametersI4ivNV
#define glProgramLocalParametersI4ivNV(target, index, count, params) glatter_glProgramLocalParametersI4ivNV((target), (index), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParametersI4ivNV, (GLenum target, GLuint index, GLsizei count, const GLint *params))
#ifndef glProgramLocalParametersI4uivNV
#define glProgramLocalParametersI4uivNV(target, index, count, params) glatter_glProgramLocalParametersI4uivNV((target), (index), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParametersI4uivNV, (GLenum target, GLuint index, GLsizei count, const GLuint *params))
#endif // defined(GL_NV_gpu_program4)
#if defined(GL_NV_gpu_program5)
#ifndef glGetProgramSubroutineParameteruivNV
#define glGetProgramSubroutineParameteruivNV(target, index, param) glatter_glGetProgramSubroutineParameteruivNV((target), (index), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramSubroutineParameteruivNV, (GLenum target, GLuint index, GLuint *param))
#ifndef glProgramSubroutineParametersuivNV
#define glProgramSubroutineParametersuivNV(target, count, params) glatter_glProgramSubroutineParametersuivNV((target), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramSubroutineParametersuivNV, (GLenum target, GLsizei count, const GLuint *params))
#endif // defined(GL_NV_gpu_program5)
#if defined(GL_NV_half_float)
#ifndef glColor3hNV
#define glColor3hNV(red, green, blue) glatter_glColor3hNV((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor3hNV, (GLhalfNV red, GLhalfNV green, GLhalfNV blue))
#ifndef glColor3hvNV
#define glColor3hvNV(v) glatter_glColor3hvNV((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor3hvNV, (const GLhalfNV *v))
#ifndef glColor4hNV
#define glColor4hNV(red, green, blue, alpha) glatter_glColor4hNV((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor4hNV, (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha))
#ifndef glColor4hvNV
#define glColor4hvNV(v) glatter_glColor4hvNV((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor4hvNV, (const GLhalfNV *v))
#ifndef glFogCoordhNV
#define glFogCoordhNV(fog) glatter_glFogCoordhNV((fog))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogCoordhNV, (GLhalfNV fog))
#ifndef glFogCoordhvNV
#define glFogCoordhvNV(fog) glatter_glFogCoordhvNV((fog))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogCoordhvNV, (const GLhalfNV *fog))
#ifndef glMultiTexCoord1hNV
#define glMultiTexCoord1hNV(target, s) glatter_glMultiTexCoord1hNV((target), (s))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1hNV, (GLenum target, GLhalfNV s))
#ifndef glMultiTexCoord1hvNV
#define glMultiTexCoord1hvNV(target, v) glatter_glMultiTexCoord1hvNV((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1hvNV, (GLenum target, const GLhalfNV *v))
#ifndef glMultiTexCoord2hNV
#define glMultiTexCoord2hNV(target, s, t) glatter_glMultiTexCoord2hNV((target), (s), (t))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2hNV, (GLenum target, GLhalfNV s, GLhalfNV t))
#ifndef glMultiTexCoord2hvNV
#define glMultiTexCoord2hvNV(target, v) glatter_glMultiTexCoord2hvNV((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2hvNV, (GLenum target, const GLhalfNV *v))
#ifndef glMultiTexCoord3hNV
#define glMultiTexCoord3hNV(target, s, t, r) glatter_glMultiTexCoord3hNV((target), (s), (t), (r))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3hNV, (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r))
#ifndef glMultiTexCoord3hvNV
#define glMultiTexCoord3hvNV(target, v) glatter_glMultiTexCoord3hvNV((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3hvNV, (GLenum target, const GLhalfNV *v))
#ifndef glMultiTexCoord4hNV
#define glMultiTexCoord4hNV(target, s, t, r, q) glatter_glMultiTexCoord4hNV((target), (s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4hNV, (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q))
#ifndef glMultiTexCoord4hvNV
#define glMultiTexCoord4hvNV(target, v) glatter_glMultiTexCoord4hvNV((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4hvNV, (GLenum target, const GLhalfNV *v))
#ifndef glNormal3hNV
#define glNormal3hNV(nx, ny, nz) glatter_glNormal3hNV((nx), (ny), (nz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormal3hNV, (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz))
#ifndef glNormal3hvNV
#define glNormal3hvNV(v) glatter_glNormal3hvNV((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormal3hvNV, (const GLhalfNV *v))
#ifndef glSecondaryColor3hNV
#define glSecondaryColor3hNV(red, green, blue) glatter_glSecondaryColor3hNV((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3hNV, (GLhalfNV red, GLhalfNV green, GLhalfNV blue))
#ifndef glSecondaryColor3hvNV
#define glSecondaryColor3hvNV(v) glatter_glSecondaryColor3hvNV((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3hvNV, (const GLhalfNV *v))
#ifndef glTexCoord1hNV
#define glTexCoord1hNV(s) glatter_glTexCoord1hNV((s))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1hNV, (GLhalfNV s))
#ifndef glTexCoord1hvNV
#define glTexCoord1hvNV(v) glatter_glTexCoord1hvNV((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1hvNV, (const GLhalfNV *v))
#ifndef glTexCoord2hNV
#define glTexCoord2hNV(s, t) glatter_glTexCoord2hNV((s), (t))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2hNV, (GLhalfNV s, GLhalfNV t))
#ifndef glTexCoord2hvNV
#define glTexCoord2hvNV(v) glatter_glTexCoord2hvNV((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2hvNV, (const GLhalfNV *v))
#ifndef glTexCoord3hNV
#define glTexCoord3hNV(s, t, r) glatter_glTexCoord3hNV((s), (t), (r))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3hNV, (GLhalfNV s, GLhalfNV t, GLhalfNV r))
#ifndef glTexCoord3hvNV
#define glTexCoord3hvNV(v) glatter_glTexCoord3hvNV((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3hvNV, (const GLhalfNV *v))
#ifndef glTexCoord4hNV
#define glTexCoord4hNV(s, t, r, q) glatter_glTexCoord4hNV((s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4hNV, (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q))
#ifndef glTexCoord4hvNV
#define glTexCoord4hvNV(v) glatter_glTexCoord4hvNV((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4hvNV, (const GLhalfNV *v))
#ifndef glVertex2hNV
#define glVertex2hNV(x, y) glatter_glVertex2hNV((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex2hNV, (GLhalfNV x, GLhalfNV y))
#ifndef glVertex2hvNV
#define glVertex2hvNV(v) glatter_glVertex2hvNV((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex2hvNV, (const GLhalfNV *v))
#ifndef glVertex3hNV
#define glVertex3hNV(x, y, z) glatter_glVertex3hNV((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex3hNV, (GLhalfNV x, GLhalfNV y, GLhalfNV z))
#ifndef glVertex3hvNV
#define glVertex3hvNV(v) glatter_glVertex3hvNV((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex3hvNV, (const GLhalfNV *v))
#ifndef glVertex4hNV
#define glVertex4hNV(x, y, z, w) glatter_glVertex4hNV((x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex4hNV, (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w))
#ifndef glVertex4hvNV
#define glVertex4hvNV(v) glatter_glVertex4hvNV((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex4hvNV, (const GLhalfNV *v))
#ifndef glVertexAttrib1hNV
#define glVertexAttrib1hNV(index, x) glatter_glVertexAttrib1hNV((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1hNV, (GLuint index, GLhalfNV x))
#ifndef glVertexAttrib1hvNV
#define glVertexAttrib1hvNV(index, v) glatter_glVertexAttrib1hvNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1hvNV, (GLuint index, const GLhalfNV *v))
#ifndef glVertexAttrib2hNV
#define glVertexAttrib2hNV(index, x, y) glatter_glVertexAttrib2hNV((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2hNV, (GLuint index, GLhalfNV x, GLhalfNV y))
#ifndef glVertexAttrib2hvNV
#define glVertexAttrib2hvNV(index, v) glatter_glVertexAttrib2hvNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2hvNV, (GLuint index, const GLhalfNV *v))
#ifndef glVertexAttrib3hNV
#define glVertexAttrib3hNV(index, x, y, z) glatter_glVertexAttrib3hNV((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3hNV, (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z))
#ifndef glVertexAttrib3hvNV
#define glVertexAttrib3hvNV(index, v) glatter_glVertexAttrib3hvNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3hvNV, (GLuint index, const GLhalfNV *v))
#ifndef glVertexAttrib4hNV
#define glVertexAttrib4hNV(index, x, y, z, w) glatter_glVertexAttrib4hNV((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4hNV, (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w))
#ifndef glVertexAttrib4hvNV
#define glVertexAttrib4hvNV(index, v) glatter_glVertexAttrib4hvNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4hvNV, (GLuint index, const GLhalfNV *v))
#ifndef glVertexAttribs1hvNV
#define glVertexAttribs1hvNV(index, n, v) glatter_glVertexAttribs1hvNV((index), (n), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs1hvNV, (GLuint index, GLsizei n, const GLhalfNV *v))
#ifndef glVertexAttribs2hvNV
#define glVertexAttribs2hvNV(index, n, v) glatter_glVertexAttribs2hvNV((index), (n), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs2hvNV, (GLuint index, GLsizei n, const GLhalfNV *v))
#ifndef glVertexAttribs3hvNV
#define glVertexAttribs3hvNV(index, n, v) glatter_glVertexAttribs3hvNV((index), (n), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs3hvNV, (GLuint index, GLsizei n, const GLhalfNV *v))
#ifndef glVertexAttribs4hvNV
#define glVertexAttribs4hvNV(index, n, v) glatter_glVertexAttribs4hvNV((index), (n), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4hvNV, (GLuint index, GLsizei n, const GLhalfNV *v))
#ifndef glVertexWeighthNV
#define glVertexWeighthNV(weight) glatter_glVertexWeighthNV((weight))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexWeighthNV, (GLhalfNV weight))
#ifndef glVertexWeighthvNV
#define glVertexWeighthvNV(weight) glatter_glVertexWeighthvNV((weight))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexWeighthvNV, (const GLhalfNV *weight))
#endif // defined(GL_NV_half_float)
#if defined(GL_NV_internalformat_sample_query)
#ifndef glGetInternalformatSampleivNV
#define glGetInternalformatSampleivNV(target, internalformat, samples, pname, count, params) glatter_glGetInternalformatSampleivNV((target), (internalformat), (samples), (pname), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformatSampleivNV, (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint *params))
#endif // defined(GL_NV_internalformat_sample_query)
#if defined(GL_NV_memory_attachment)
#ifndef glBufferAttachMemoryNV
#define glBufferAttachMemoryNV(target, memory, offset) glatter_glBufferAttachMemoryNV((target), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBufferAttachMemoryNV, (GLenum target, GLuint memory, GLuint64 offset))
#ifndef glGetMemoryObjectDetachedResourcesuivNV
#define glGetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, params) glatter_glGetMemoryObjectDetachedResourcesuivNV((memory), (pname), (first), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMemoryObjectDetachedResourcesuivNV, (GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint *params))
#ifndef glNamedBufferAttachMemoryNV
#define glNamedBufferAttachMemoryNV(buffer, memory, offset) glatter_glNamedBufferAttachMemoryNV((buffer), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferAttachMemoryNV, (GLuint buffer, GLuint memory, GLuint64 offset))
#ifndef glResetMemoryObjectParameterNV
#define glResetMemoryObjectParameterNV(memory, pname) glatter_glResetMemoryObjectParameterNV((memory), (pname))
#endif
GLATTER_UBLOCK(void, APIENTRY, glResetMemoryObjectParameterNV, (GLuint memory, GLenum pname))
#ifndef glTexAttachMemoryNV
#define glTexAttachMemoryNV(target, memory, offset) glatter_glTexAttachMemoryNV((target), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexAttachMemoryNV, (GLenum target, GLuint memory, GLuint64 offset))
#ifndef glTextureAttachMemoryNV
#define glTextureAttachMemoryNV(texture, memory, offset) glatter_glTextureAttachMemoryNV((texture), (memory), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureAttachMemoryNV, (GLuint texture, GLuint memory, GLuint64 offset))
#endif // defined(GL_NV_memory_attachment)
#if defined(GL_NV_memory_object_sparse)
#ifndef glBufferPageCommitmentMemNV
#define glBufferPageCommitmentMemNV(target, offset, size, memory, memOffset, commit) glatter_glBufferPageCommitmentMemNV((target), (offset), (size), (memory), (memOffset), (commit))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBufferPageCommitmentMemNV, (GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit))
#ifndef glNamedBufferPageCommitmentMemNV
#define glNamedBufferPageCommitmentMemNV(buffer, offset, size, memory, memOffset, commit) glatter_glNamedBufferPageCommitmentMemNV((buffer), (offset), (size), (memory), (memOffset), (commit))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferPageCommitmentMemNV, (GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit))
#ifndef glTexPageCommitmentMemNV
#define glTexPageCommitmentMemNV(target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit) glatter_glTexPageCommitmentMemNV((target), (layer), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (memory), (offset), (commit))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexPageCommitmentMemNV, (GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit))
#ifndef glTexturePageCommitmentMemNV
#define glTexturePageCommitmentMemNV(texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit) glatter_glTexturePageCommitmentMemNV((texture), (layer), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (memory), (offset), (commit))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexturePageCommitmentMemNV, (GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit))
#endif // defined(GL_NV_memory_object_sparse)
#if defined(GL_NV_mesh_shader)
#ifndef glDrawMeshTasksIndirectNV
#define glDrawMeshTasksIndirectNV(indirect) glatter_glDrawMeshTasksIndirectNV((indirect))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawMeshTasksIndirectNV, (GLintptr indirect))
#ifndef glDrawMeshTasksNV
#define glDrawMeshTasksNV(first, count) glatter_glDrawMeshTasksNV((first), (count))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawMeshTasksNV, (GLuint first, GLuint count))
#ifndef glMultiDrawMeshTasksIndirectCountNV
#define glMultiDrawMeshTasksIndirectCountNV(indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawMeshTasksIndirectCountNV((indirect), (drawcount), (maxdrawcount), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawMeshTasksIndirectCountNV, (GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#ifndef glMultiDrawMeshTasksIndirectNV
#define glMultiDrawMeshTasksIndirectNV(indirect, drawcount, stride) glatter_glMultiDrawMeshTasksIndirectNV((indirect), (drawcount), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawMeshTasksIndirectNV, (GLintptr indirect, GLsizei drawcount, GLsizei stride))
#endif // defined(GL_NV_mesh_shader)
#if defined(GL_NV_occlusion_query)
#ifndef glBeginOcclusionQueryNV
#define glBeginOcclusionQueryNV(id) glatter_glBeginOcclusionQueryNV((id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginOcclusionQueryNV, (GLuint id))
#ifndef glDeleteOcclusionQueriesNV
#define glDeleteOcclusionQueriesNV(n, ids) glatter_glDeleteOcclusionQueriesNV((n), (ids))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteOcclusionQueriesNV, (GLsizei n, const GLuint *ids))
#ifndef glEndOcclusionQueryNV
#define glEndOcclusionQueryNV() glatter_glEndOcclusionQueryNV()
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndOcclusionQueryNV, (void))
#ifndef glGenOcclusionQueriesNV
#define glGenOcclusionQueriesNV(n, ids) glatter_glGenOcclusionQueriesNV((n), (ids))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenOcclusionQueriesNV, (GLsizei n, GLuint *ids))
#ifndef glGetOcclusionQueryivNV
#define glGetOcclusionQueryivNV(id, pname, params) glatter_glGetOcclusionQueryivNV((id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetOcclusionQueryivNV, (GLuint id, GLenum pname, GLint *params))
#ifndef glGetOcclusionQueryuivNV
#define glGetOcclusionQueryuivNV(id, pname, params) glatter_glGetOcclusionQueryuivNV((id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetOcclusionQueryuivNV, (GLuint id, GLenum pname, GLuint *params))
#ifndef glIsOcclusionQueryNV
#define glIsOcclusionQueryNV(id) glatter_glIsOcclusionQueryNV((id))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsOcclusionQueryNV, (GLuint id))
#endif // defined(GL_NV_occlusion_query)
#if defined(GL_NV_parameter_buffer_object)
#ifndef glProgramBufferParametersIivNV
#define glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersIivNV((target), (bindingIndex), (wordIndex), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramBufferParametersIivNV, (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params))
#ifndef glProgramBufferParametersIuivNV
#define glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersIuivNV((target), (bindingIndex), (wordIndex), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramBufferParametersIuivNV, (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params))
#ifndef glProgramBufferParametersfvNV
#define glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersfvNV((target), (bindingIndex), (wordIndex), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramBufferParametersfvNV, (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params))
#endif // defined(GL_NV_parameter_buffer_object)
#if defined(GL_NV_path_rendering)
#ifndef glCopyPathNV
#define glCopyPathNV(resultPath, srcPath) glatter_glCopyPathNV((resultPath), (srcPath))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyPathNV, (GLuint resultPath, GLuint srcPath))
#ifndef glCoverFillPathInstancedNV
#define glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverFillPathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#ifndef glCoverFillPathNV
#define glCoverFillPathNV(path, coverMode) glatter_glCoverFillPathNV((path), (coverMode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCoverFillPathNV, (GLuint path, GLenum coverMode))
#ifndef glCoverStrokePathInstancedNV
#define glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverStrokePathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#ifndef glCoverStrokePathNV
#define glCoverStrokePathNV(path, coverMode) glatter_glCoverStrokePathNV((path), (coverMode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCoverStrokePathNV, (GLuint path, GLenum coverMode))
#ifndef glDeletePathsNV
#define glDeletePathsNV(path, range) glatter_glDeletePathsNV((path), (range))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeletePathsNV, (GLuint path, GLsizei range))
#ifndef glGenPathsNV
#define glGenPathsNV(range) glatter_glGenPathsNV((range))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glGenPathsNV, (GLsizei range))
#ifndef glGetPathColorGenfvNV
#define glGetPathColorGenfvNV(color, pname, value) glatter_glGetPathColorGenfvNV((color), (pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPathColorGenfvNV, (GLenum color, GLenum pname, GLfloat *value))
#ifndef glGetPathColorGenivNV
#define glGetPathColorGenivNV(color, pname, value) glatter_glGetPathColorGenivNV((color), (pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPathColorGenivNV, (GLenum color, GLenum pname, GLint *value))
#ifndef glGetPathCommandsNV
#define glGetPathCommandsNV(path, commands) glatter_glGetPathCommandsNV((path), (commands))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPathCommandsNV, (GLuint path, GLubyte *commands))
#ifndef glGetPathCoordsNV
#define glGetPathCoordsNV(path, coords) glatter_glGetPathCoordsNV((path), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPathCoordsNV, (GLuint path, GLfloat *coords))
#ifndef glGetPathDashArrayNV
#define glGetPathDashArrayNV(path, dashArray) glatter_glGetPathDashArrayNV((path), (dashArray))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPathDashArrayNV, (GLuint path, GLfloat *dashArray))
#ifndef glGetPathLengthNV
#define glGetPathLengthNV(path, startSegment, numSegments) glatter_glGetPathLengthNV((path), (startSegment), (numSegments))
#endif
GLATTER_UBLOCK(GLfloat, APIENTRY, glGetPathLengthNV, (GLuint path, GLsizei startSegment, GLsizei numSegments))
#ifndef glGetPathMetricRangeNV
#define glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) glatter_glGetPathMetricRangeNV((metricQueryMask), (firstPathName), (numPaths), (stride), (metrics))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPathMetricRangeNV, (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics))
#ifndef glGetPathMetricsNV
#define glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) glatter_glGetPathMetricsNV((metricQueryMask), (numPaths), (pathNameType), (paths), (pathBase), (stride), (metrics))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPathMetricsNV, (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics))
#ifndef glGetPathParameterfvNV
#define glGetPathParameterfvNV(path, pname, value) glatter_glGetPathParameterfvNV((path), (pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPathParameterfvNV, (GLuint path, GLenum pname, GLfloat *value))
#ifndef glGetPathParameterivNV
#define glGetPathParameterivNV(path, pname, value) glatter_glGetPathParameterivNV((path), (pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPathParameterivNV, (GLuint path, GLenum pname, GLint *value))
#ifndef glGetPathSpacingNV
#define glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) glatter_glGetPathSpacingNV((pathListMode), (numPaths), (pathNameType), (paths), (pathBase), (advanceScale), (kerningScale), (transformType), (returnedSpacing))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPathSpacingNV, (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing))
#ifndef glGetPathTexGenfvNV
#define glGetPathTexGenfvNV(texCoordSet, pname, value) glatter_glGetPathTexGenfvNV((texCoordSet), (pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPathTexGenfvNV, (GLenum texCoordSet, GLenum pname, GLfloat *value))
#ifndef glGetPathTexGenivNV
#define glGetPathTexGenivNV(texCoordSet, pname, value) glatter_glGetPathTexGenivNV((texCoordSet), (pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPathTexGenivNV, (GLenum texCoordSet, GLenum pname, GLint *value))
#ifndef glGetProgramResourcefvNV
#define glGetProgramResourcefvNV(program, programInterface, index, propCount, props, count, length, params) glatter_glGetProgramResourcefvNV((program), (programInterface), (index), (propCount), (props), (count), (length), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourcefvNV, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLfloat *params))
#ifndef glInterpolatePathsNV
#define glInterpolatePathsNV(resultPath, pathA, pathB, weight) glatter_glInterpolatePathsNV((resultPath), (pathA), (pathB), (weight))
#endif
GLATTER_UBLOCK(void, APIENTRY, glInterpolatePathsNV, (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight))
#ifndef glIsPathNV
#define glIsPathNV(path) glatter_glIsPathNV((path))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPathNV, (GLuint path))
#ifndef glIsPointInFillPathNV
#define glIsPointInFillPathNV(path, mask, x, y) glatter_glIsPointInFillPathNV((path), (mask), (x), (y))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPointInFillPathNV, (GLuint path, GLuint mask, GLfloat x, GLfloat y))
#ifndef glIsPointInStrokePathNV
#define glIsPointInStrokePathNV(path, x, y) glatter_glIsPointInStrokePathNV((path), (x), (y))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPointInStrokePathNV, (GLuint path, GLfloat x, GLfloat y))
#ifndef glMatrixLoad3x2fNV
#define glMatrixLoad3x2fNV(matrixMode, m) glatter_glMatrixLoad3x2fNV((matrixMode), (m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoad3x2fNV, (GLenum matrixMode, const GLfloat *m))
#ifndef glMatrixLoad3x3fNV
#define glMatrixLoad3x3fNV(matrixMode, m) glatter_glMatrixLoad3x3fNV((matrixMode), (m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoad3x3fNV, (GLenum matrixMode, const GLfloat *m))
#ifndef glMatrixLoadTranspose3x3fNV
#define glMatrixLoadTranspose3x3fNV(matrixMode, m) glatter_glMatrixLoadTranspose3x3fNV((matrixMode), (m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadTranspose3x3fNV, (GLenum matrixMode, const GLfloat *m))
#ifndef glMatrixMult3x2fNV
#define glMatrixMult3x2fNV(matrixMode, m) glatter_glMatrixMult3x2fNV((matrixMode), (m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixMult3x2fNV, (GLenum matrixMode, const GLfloat *m))
#ifndef glMatrixMult3x3fNV
#define glMatrixMult3x3fNV(matrixMode, m) glatter_glMatrixMult3x3fNV((matrixMode), (m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixMult3x3fNV, (GLenum matrixMode, const GLfloat *m))
#ifndef glMatrixMultTranspose3x3fNV
#define glMatrixMultTranspose3x3fNV(matrixMode, m) glatter_glMatrixMultTranspose3x3fNV((matrixMode), (m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultTranspose3x3fNV, (GLenum matrixMode, const GLfloat *m))
#ifndef glPathColorGenNV
#define glPathColorGenNV(color, genMode, colorFormat, coeffs) glatter_glPathColorGenNV((color), (genMode), (colorFormat), (coeffs))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathColorGenNV, (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs))
#ifndef glPathCommandsNV
#define glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) glatter_glPathCommandsNV((path), (numCommands), (commands), (numCoords), (coordType), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathCommandsNV, (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords))
#ifndef glPathCoordsNV
#define glPathCoordsNV(path, numCoords, coordType, coords) glatter_glPathCoordsNV((path), (numCoords), (coordType), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathCoordsNV, (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords))
#ifndef glPathCoverDepthFuncNV
#define glPathCoverDepthFuncNV(func) glatter_glPathCoverDepthFuncNV((func))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathCoverDepthFuncNV, (GLenum func))
#ifndef glPathDashArrayNV
#define glPathDashArrayNV(path, dashCount, dashArray) glatter_glPathDashArrayNV((path), (dashCount), (dashArray))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathDashArrayNV, (GLuint path, GLsizei dashCount, const GLfloat *dashArray))
#ifndef glPathFogGenNV
#define glPathFogGenNV(genMode) glatter_glPathFogGenNV((genMode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathFogGenNV, (GLenum genMode))
#ifndef glPathGlyphIndexArrayNV
#define glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphIndexArrayNV((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale))
#endif
GLATTER_UBLOCK(GLenum, APIENTRY, glPathGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#ifndef glPathGlyphIndexRangeNV
#define glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) glatter_glPathGlyphIndexRangeNV((fontTarget), (fontName), (fontStyle), (pathParameterTemplate), (emScale), (baseAndCount))
#endif
GLATTER_UBLOCK(GLenum, APIENTRY, glPathGlyphIndexRangeNV, (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint *baseAndCount))
#ifndef glPathGlyphRangeNV
#define glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphRangeNV((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyph), (numGlyphs), (handleMissingGlyphs), (pathParameterTemplate), (emScale))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathGlyphRangeNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#ifndef glPathGlyphsNV
#define glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphsNV((firstPathName), (fontTarget), (fontName), (fontStyle), (numGlyphs), (type), (charcodes), (handleMissingGlyphs), (pathParameterTemplate), (emScale))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathGlyphsNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#ifndef glPathMemoryGlyphIndexArrayNV
#define glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathMemoryGlyphIndexArrayNV((firstPathName), (fontTarget), (fontSize), (fontData), (faceIndex), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale))
#endif
GLATTER_UBLOCK(GLenum, APIENTRY, glPathMemoryGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#ifndef glPathParameterfNV
#define glPathParameterfNV(path, pname, value) glatter_glPathParameterfNV((path), (pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathParameterfNV, (GLuint path, GLenum pname, GLfloat value))
#ifndef glPathParameterfvNV
#define glPathParameterfvNV(path, pname, value) glatter_glPathParameterfvNV((path), (pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathParameterfvNV, (GLuint path, GLenum pname, const GLfloat *value))
#ifndef glPathParameteriNV
#define glPathParameteriNV(path, pname, value) glatter_glPathParameteriNV((path), (pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathParameteriNV, (GLuint path, GLenum pname, GLint value))
#ifndef glPathParameterivNV
#define glPathParameterivNV(path, pname, value) glatter_glPathParameterivNV((path), (pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathParameterivNV, (GLuint path, GLenum pname, const GLint *value))
#ifndef glPathStencilDepthOffsetNV
#define glPathStencilDepthOffsetNV(factor, units) glatter_glPathStencilDepthOffsetNV((factor), (units))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathStencilDepthOffsetNV, (GLfloat factor, GLfloat units))
#ifndef glPathStencilFuncNV
#define glPathStencilFuncNV(func, ref, mask) glatter_glPathStencilFuncNV((func), (ref), (mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathStencilFuncNV, (GLenum func, GLint ref, GLuint mask))
#ifndef glPathStringNV
#define glPathStringNV(path, format, length, pathString) glatter_glPathStringNV((path), (format), (length), (pathString))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathStringNV, (GLuint path, GLenum format, GLsizei length, const void *pathString))
#ifndef glPathSubCommandsNV
#define glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) glatter_glPathSubCommandsNV((path), (commandStart), (commandsToDelete), (numCommands), (commands), (numCoords), (coordType), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathSubCommandsNV, (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords))
#ifndef glPathSubCoordsNV
#define glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) glatter_glPathSubCoordsNV((path), (coordStart), (numCoords), (coordType), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathSubCoordsNV, (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords))
#ifndef glPathTexGenNV
#define glPathTexGenNV(texCoordSet, genMode, components, coeffs) glatter_glPathTexGenNV((texCoordSet), (genMode), (components), (coeffs))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPathTexGenNV, (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs))
#ifndef glPointAlongPathNV
#define glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) glatter_glPointAlongPathNV((path), (startSegment), (numSegments), (distance), (x), (y), (tangentX), (tangentY))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glPointAlongPathNV, (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY))
#ifndef glProgramPathFragmentInputGenNV
#define glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) glatter_glProgramPathFragmentInputGenNV((program), (location), (genMode), (components), (coeffs))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramPathFragmentInputGenNV, (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs))
#ifndef glStencilFillPathInstancedNV
#define glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) glatter_glStencilFillPathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (transformType), (transformValues))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues))
#ifndef glStencilFillPathNV
#define glStencilFillPathNV(path, fillMode, mask) glatter_glStencilFillPathNV((path), (fillMode), (mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilFillPathNV, (GLuint path, GLenum fillMode, GLuint mask))
#ifndef glStencilStrokePathInstancedNV
#define glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) glatter_glStencilStrokePathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (transformType), (transformValues))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues))
#ifndef glStencilStrokePathNV
#define glStencilStrokePathNV(path, reference, mask) glatter_glStencilStrokePathNV((path), (reference), (mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilStrokePathNV, (GLuint path, GLint reference, GLuint mask))
#ifndef glStencilThenCoverFillPathInstancedNV
#define glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverFillPathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (coverMode), (transformType), (transformValues))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#ifndef glStencilThenCoverFillPathNV
#define glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode) glatter_glStencilThenCoverFillPathNV((path), (fillMode), (mask), (coverMode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverFillPathNV, (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode))
#ifndef glStencilThenCoverStrokePathInstancedNV
#define glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverStrokePathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (coverMode), (transformType), (transformValues))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#ifndef glStencilThenCoverStrokePathNV
#define glStencilThenCoverStrokePathNV(path, reference, mask, coverMode) glatter_glStencilThenCoverStrokePathNV((path), (reference), (mask), (coverMode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverStrokePathNV, (GLuint path, GLint reference, GLuint mask, GLenum coverMode))
#ifndef glTransformPathNV
#define glTransformPathNV(resultPath, srcPath, transformType, transformValues) glatter_glTransformPathNV((resultPath), (srcPath), (transformType), (transformValues))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTransformPathNV, (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues))
#ifndef glWeightPathsNV
#define glWeightPathsNV(resultPath, numPaths, paths, weights) glatter_glWeightPathsNV((resultPath), (numPaths), (paths), (weights))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWeightPathsNV, (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights))
#endif // defined(GL_NV_path_rendering)
#if defined(GL_NV_pixel_data_range)
#ifndef glFlushPixelDataRangeNV
#define glFlushPixelDataRangeNV(target) glatter_glFlushPixelDataRangeNV((target))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFlushPixelDataRangeNV, (GLenum target))
#ifndef glPixelDataRangeNV
#define glPixelDataRangeNV(target, length, pointer) glatter_glPixelDataRangeNV((target), (length), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPixelDataRangeNV, (GLenum target, GLsizei length, const void *pointer))
#endif // defined(GL_NV_pixel_data_range)
#if defined(GL_NV_point_sprite)
#ifndef glPointParameteriNV
#define glPointParameteriNV(pname, param) glatter_glPointParameteriNV((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPointParameteriNV, (GLenum pname, GLint param))
#ifndef glPointParameterivNV
#define glPointParameterivNV(pname, params) glatter_glPointParameterivNV((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPointParameterivNV, (GLenum pname, const GLint *params))
#endif // defined(GL_NV_point_sprite)
#if defined(GL_NV_present_video)
#ifndef glGetVideoi64vNV
#define glGetVideoi64vNV(video_slot, pname, params) glatter_glGetVideoi64vNV((video_slot), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVideoi64vNV, (GLuint video_slot, GLenum pname, GLint64EXT *params))
#ifndef glGetVideoivNV
#define glGetVideoivNV(video_slot, pname, params) glatter_glGetVideoivNV((video_slot), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVideoivNV, (GLuint video_slot, GLenum pname, GLint *params))
#ifndef glGetVideoui64vNV
#define glGetVideoui64vNV(video_slot, pname, params) glatter_glGetVideoui64vNV((video_slot), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVideoui64vNV, (GLuint video_slot, GLenum pname, GLuint64EXT *params))
#ifndef glGetVideouivNV
#define glGetVideouivNV(video_slot, pname, params) glatter_glGetVideouivNV((video_slot), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVideouivNV, (GLuint video_slot, GLenum pname, GLuint *params))
#ifndef glPresentFrameDualFillNV
#define glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3) glatter_glPresentFrameDualFillNV((video_slot), (minPresentTime), (beginPresentTimeId), (presentDurationId), (type), (target0), (fill0), (target1), (fill1), (target2), (fill2), (target3), (fill3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPresentFrameDualFillNV, (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3))
#ifndef glPresentFrameKeyedNV
#define glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1) glatter_glPresentFrameKeyedNV((video_slot), (minPresentTime), (beginPresentTimeId), (presentDurationId), (type), (target0), (fill0), (key0), (target1), (fill1), (key1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPresentFrameKeyedNV, (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1))
#endif // defined(GL_NV_present_video)
#if defined(GL_NV_primitive_restart)
#ifndef glPrimitiveRestartIndexNV
#define glPrimitiveRestartIndexNV(index) glatter_glPrimitiveRestartIndexNV((index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveRestartIndexNV, (GLuint index))
#ifndef glPrimitiveRestartNV
#define glPrimitiveRestartNV() glatter_glPrimitiveRestartNV()
#endif
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveRestartNV, (void))
#endif // defined(GL_NV_primitive_restart)
#if defined(GL_NV_query_resource)
#ifndef glQueryResourceNV
#define glQueryResourceNV(queryType, tagId, count, buffer) glatter_glQueryResourceNV((queryType), (tagId), (count), (buffer))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glQueryResourceNV, (GLenum queryType, GLint tagId, GLuint count, GLint *buffer))
#endif // defined(GL_NV_query_resource)
#if defined(GL_NV_query_resource_tag)
#ifndef glDeleteQueryResourceTagNV
#define glDeleteQueryResourceTagNV(n, tagIds) glatter_glDeleteQueryResourceTagNV((n), (tagIds))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteQueryResourceTagNV, (GLsizei n, const GLint *tagIds))
#ifndef glGenQueryResourceTagNV
#define glGenQueryResourceTagNV(n, tagIds) glatter_glGenQueryResourceTagNV((n), (tagIds))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenQueryResourceTagNV, (GLsizei n, GLint *tagIds))
#ifndef glQueryResourceTagNV
#define glQueryResourceTagNV(tagId, tagString) glatter_glQueryResourceTagNV((tagId), (tagString))
#endif
GLATTER_UBLOCK(void, APIENTRY, glQueryResourceTagNV, (GLint tagId, const GLchar *tagString))
#endif // defined(GL_NV_query_resource_tag)
#if defined(GL_NV_register_combiners)
#ifndef glCombinerInputNV
#define glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage) glatter_glCombinerInputNV((stage), (portion), (variable), (input), (mapping), (componentUsage))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCombinerInputNV, (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage))
#ifndef glCombinerOutputNV
#define glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) glatter_glCombinerOutputNV((stage), (portion), (abOutput), (cdOutput), (sumOutput), (scale), (bias), (abDotProduct), (cdDotProduct), (muxSum))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCombinerOutputNV, (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum))
#ifndef glCombinerParameterfNV
#define glCombinerParameterfNV(pname, param) glatter_glCombinerParameterfNV((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCombinerParameterfNV, (GLenum pname, GLfloat param))
#ifndef glCombinerParameterfvNV
#define glCombinerParameterfvNV(pname, params) glatter_glCombinerParameterfvNV((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCombinerParameterfvNV, (GLenum pname, const GLfloat *params))
#ifndef glCombinerParameteriNV
#define glCombinerParameteriNV(pname, param) glatter_glCombinerParameteriNV((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCombinerParameteriNV, (GLenum pname, GLint param))
#ifndef glCombinerParameterivNV
#define glCombinerParameterivNV(pname, params) glatter_glCombinerParameterivNV((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCombinerParameterivNV, (GLenum pname, const GLint *params))
#ifndef glFinalCombinerInputNV
#define glFinalCombinerInputNV(variable, input, mapping, componentUsage) glatter_glFinalCombinerInputNV((variable), (input), (mapping), (componentUsage))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFinalCombinerInputNV, (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage))
#ifndef glGetCombinerInputParameterfvNV
#define glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params) glatter_glGetCombinerInputParameterfvNV((stage), (portion), (variable), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerInputParameterfvNV, (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params))
#ifndef glGetCombinerInputParameterivNV
#define glGetCombinerInputParameterivNV(stage, portion, variable, pname, params) glatter_glGetCombinerInputParameterivNV((stage), (portion), (variable), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerInputParameterivNV, (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params))
#ifndef glGetCombinerOutputParameterfvNV
#define glGetCombinerOutputParameterfvNV(stage, portion, pname, params) glatter_glGetCombinerOutputParameterfvNV((stage), (portion), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerOutputParameterfvNV, (GLenum stage, GLenum portion, GLenum pname, GLfloat *params))
#ifndef glGetCombinerOutputParameterivNV
#define glGetCombinerOutputParameterivNV(stage, portion, pname, params) glatter_glGetCombinerOutputParameterivNV((stage), (portion), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerOutputParameterivNV, (GLenum stage, GLenum portion, GLenum pname, GLint *params))
#ifndef glGetFinalCombinerInputParameterfvNV
#define glGetFinalCombinerInputParameterfvNV(variable, pname, params) glatter_glGetFinalCombinerInputParameterfvNV((variable), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFinalCombinerInputParameterfvNV, (GLenum variable, GLenum pname, GLfloat *params))
#ifndef glGetFinalCombinerInputParameterivNV
#define glGetFinalCombinerInputParameterivNV(variable, pname, params) glatter_glGetFinalCombinerInputParameterivNV((variable), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFinalCombinerInputParameterivNV, (GLenum variable, GLenum pname, GLint *params))
#endif // defined(GL_NV_register_combiners)
#if defined(GL_NV_register_combiners2)
#ifndef glCombinerStageParameterfvNV
#define glCombinerStageParameterfvNV(stage, pname, params) glatter_glCombinerStageParameterfvNV((stage), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCombinerStageParameterfvNV, (GLenum stage, GLenum pname, const GLfloat *params))
#ifndef glGetCombinerStageParameterfvNV
#define glGetCombinerStageParameterfvNV(stage, pname, params) glatter_glGetCombinerStageParameterfvNV((stage), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerStageParameterfvNV, (GLenum stage, GLenum pname, GLfloat *params))
#endif // defined(GL_NV_register_combiners2)
#if defined(GL_NV_sample_locations)
#ifndef glFramebufferSampleLocationsfvNV
#define glFramebufferSampleLocationsfvNV(target, start, count, v) glatter_glFramebufferSampleLocationsfvNV((target), (start), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferSampleLocationsfvNV, (GLenum target, GLuint start, GLsizei count, const GLfloat *v))
#ifndef glNamedFramebufferSampleLocationsfvNV
#define glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvNV((framebuffer), (start), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferSampleLocationsfvNV, (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v))
#ifndef glResolveDepthValuesNV
#define glResolveDepthValuesNV() glatter_glResolveDepthValuesNV()
#endif
GLATTER_UBLOCK(void, APIENTRY, glResolveDepthValuesNV, (void))
#endif // defined(GL_NV_sample_locations)
#if defined(GL_NV_scissor_exclusive)
#ifndef glScissorExclusiveArrayvNV
#define glScissorExclusiveArrayvNV(first, count, v) glatter_glScissorExclusiveArrayvNV((first), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glScissorExclusiveArrayvNV, (GLuint first, GLsizei count, const GLint *v))
#ifndef glScissorExclusiveNV
#define glScissorExclusiveNV(x, y, width, height) glatter_glScissorExclusiveNV((x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glScissorExclusiveNV, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_NV_scissor_exclusive)
#if defined(GL_NV_shader_buffer_load)
#ifndef glGetBufferParameterui64vNV
#define glGetBufferParameterui64vNV(target, pname, params) glatter_glGetBufferParameterui64vNV((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameterui64vNV, (GLenum target, GLenum pname, GLuint64EXT *params))
#ifndef glGetIntegerui64vNV
#define glGetIntegerui64vNV(value, result) glatter_glGetIntegerui64vNV((value), (result))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerui64vNV, (GLenum value, GLuint64EXT *result))
#ifndef glGetNamedBufferParameterui64vNV
#define glGetNamedBufferParameterui64vNV(buffer, pname, params) glatter_glGetNamedBufferParameterui64vNV((buffer), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameterui64vNV, (GLuint buffer, GLenum pname, GLuint64EXT *params))
#ifndef glIsBufferResidentNV
#define glIsBufferResidentNV(target) glatter_glIsBufferResidentNV((target))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsBufferResidentNV, (GLenum target))
#ifndef glIsNamedBufferResidentNV
#define glIsNamedBufferResidentNV(buffer) glatter_glIsNamedBufferResidentNV((buffer))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsNamedBufferResidentNV, (GLuint buffer))
#ifndef glMakeBufferNonResidentNV
#define glMakeBufferNonResidentNV(target) glatter_glMakeBufferNonResidentNV((target))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMakeBufferNonResidentNV, (GLenum target))
#ifndef glMakeBufferResidentNV
#define glMakeBufferResidentNV(target, access) glatter_glMakeBufferResidentNV((target), (access))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMakeBufferResidentNV, (GLenum target, GLenum access))
#ifndef glMakeNamedBufferNonResidentNV
#define glMakeNamedBufferNonResidentNV(buffer) glatter_glMakeNamedBufferNonResidentNV((buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMakeNamedBufferNonResidentNV, (GLuint buffer))
#ifndef glMakeNamedBufferResidentNV
#define glMakeNamedBufferResidentNV(buffer, access) glatter_glMakeNamedBufferResidentNV((buffer), (access))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMakeNamedBufferResidentNV, (GLuint buffer, GLenum access))
#ifndef glProgramUniformui64NV
#define glProgramUniformui64NV(program, location, value) glatter_glProgramUniformui64NV((program), (location), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformui64NV, (GLuint program, GLint location, GLuint64EXT value))
#ifndef glProgramUniformui64vNV
#define glProgramUniformui64vNV(program, location, count, value) glatter_glProgramUniformui64vNV((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#ifndef glUniformui64NV
#define glUniformui64NV(location, value) glatter_glUniformui64NV((location), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformui64NV, (GLint location, GLuint64EXT value))
#ifndef glUniformui64vNV
#define glUniformui64vNV(location, count, value) glatter_glUniformui64vNV((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#endif // defined(GL_NV_shader_buffer_load)
#if defined(GL_NV_shading_rate_image)
#ifndef glBindShadingRateImageNV
#define glBindShadingRateImageNV(texture) glatter_glBindShadingRateImageNV((texture))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindShadingRateImageNV, (GLuint texture))
#ifndef glGetShadingRateImagePaletteNV
#define glGetShadingRateImagePaletteNV(viewport, entry, rate) glatter_glGetShadingRateImagePaletteNV((viewport), (entry), (rate))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetShadingRateImagePaletteNV, (GLuint viewport, GLuint entry, GLenum *rate))
#ifndef glGetShadingRateSampleLocationivNV
#define glGetShadingRateSampleLocationivNV(rate, samples, index, location) glatter_glGetShadingRateSampleLocationivNV((rate), (samples), (index), (location))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetShadingRateSampleLocationivNV, (GLenum rate, GLuint samples, GLuint index, GLint *location))
#ifndef glShadingRateImageBarrierNV
#define glShadingRateImageBarrierNV(synchronize) glatter_glShadingRateImageBarrierNV((synchronize))
#endif
GLATTER_UBLOCK(void, APIENTRY, glShadingRateImageBarrierNV, (GLboolean synchronize))
#ifndef glShadingRateImagePaletteNV
#define glShadingRateImagePaletteNV(viewport, first, count, rates) glatter_glShadingRateImagePaletteNV((viewport), (first), (count), (rates))
#endif
GLATTER_UBLOCK(void, APIENTRY, glShadingRateImagePaletteNV, (GLuint viewport, GLuint first, GLsizei count, const GLenum *rates))
#ifndef glShadingRateSampleOrderCustomNV
#define glShadingRateSampleOrderCustomNV(rate, samples, locations) glatter_glShadingRateSampleOrderCustomNV((rate), (samples), (locations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glShadingRateSampleOrderCustomNV, (GLenum rate, GLuint samples, const GLint *locations))
#ifndef glShadingRateSampleOrderNV
#define glShadingRateSampleOrderNV(order) glatter_glShadingRateSampleOrderNV((order))
#endif
GLATTER_UBLOCK(void, APIENTRY, glShadingRateSampleOrderNV, (GLenum order))
#endif // defined(GL_NV_shading_rate_image)
#if defined(GL_NV_texture_barrier)
#ifndef glTextureBarrierNV
#define glTextureBarrierNV() glatter_glTextureBarrierNV()
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureBarrierNV, (void))
#endif // defined(GL_NV_texture_barrier)
#if defined(GL_NV_texture_multisample)
#ifndef glTexImage2DMultisampleCoverageNV
#define glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) glatter_glTexImage2DMultisampleCoverageNV((target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (fixedSampleLocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexImage2DMultisampleCoverageNV, (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations))
#ifndef glTexImage3DMultisampleCoverageNV
#define glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTexImage3DMultisampleCoverageNV((target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (depth), (fixedSampleLocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexImage3DMultisampleCoverageNV, (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations))
#ifndef glTextureImage2DMultisampleCoverageNV
#define glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) glatter_glTextureImage2DMultisampleCoverageNV((texture), (target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (fixedSampleLocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureImage2DMultisampleCoverageNV, (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations))
#ifndef glTextureImage2DMultisampleNV
#define glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations) glatter_glTextureImage2DMultisampleNV((texture), (target), (samples), (internalFormat), (width), (height), (fixedSampleLocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureImage2DMultisampleNV, (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations))
#ifndef glTextureImage3DMultisampleCoverageNV
#define glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTextureImage3DMultisampleCoverageNV((texture), (target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (depth), (fixedSampleLocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureImage3DMultisampleCoverageNV, (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations))
#ifndef glTextureImage3DMultisampleNV
#define glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTextureImage3DMultisampleNV((texture), (target), (samples), (internalFormat), (width), (height), (depth), (fixedSampleLocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureImage3DMultisampleNV, (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations))
#endif // defined(GL_NV_texture_multisample)
#if defined(GL_NV_timeline_semaphore)
#ifndef glCreateSemaphoresNV
#define glCreateSemaphoresNV(n, semaphores) glatter_glCreateSemaphoresNV((n), (semaphores))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCreateSemaphoresNV, (GLsizei n, GLuint *semaphores))
#ifndef glGetSemaphoreParameterivNV
#define glGetSemaphoreParameterivNV(semaphore, pname, params) glatter_glGetSemaphoreParameterivNV((semaphore), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetSemaphoreParameterivNV, (GLuint semaphore, GLenum pname, GLint *params))
#ifndef glSemaphoreParameterivNV
#define glSemaphoreParameterivNV(semaphore, pname, params) glatter_glSemaphoreParameterivNV((semaphore), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSemaphoreParameterivNV, (GLuint semaphore, GLenum pname, const GLint *params))
#endif // defined(GL_NV_timeline_semaphore)
#if defined(GL_NV_transform_feedback)
#ifndef glActiveVaryingNV
#define glActiveVaryingNV(program, name) glatter_glActiveVaryingNV((program), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glActiveVaryingNV, (GLuint program, const GLchar *name))
#ifndef glBeginTransformFeedbackNV
#define glBeginTransformFeedbackNV(primitiveMode) glatter_glBeginTransformFeedbackNV((primitiveMode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginTransformFeedbackNV, (GLenum primitiveMode))
#ifndef glBindBufferBaseNV
#define glBindBufferBaseNV(target, index, buffer) glatter_glBindBufferBaseNV((target), (index), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindBufferBaseNV, (GLenum target, GLuint index, GLuint buffer))
#ifndef glBindBufferOffsetNV
#define glBindBufferOffsetNV(target, index, buffer, offset) glatter_glBindBufferOffsetNV((target), (index), (buffer), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindBufferOffsetNV, (GLenum target, GLuint index, GLuint buffer, GLintptr offset))
#ifndef glBindBufferRangeNV
#define glBindBufferRangeNV(target, index, buffer, offset, size) glatter_glBindBufferRangeNV((target), (index), (buffer), (offset), (size))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindBufferRangeNV, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#ifndef glEndTransformFeedbackNV
#define glEndTransformFeedbackNV() glatter_glEndTransformFeedbackNV()
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndTransformFeedbackNV, (void))
#ifndef glGetActiveVaryingNV
#define glGetActiveVaryingNV(program, index, bufSize, length, size, type, name) glatter_glGetActiveVaryingNV((program), (index), (bufSize), (length), (size), (type), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetActiveVaryingNV, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#ifndef glGetTransformFeedbackVaryingNV
#define glGetTransformFeedbackVaryingNV(program, index, location) glatter_glGetTransformFeedbackVaryingNV((program), (index), (location))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackVaryingNV, (GLuint program, GLuint index, GLint *location))
#ifndef glGetVaryingLocationNV
#define glGetVaryingLocationNV(program, name) glatter_glGetVaryingLocationNV((program), (name))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glGetVaryingLocationNV, (GLuint program, const GLchar *name))
#ifndef glTransformFeedbackAttribsNV
#define glTransformFeedbackAttribsNV(count, attribs, bufferMode) glatter_glTransformFeedbackAttribsNV((count), (attribs), (bufferMode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackAttribsNV, (GLsizei count, const GLint *attribs, GLenum bufferMode))
#ifndef glTransformFeedbackStreamAttribsNV
#define glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode) glatter_glTransformFeedbackStreamAttribsNV((count), (attribs), (nbuffers), (bufstreams), (bufferMode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackStreamAttribsNV, (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode))
#ifndef glTransformFeedbackVaryingsNV
#define glTransformFeedbackVaryingsNV(program, count, locations, bufferMode) glatter_glTransformFeedbackVaryingsNV((program), (count), (locations), (bufferMode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackVaryingsNV, (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode))
#endif // defined(GL_NV_transform_feedback)
#if defined(GL_NV_transform_feedback2)
#ifndef glBindTransformFeedbackNV
#define glBindTransformFeedbackNV(target, id) glatter_glBindTransformFeedbackNV((target), (id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindTransformFeedbackNV, (GLenum target, GLuint id))
#ifndef glDeleteTransformFeedbacksNV
#define glDeleteTransformFeedbacksNV(n, ids) glatter_glDeleteTransformFeedbacksNV((n), (ids))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteTransformFeedbacksNV, (GLsizei n, const GLuint *ids))
#ifndef glDrawTransformFeedbackNV
#define glDrawTransformFeedbackNV(mode, id) glatter_glDrawTransformFeedbackNV((mode), (id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackNV, (GLenum mode, GLuint id))
#ifndef glGenTransformFeedbacksNV
#define glGenTransformFeedbacksNV(n, ids) glatter_glGenTransformFeedbacksNV((n), (ids))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenTransformFeedbacksNV, (GLsizei n, GLuint *ids))
#ifndef glIsTransformFeedbackNV
#define glIsTransformFeedbackNV(id) glatter_glIsTransformFeedbackNV((id))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTransformFeedbackNV, (GLuint id))
#ifndef glPauseTransformFeedbackNV
#define glPauseTransformFeedbackNV() glatter_glPauseTransformFeedbackNV()
#endif
GLATTER_UBLOCK(void, APIENTRY, glPauseTransformFeedbackNV, (void))
#ifndef glResumeTransformFeedbackNV
#define glResumeTransformFeedbackNV() glatter_glResumeTransformFeedbackNV()
#endif
GLATTER_UBLOCK(void, APIENTRY, glResumeTransformFeedbackNV, (void))
#endif // defined(GL_NV_transform_feedback2)
#if defined(GL_NV_vdpau_interop)
#ifndef glVDPAUFiniNV
#define glVDPAUFiniNV() glatter_glVDPAUFiniNV()
#endif
GLATTER_UBLOCK(void, APIENTRY, glVDPAUFiniNV, (void))
#ifndef glVDPAUGetSurfaceivNV
#define glVDPAUGetSurfaceivNV(surface, pname, count, length, values) glatter_glVDPAUGetSurfaceivNV((surface), (pname), (count), (length), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVDPAUGetSurfaceivNV, (GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei *length, GLint *values))
#ifndef glVDPAUInitNV
#define glVDPAUInitNV(vdpDevice, getProcAddress) glatter_glVDPAUInitNV((vdpDevice), (getProcAddress))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVDPAUInitNV, (const void *vdpDevice, const void *getProcAddress))
#ifndef glVDPAUIsSurfaceNV
#define glVDPAUIsSurfaceNV(surface) glatter_glVDPAUIsSurfaceNV((surface))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glVDPAUIsSurfaceNV, (GLvdpauSurfaceNV surface))
#ifndef glVDPAUMapSurfacesNV
#define glVDPAUMapSurfacesNV(numSurfaces, surfaces) glatter_glVDPAUMapSurfacesNV((numSurfaces), (surfaces))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVDPAUMapSurfacesNV, (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces))
#ifndef glVDPAURegisterOutputSurfaceNV
#define glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames) glatter_glVDPAURegisterOutputSurfaceNV((vdpSurface), (target), (numTextureNames), (textureNames))
#endif
GLATTER_UBLOCK(GLvdpauSurfaceNV, APIENTRY, glVDPAURegisterOutputSurfaceNV, (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames))
#ifndef glVDPAURegisterVideoSurfaceNV
#define glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames) glatter_glVDPAURegisterVideoSurfaceNV((vdpSurface), (target), (numTextureNames), (textureNames))
#endif
GLATTER_UBLOCK(GLvdpauSurfaceNV, APIENTRY, glVDPAURegisterVideoSurfaceNV, (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames))
#ifndef glVDPAUSurfaceAccessNV
#define glVDPAUSurfaceAccessNV(surface, access) glatter_glVDPAUSurfaceAccessNV((surface), (access))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVDPAUSurfaceAccessNV, (GLvdpauSurfaceNV surface, GLenum access))
#ifndef glVDPAUUnmapSurfacesNV
#define glVDPAUUnmapSurfacesNV(numSurface, surfaces) glatter_glVDPAUUnmapSurfacesNV((numSurface), (surfaces))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVDPAUUnmapSurfacesNV, (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces))
#ifndef glVDPAUUnregisterSurfaceNV
#define glVDPAUUnregisterSurfaceNV(surface) glatter_glVDPAUUnregisterSurfaceNV((surface))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVDPAUUnregisterSurfaceNV, (GLvdpauSurfaceNV surface))
#endif // defined(GL_NV_vdpau_interop)
#if defined(GL_NV_vdpau_interop2)
#ifndef glVDPAURegisterVideoSurfaceWithPictureStructureNV
#define glVDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface, target, numTextureNames, textureNames, isFrameStructure) glatter_glVDPAURegisterVideoSurfaceWithPictureStructureNV((vdpSurface), (target), (numTextureNames), (textureNames), (isFrameStructure))
#endif
GLATTER_UBLOCK(GLvdpauSurfaceNV, APIENTRY, glVDPAURegisterVideoSurfaceWithPictureStructureNV, (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames, GLboolean isFrameStructure))
#endif // defined(GL_NV_vdpau_interop2)
#if defined(GL_NV_vertex_array_range)
#ifndef glFlushVertexArrayRangeNV
#define glFlushVertexArrayRangeNV() glatter_glFlushVertexArrayRangeNV()
#endif
GLATTER_UBLOCK(void, APIENTRY, glFlushVertexArrayRangeNV, (void))
#ifndef glVertexArrayRangeNV
#define glVertexArrayRangeNV(length, pointer) glatter_glVertexArrayRangeNV((length), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayRangeNV, (GLsizei length, const void *pointer))
#endif // defined(GL_NV_vertex_array_range)
#if defined(GL_NV_vertex_attrib_integer_64bit)
#ifndef glGetVertexAttribLi64vNV
#define glGetVertexAttribLi64vNV(index, pname, params) glatter_glGetVertexAttribLi64vNV((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLi64vNV, (GLuint index, GLenum pname, GLint64EXT *params))
#ifndef glGetVertexAttribLui64vNV
#define glGetVertexAttribLui64vNV(index, pname, params) glatter_glGetVertexAttribLui64vNV((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLui64vNV, (GLuint index, GLenum pname, GLuint64EXT *params))
#ifndef glVertexAttribL1i64NV
#define glVertexAttribL1i64NV(index, x) glatter_glVertexAttribL1i64NV((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1i64NV, (GLuint index, GLint64EXT x))
#ifndef glVertexAttribL1i64vNV
#define glVertexAttribL1i64vNV(index, v) glatter_glVertexAttribL1i64vNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1i64vNV, (GLuint index, const GLint64EXT *v))
#ifndef glVertexAttribL1ui64NV
#define glVertexAttribL1ui64NV(index, x) glatter_glVertexAttribL1ui64NV((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64NV, (GLuint index, GLuint64EXT x))
#ifndef glVertexAttribL1ui64vNV
#define glVertexAttribL1ui64vNV(index, v) glatter_glVertexAttribL1ui64vNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64vNV, (GLuint index, const GLuint64EXT *v))
#ifndef glVertexAttribL2i64NV
#define glVertexAttribL2i64NV(index, x, y) glatter_glVertexAttribL2i64NV((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2i64NV, (GLuint index, GLint64EXT x, GLint64EXT y))
#ifndef glVertexAttribL2i64vNV
#define glVertexAttribL2i64vNV(index, v) glatter_glVertexAttribL2i64vNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2i64vNV, (GLuint index, const GLint64EXT *v))
#ifndef glVertexAttribL2ui64NV
#define glVertexAttribL2ui64NV(index, x, y) glatter_glVertexAttribL2ui64NV((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y))
#ifndef glVertexAttribL2ui64vNV
#define glVertexAttribL2ui64vNV(index, v) glatter_glVertexAttribL2ui64vNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2ui64vNV, (GLuint index, const GLuint64EXT *v))
#ifndef glVertexAttribL3i64NV
#define glVertexAttribL3i64NV(index, x, y, z) glatter_glVertexAttribL3i64NV((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3i64NV, (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#ifndef glVertexAttribL3i64vNV
#define glVertexAttribL3i64vNV(index, v) glatter_glVertexAttribL3i64vNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3i64vNV, (GLuint index, const GLint64EXT *v))
#ifndef glVertexAttribL3ui64NV
#define glVertexAttribL3ui64NV(index, x, y, z) glatter_glVertexAttribL3ui64NV((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#ifndef glVertexAttribL3ui64vNV
#define glVertexAttribL3ui64vNV(index, v) glatter_glVertexAttribL3ui64vNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3ui64vNV, (GLuint index, const GLuint64EXT *v))
#ifndef glVertexAttribL4i64NV
#define glVertexAttribL4i64NV(index, x, y, z, w) glatter_glVertexAttribL4i64NV((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4i64NV, (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#ifndef glVertexAttribL4i64vNV
#define glVertexAttribL4i64vNV(index, v) glatter_glVertexAttribL4i64vNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4i64vNV, (GLuint index, const GLint64EXT *v))
#ifndef glVertexAttribL4ui64NV
#define glVertexAttribL4ui64NV(index, x, y, z, w) glatter_glVertexAttribL4ui64NV((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#ifndef glVertexAttribL4ui64vNV
#define glVertexAttribL4ui64vNV(index, v) glatter_glVertexAttribL4ui64vNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4ui64vNV, (GLuint index, const GLuint64EXT *v))
#ifndef glVertexAttribLFormatNV
#define glVertexAttribLFormatNV(index, size, type, stride) glatter_glVertexAttribLFormatNV((index), (size), (type), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLFormatNV, (GLuint index, GLint size, GLenum type, GLsizei stride))
#endif // defined(GL_NV_vertex_attrib_integer_64bit)
#if defined(GL_NV_vertex_buffer_unified_memory)
#ifndef glBufferAddressRangeNV
#define glBufferAddressRangeNV(pname, index, address, length) glatter_glBufferAddressRangeNV((pname), (index), (address), (length))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBufferAddressRangeNV, (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length))
#ifndef glColorFormatNV
#define glColorFormatNV(size, type, stride) glatter_glColorFormatNV((size), (type), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorFormatNV, (GLint size, GLenum type, GLsizei stride))
#ifndef glEdgeFlagFormatNV
#define glEdgeFlagFormatNV(stride) glatter_glEdgeFlagFormatNV((stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlagFormatNV, (GLsizei stride))
#ifndef glFogCoordFormatNV
#define glFogCoordFormatNV(type, stride) glatter_glFogCoordFormatNV((type), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogCoordFormatNV, (GLenum type, GLsizei stride))
#ifndef glGetIntegerui64i_vNV
#define glGetIntegerui64i_vNV(value, index, result) glatter_glGetIntegerui64i_vNV((value), (index), (result))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerui64i_vNV, (GLenum value, GLuint index, GLuint64EXT *result))
#ifndef glIndexFormatNV
#define glIndexFormatNV(type, stride) glatter_glIndexFormatNV((type), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glIndexFormatNV, (GLenum type, GLsizei stride))
#ifndef glNormalFormatNV
#define glNormalFormatNV(type, stride) glatter_glNormalFormatNV((type), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalFormatNV, (GLenum type, GLsizei stride))
#ifndef glSecondaryColorFormatNV
#define glSecondaryColorFormatNV(size, type, stride) glatter_glSecondaryColorFormatNV((size), (type), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorFormatNV, (GLint size, GLenum type, GLsizei stride))
#ifndef glTexCoordFormatNV
#define glTexCoordFormatNV(size, type, stride) glatter_glTexCoordFormatNV((size), (type), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoordFormatNV, (GLint size, GLenum type, GLsizei stride))
#ifndef glVertexAttribFormatNV
#define glVertexAttribFormatNV(index, size, type, normalized, stride) glatter_glVertexAttribFormatNV((index), (size), (type), (normalized), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribFormatNV, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride))
#ifndef glVertexAttribIFormatNV
#define glVertexAttribIFormatNV(index, size, type, stride) glatter_glVertexAttribIFormatNV((index), (size), (type), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIFormatNV, (GLuint index, GLint size, GLenum type, GLsizei stride))
#ifndef glVertexFormatNV
#define glVertexFormatNV(size, type, stride) glatter_glVertexFormatNV((size), (type), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexFormatNV, (GLint size, GLenum type, GLsizei stride))
#endif // defined(GL_NV_vertex_buffer_unified_memory)
#if defined(GL_NV_vertex_program)
#ifndef glAreProgramsResidentNV
#define glAreProgramsResidentNV(n, programs, residences) glatter_glAreProgramsResidentNV((n), (programs), (residences))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glAreProgramsResidentNV, (GLsizei n, const GLuint *programs, GLboolean *residences))
#ifndef glBindProgramNV
#define glBindProgramNV(target, id) glatter_glBindProgramNV((target), (id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindProgramNV, (GLenum target, GLuint id))
#ifndef glDeleteProgramsNV
#define glDeleteProgramsNV(n, programs) glatter_glDeleteProgramsNV((n), (programs))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgramsNV, (GLsizei n, const GLuint *programs))
#ifndef glExecuteProgramNV
#define glExecuteProgramNV(target, id, params) glatter_glExecuteProgramNV((target), (id), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glExecuteProgramNV, (GLenum target, GLuint id, const GLfloat *params))
#ifndef glGenProgramsNV
#define glGenProgramsNV(n, programs) glatter_glGenProgramsNV((n), (programs))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenProgramsNV, (GLsizei n, GLuint *programs))
#ifndef glGetProgramParameterdvNV
#define glGetProgramParameterdvNV(target, index, pname, params) glatter_glGetProgramParameterdvNV((target), (index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramParameterdvNV, (GLenum target, GLuint index, GLenum pname, GLdouble *params))
#ifndef glGetProgramParameterfvNV
#define glGetProgramParameterfvNV(target, index, pname, params) glatter_glGetProgramParameterfvNV((target), (index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramParameterfvNV, (GLenum target, GLuint index, GLenum pname, GLfloat *params))
#ifndef glGetProgramStringNV
#define glGetProgramStringNV(id, pname, program) glatter_glGetProgramStringNV((id), (pname), (program))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramStringNV, (GLuint id, GLenum pname, GLubyte *program))
#ifndef glGetProgramivNV
#define glGetProgramivNV(id, pname, params) glatter_glGetProgramivNV((id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramivNV, (GLuint id, GLenum pname, GLint *params))
#ifndef glGetTrackMatrixivNV
#define glGetTrackMatrixivNV(target, address, pname, params) glatter_glGetTrackMatrixivNV((target), (address), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTrackMatrixivNV, (GLenum target, GLuint address, GLenum pname, GLint *params))
#ifndef glGetVertexAttribPointervNV
#define glGetVertexAttribPointervNV(index, pname, pointer) glatter_glGetVertexAttribPointervNV((index), (pname), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribPointervNV, (GLuint index, GLenum pname, void **pointer))
#ifndef glGetVertexAttribdvNV
#define glGetVertexAttribdvNV(index, pname, params) glatter_glGetVertexAttribdvNV((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribdvNV, (GLuint index, GLenum pname, GLdouble *params))
#ifndef glGetVertexAttribfvNV
#define glGetVertexAttribfvNV(index, pname, params) glatter_glGetVertexAttribfvNV((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribfvNV, (GLuint index, GLenum pname, GLfloat *params))
#ifndef glGetVertexAttribivNV
#define glGetVertexAttribivNV(index, pname, params) glatter_glGetVertexAttribivNV((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribivNV, (GLuint index, GLenum pname, GLint *params))
#ifndef glIsProgramNV
#define glIsProgramNV(id) glatter_glIsProgramNV((id))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgramNV, (GLuint id))
#ifndef glLoadProgramNV
#define glLoadProgramNV(target, id, len, program) glatter_glLoadProgramNV((target), (id), (len), (program))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLoadProgramNV, (GLenum target, GLuint id, GLsizei len, const GLubyte *program))
#ifndef glProgramParameter4dNV
#define glProgramParameter4dNV(target, index, x, y, z, w) glatter_glProgramParameter4dNV((target), (index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramParameter4dNV, (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#ifndef glProgramParameter4dvNV
#define glProgramParameter4dvNV(target, index, v) glatter_glProgramParameter4dvNV((target), (index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramParameter4dvNV, (GLenum target, GLuint index, const GLdouble *v))
#ifndef glProgramParameter4fNV
#define glProgramParameter4fNV(target, index, x, y, z, w) glatter_glProgramParameter4fNV((target), (index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramParameter4fNV, (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#ifndef glProgramParameter4fvNV
#define glProgramParameter4fvNV(target, index, v) glatter_glProgramParameter4fvNV((target), (index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramParameter4fvNV, (GLenum target, GLuint index, const GLfloat *v))
#ifndef glProgramParameters4dvNV
#define glProgramParameters4dvNV(target, index, count, v) glatter_glProgramParameters4dvNV((target), (index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramParameters4dvNV, (GLenum target, GLuint index, GLsizei count, const GLdouble *v))
#ifndef glProgramParameters4fvNV
#define glProgramParameters4fvNV(target, index, count, v) glatter_glProgramParameters4fvNV((target), (index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramParameters4fvNV, (GLenum target, GLuint index, GLsizei count, const GLfloat *v))
#ifndef glRequestResidentProgramsNV
#define glRequestResidentProgramsNV(n, programs) glatter_glRequestResidentProgramsNV((n), (programs))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRequestResidentProgramsNV, (GLsizei n, const GLuint *programs))
#ifndef glTrackMatrixNV
#define glTrackMatrixNV(target, address, matrix, transform) glatter_glTrackMatrixNV((target), (address), (matrix), (transform))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTrackMatrixNV, (GLenum target, GLuint address, GLenum matrix, GLenum transform))
#ifndef glVertexAttrib1dNV
#define glVertexAttrib1dNV(index, x) glatter_glVertexAttrib1dNV((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dNV, (GLuint index, GLdouble x))
#ifndef glVertexAttrib1dvNV
#define glVertexAttrib1dvNV(index, v) glatter_glVertexAttrib1dvNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dvNV, (GLuint index, const GLdouble *v))
#ifndef glVertexAttrib1fNV
#define glVertexAttrib1fNV(index, x) glatter_glVertexAttrib1fNV((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fNV, (GLuint index, GLfloat x))
#ifndef glVertexAttrib1fvNV
#define glVertexAttrib1fvNV(index, v) glatter_glVertexAttrib1fvNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fvNV, (GLuint index, const GLfloat *v))
#ifndef glVertexAttrib1sNV
#define glVertexAttrib1sNV(index, x) glatter_glVertexAttrib1sNV((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1sNV, (GLuint index, GLshort x))
#ifndef glVertexAttrib1svNV
#define glVertexAttrib1svNV(index, v) glatter_glVertexAttrib1svNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1svNV, (GLuint index, const GLshort *v))
#ifndef glVertexAttrib2dNV
#define glVertexAttrib2dNV(index, x, y) glatter_glVertexAttrib2dNV((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dNV, (GLuint index, GLdouble x, GLdouble y))
#ifndef glVertexAttrib2dvNV
#define glVertexAttrib2dvNV(index, v) glatter_glVertexAttrib2dvNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dvNV, (GLuint index, const GLdouble *v))
#ifndef glVertexAttrib2fNV
#define glVertexAttrib2fNV(index, x, y) glatter_glVertexAttrib2fNV((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fNV, (GLuint index, GLfloat x, GLfloat y))
#ifndef glVertexAttrib2fvNV
#define glVertexAttrib2fvNV(index, v) glatter_glVertexAttrib2fvNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fvNV, (GLuint index, const GLfloat *v))
#ifndef glVertexAttrib2sNV
#define glVertexAttrib2sNV(index, x, y) glatter_glVertexAttrib2sNV((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2sNV, (GLuint index, GLshort x, GLshort y))
#ifndef glVertexAttrib2svNV
#define glVertexAttrib2svNV(index, v) glatter_glVertexAttrib2svNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2svNV, (GLuint index, const GLshort *v))
#ifndef glVertexAttrib3dNV
#define glVertexAttrib3dNV(index, x, y, z) glatter_glVertexAttrib3dNV((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dNV, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#ifndef glVertexAttrib3dvNV
#define glVertexAttrib3dvNV(index, v) glatter_glVertexAttrib3dvNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dvNV, (GLuint index, const GLdouble *v))
#ifndef glVertexAttrib3fNV
#define glVertexAttrib3fNV(index, x, y, z) glatter_glVertexAttrib3fNV((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fNV, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#ifndef glVertexAttrib3fvNV
#define glVertexAttrib3fvNV(index, v) glatter_glVertexAttrib3fvNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fvNV, (GLuint index, const GLfloat *v))
#ifndef glVertexAttrib3sNV
#define glVertexAttrib3sNV(index, x, y, z) glatter_glVertexAttrib3sNV((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3sNV, (GLuint index, GLshort x, GLshort y, GLshort z))
#ifndef glVertexAttrib3svNV
#define glVertexAttrib3svNV(index, v) glatter_glVertexAttrib3svNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3svNV, (GLuint index, const GLshort *v))
#ifndef glVertexAttrib4dNV
#define glVertexAttrib4dNV(index, x, y, z, w) glatter_glVertexAttrib4dNV((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dNV, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#ifndef glVertexAttrib4dvNV
#define glVertexAttrib4dvNV(index, v) glatter_glVertexAttrib4dvNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dvNV, (GLuint index, const GLdouble *v))
#ifndef glVertexAttrib4fNV
#define glVertexAttrib4fNV(index, x, y, z, w) glatter_glVertexAttrib4fNV((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fNV, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#ifndef glVertexAttrib4fvNV
#define glVertexAttrib4fvNV(index, v) glatter_glVertexAttrib4fvNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fvNV, (GLuint index, const GLfloat *v))
#ifndef glVertexAttrib4sNV
#define glVertexAttrib4sNV(index, x, y, z, w) glatter_glVertexAttrib4sNV((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4sNV, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w))
#ifndef glVertexAttrib4svNV
#define glVertexAttrib4svNV(index, v) glatter_glVertexAttrib4svNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4svNV, (GLuint index, const GLshort *v))
#ifndef glVertexAttrib4ubNV
#define glVertexAttrib4ubNV(index, x, y, z, w) glatter_glVertexAttrib4ubNV((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubNV, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w))
#ifndef glVertexAttrib4ubvNV
#define glVertexAttrib4ubvNV(index, v) glatter_glVertexAttrib4ubvNV((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubvNV, (GLuint index, const GLubyte *v))
#ifndef glVertexAttribPointerNV
#define glVertexAttribPointerNV(index, fsize, type, stride, pointer) glatter_glVertexAttribPointerNV((index), (fsize), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribPointerNV, (GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer))
#ifndef glVertexAttribs1dvNV
#define glVertexAttribs1dvNV(index, count, v) glatter_glVertexAttribs1dvNV((index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs1dvNV, (GLuint index, GLsizei count, const GLdouble *v))
#ifndef glVertexAttribs1fvNV
#define glVertexAttribs1fvNV(index, count, v) glatter_glVertexAttribs1fvNV((index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs1fvNV, (GLuint index, GLsizei count, const GLfloat *v))
#ifndef glVertexAttribs1svNV
#define glVertexAttribs1svNV(index, count, v) glatter_glVertexAttribs1svNV((index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs1svNV, (GLuint index, GLsizei count, const GLshort *v))
#ifndef glVertexAttribs2dvNV
#define glVertexAttribs2dvNV(index, count, v) glatter_glVertexAttribs2dvNV((index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs2dvNV, (GLuint index, GLsizei count, const GLdouble *v))
#ifndef glVertexAttribs2fvNV
#define glVertexAttribs2fvNV(index, count, v) glatter_glVertexAttribs2fvNV((index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs2fvNV, (GLuint index, GLsizei count, const GLfloat *v))
#ifndef glVertexAttribs2svNV
#define glVertexAttribs2svNV(index, count, v) glatter_glVertexAttribs2svNV((index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs2svNV, (GLuint index, GLsizei count, const GLshort *v))
#ifndef glVertexAttribs3dvNV
#define glVertexAttribs3dvNV(index, count, v) glatter_glVertexAttribs3dvNV((index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs3dvNV, (GLuint index, GLsizei count, const GLdouble *v))
#ifndef glVertexAttribs3fvNV
#define glVertexAttribs3fvNV(index, count, v) glatter_glVertexAttribs3fvNV((index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs3fvNV, (GLuint index, GLsizei count, const GLfloat *v))
#ifndef glVertexAttribs3svNV
#define glVertexAttribs3svNV(index, count, v) glatter_glVertexAttribs3svNV((index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs3svNV, (GLuint index, GLsizei count, const GLshort *v))
#ifndef glVertexAttribs4dvNV
#define glVertexAttribs4dvNV(index, count, v) glatter_glVertexAttribs4dvNV((index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4dvNV, (GLuint index, GLsizei count, const GLdouble *v))
#ifndef glVertexAttribs4fvNV
#define glVertexAttribs4fvNV(index, count, v) glatter_glVertexAttribs4fvNV((index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4fvNV, (GLuint index, GLsizei count, const GLfloat *v))
#ifndef glVertexAttribs4svNV
#define glVertexAttribs4svNV(index, count, v) glatter_glVertexAttribs4svNV((index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4svNV, (GLuint index, GLsizei count, const GLshort *v))
#ifndef glVertexAttribs4ubvNV
#define glVertexAttribs4ubvNV(index, count, v) glatter_glVertexAttribs4ubvNV((index), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4ubvNV, (GLuint index, GLsizei count, const GLubyte *v))
#endif // defined(GL_NV_vertex_program)
#if defined(GL_NV_video_capture)
#ifndef glBeginVideoCaptureNV
#define glBeginVideoCaptureNV(video_capture_slot) glatter_glBeginVideoCaptureNV((video_capture_slot))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginVideoCaptureNV, (GLuint video_capture_slot))
#ifndef glBindVideoCaptureStreamBufferNV
#define glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset) glatter_glBindVideoCaptureStreamBufferNV((video_capture_slot), (stream), (frame_region), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindVideoCaptureStreamBufferNV, (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset))
#ifndef glBindVideoCaptureStreamTextureNV
#define glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture) glatter_glBindVideoCaptureStreamTextureNV((video_capture_slot), (stream), (frame_region), (target), (texture))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindVideoCaptureStreamTextureNV, (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture))
#ifndef glEndVideoCaptureNV
#define glEndVideoCaptureNV(video_capture_slot) glatter_glEndVideoCaptureNV((video_capture_slot))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndVideoCaptureNV, (GLuint video_capture_slot))
#ifndef glGetVideoCaptureStreamdvNV
#define glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamdvNV((video_capture_slot), (stream), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVideoCaptureStreamdvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params))
#ifndef glGetVideoCaptureStreamfvNV
#define glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamfvNV((video_capture_slot), (stream), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVideoCaptureStreamfvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params))
#ifndef glGetVideoCaptureStreamivNV
#define glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamivNV((video_capture_slot), (stream), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVideoCaptureStreamivNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params))
#ifndef glGetVideoCaptureivNV
#define glGetVideoCaptureivNV(video_capture_slot, pname, params) glatter_glGetVideoCaptureivNV((video_capture_slot), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVideoCaptureivNV, (GLuint video_capture_slot, GLenum pname, GLint *params))
#ifndef glVideoCaptureNV
#define glVideoCaptureNV(video_capture_slot, sequence_num, capture_time) glatter_glVideoCaptureNV((video_capture_slot), (sequence_num), (capture_time))
#endif
GLATTER_UBLOCK(GLenum, APIENTRY, glVideoCaptureNV, (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time))
#ifndef glVideoCaptureStreamParameterdvNV
#define glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterdvNV((video_capture_slot), (stream), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVideoCaptureStreamParameterdvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params))
#ifndef glVideoCaptureStreamParameterfvNV
#define glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterfvNV((video_capture_slot), (stream), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVideoCaptureStreamParameterfvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params))
#ifndef glVideoCaptureStreamParameterivNV
#define glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterivNV((video_capture_slot), (stream), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVideoCaptureStreamParameterivNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params))
#endif // defined(GL_NV_video_capture)
#if defined(GL_NV_viewport_swizzle)
#ifndef glViewportSwizzleNV
#define glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew) glatter_glViewportSwizzleNV((index), (swizzlex), (swizzley), (swizzlez), (swizzlew))
#endif
GLATTER_UBLOCK(void, APIENTRY, glViewportSwizzleNV, (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew))
#endif // defined(GL_NV_viewport_swizzle)
#if defined(GL_OES_byte_coordinates)
#ifndef glMultiTexCoord1bOES
#define glMultiTexCoord1bOES(texture, s) glatter_glMultiTexCoord1bOES((texture), (s))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1bOES, (GLenum texture, GLbyte s))
#ifndef glMultiTexCoord1bvOES
#define glMultiTexCoord1bvOES(texture, coords) glatter_glMultiTexCoord1bvOES((texture), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1bvOES, (GLenum texture, const GLbyte *coords))
#ifndef glMultiTexCoord2bOES
#define glMultiTexCoord2bOES(texture, s, t) glatter_glMultiTexCoord2bOES((texture), (s), (t))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2bOES, (GLenum texture, GLbyte s, GLbyte t))
#ifndef glMultiTexCoord2bvOES
#define glMultiTexCoord2bvOES(texture, coords) glatter_glMultiTexCoord2bvOES((texture), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2bvOES, (GLenum texture, const GLbyte *coords))
#ifndef glMultiTexCoord3bOES
#define glMultiTexCoord3bOES(texture, s, t, r) glatter_glMultiTexCoord3bOES((texture), (s), (t), (r))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3bOES, (GLenum texture, GLbyte s, GLbyte t, GLbyte r))
#ifndef glMultiTexCoord3bvOES
#define glMultiTexCoord3bvOES(texture, coords) glatter_glMultiTexCoord3bvOES((texture), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3bvOES, (GLenum texture, const GLbyte *coords))
#ifndef glMultiTexCoord4bOES
#define glMultiTexCoord4bOES(texture, s, t, r, q) glatter_glMultiTexCoord4bOES((texture), (s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4bOES, (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q))
#ifndef glMultiTexCoord4bvOES
#define glMultiTexCoord4bvOES(texture, coords) glatter_glMultiTexCoord4bvOES((texture), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4bvOES, (GLenum texture, const GLbyte *coords))
#ifndef glTexCoord1bOES
#define glTexCoord1bOES(s) glatter_glTexCoord1bOES((s))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1bOES, (GLbyte s))
#ifndef glTexCoord1bvOES
#define glTexCoord1bvOES(coords) glatter_glTexCoord1bvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1bvOES, (const GLbyte *coords))
#ifndef glTexCoord2bOES
#define glTexCoord2bOES(s, t) glatter_glTexCoord2bOES((s), (t))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2bOES, (GLbyte s, GLbyte t))
#ifndef glTexCoord2bvOES
#define glTexCoord2bvOES(coords) glatter_glTexCoord2bvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2bvOES, (const GLbyte *coords))
#ifndef glTexCoord3bOES
#define glTexCoord3bOES(s, t, r) glatter_glTexCoord3bOES((s), (t), (r))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3bOES, (GLbyte s, GLbyte t, GLbyte r))
#ifndef glTexCoord3bvOES
#define glTexCoord3bvOES(coords) glatter_glTexCoord3bvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3bvOES, (const GLbyte *coords))
#ifndef glTexCoord4bOES
#define glTexCoord4bOES(s, t, r, q) glatter_glTexCoord4bOES((s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4bOES, (GLbyte s, GLbyte t, GLbyte r, GLbyte q))
#ifndef glTexCoord4bvOES
#define glTexCoord4bvOES(coords) glatter_glTexCoord4bvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4bvOES, (const GLbyte *coords))
#ifndef glVertex2bOES
#define glVertex2bOES(x, y) glatter_glVertex2bOES((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex2bOES, (GLbyte x, GLbyte y))
#ifndef glVertex2bvOES
#define glVertex2bvOES(coords) glatter_glVertex2bvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex2bvOES, (const GLbyte *coords))
#ifndef glVertex3bOES
#define glVertex3bOES(x, y, z) glatter_glVertex3bOES((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex3bOES, (GLbyte x, GLbyte y, GLbyte z))
#ifndef glVertex3bvOES
#define glVertex3bvOES(coords) glatter_glVertex3bvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex3bvOES, (const GLbyte *coords))
#ifndef glVertex4bOES
#define glVertex4bOES(x, y, z, w) glatter_glVertex4bOES((x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex4bOES, (GLbyte x, GLbyte y, GLbyte z, GLbyte w))
#ifndef glVertex4bvOES
#define glVertex4bvOES(coords) glatter_glVertex4bvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex4bvOES, (const GLbyte *coords))
#endif // defined(GL_OES_byte_coordinates)
#if defined(GL_OES_fixed_point)
#ifndef glAccumxOES
#define glAccumxOES(op, value) glatter_glAccumxOES((op), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glAccumxOES, (GLenum op, GLfixed value))
#ifndef glAlphaFuncxOES
#define glAlphaFuncxOES(func, ref) glatter_glAlphaFuncxOES((func), (ref))
#endif
GLATTER_UBLOCK(void, APIENTRY, glAlphaFuncxOES, (GLenum func, GLfixed ref))
#ifndef glBitmapxOES
#define glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap) glatter_glBitmapxOES((width), (height), (xorig), (yorig), (xmove), (ymove), (bitmap))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBitmapxOES, (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap))
#ifndef glBlendColorxOES
#define glBlendColorxOES(red, green, blue, alpha) glatter_glBlendColorxOES((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendColorxOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#ifndef glClearAccumxOES
#define glClearAccumxOES(red, green, blue, alpha) glatter_glClearAccumxOES((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearAccumxOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#ifndef glClearColorxOES
#define glClearColorxOES(red, green, blue, alpha) glatter_glClearColorxOES((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearColorxOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#ifndef glClearDepthxOES
#define glClearDepthxOES(depth) glatter_glClearDepthxOES((depth))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearDepthxOES, (GLfixed depth))
#ifndef glClipPlanexOES
#define glClipPlanexOES(plane, equation) glatter_glClipPlanexOES((plane), (equation))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClipPlanexOES, (GLenum plane, const GLfixed *equation))
#ifndef glColor3xOES
#define glColor3xOES(red, green, blue) glatter_glColor3xOES((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor3xOES, (GLfixed red, GLfixed green, GLfixed blue))
#ifndef glColor3xvOES
#define glColor3xvOES(components) glatter_glColor3xvOES((components))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor3xvOES, (const GLfixed *components))
#ifndef glColor4xOES
#define glColor4xOES(red, green, blue, alpha) glatter_glColor4xOES((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor4xOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#ifndef glColor4xvOES
#define glColor4xvOES(components) glatter_glColor4xvOES((components))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor4xvOES, (const GLfixed *components))
#ifndef glConvolutionParameterxOES
#define glConvolutionParameterxOES(target, pname, param) glatter_glConvolutionParameterxOES((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterxOES, (GLenum target, GLenum pname, GLfixed param))
#ifndef glConvolutionParameterxvOES
#define glConvolutionParameterxvOES(target, pname, params) glatter_glConvolutionParameterxvOES((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterxvOES, (GLenum target, GLenum pname, const GLfixed *params))
#ifndef glDepthRangexOES
#define glDepthRangexOES(n, f) glatter_glDepthRangexOES((n), (f))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDepthRangexOES, (GLfixed n, GLfixed f))
#ifndef glEvalCoord1xOES
#define glEvalCoord1xOES(u) glatter_glEvalCoord1xOES((u))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord1xOES, (GLfixed u))
#ifndef glEvalCoord1xvOES
#define glEvalCoord1xvOES(coords) glatter_glEvalCoord1xvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord1xvOES, (const GLfixed *coords))
#ifndef glEvalCoord2xOES
#define glEvalCoord2xOES(u, v) glatter_glEvalCoord2xOES((u), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord2xOES, (GLfixed u, GLfixed v))
#ifndef glEvalCoord2xvOES
#define glEvalCoord2xvOES(coords) glatter_glEvalCoord2xvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord2xvOES, (const GLfixed *coords))
#ifndef glFeedbackBufferxOES
#define glFeedbackBufferxOES(n, type, buffer) glatter_glFeedbackBufferxOES((n), (type), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFeedbackBufferxOES, (GLsizei n, GLenum type, const GLfixed *buffer))
#ifndef glFogxOES
#define glFogxOES(pname, param) glatter_glFogxOES((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogxOES, (GLenum pname, GLfixed param))
#ifndef glFogxvOES
#define glFogxvOES(pname, param) glatter_glFogxvOES((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogxvOES, (GLenum pname, const GLfixed *param))
#ifndef glFrustumxOES
#define glFrustumxOES(l, r, b, t, n, f) glatter_glFrustumxOES((l), (r), (b), (t), (n), (f))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFrustumxOES, (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f))
#ifndef glGetClipPlanexOES
#define glGetClipPlanexOES(plane, equation) glatter_glGetClipPlanexOES((plane), (equation))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetClipPlanexOES, (GLenum plane, GLfixed *equation))
#ifndef glGetConvolutionParameterxvOES
#define glGetConvolutionParameterxvOES(target, pname, params) glatter_glGetConvolutionParameterxvOES((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameterxvOES, (GLenum target, GLenum pname, GLfixed *params))
#ifndef glGetFixedvOES
#define glGetFixedvOES(pname, params) glatter_glGetFixedvOES((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFixedvOES, (GLenum pname, GLfixed *params))
#ifndef glGetHistogramParameterxvOES
#define glGetHistogramParameterxvOES(target, pname, params) glatter_glGetHistogramParameterxvOES((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameterxvOES, (GLenum target, GLenum pname, GLfixed *params))
#ifndef glGetLightxOES
#define glGetLightxOES(light, pname, params) glatter_glGetLightxOES((light), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetLightxOES, (GLenum light, GLenum pname, GLfixed *params))
#ifndef glGetMapxvOES
#define glGetMapxvOES(target, query, v) glatter_glGetMapxvOES((target), (query), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMapxvOES, (GLenum target, GLenum query, GLfixed *v))
#ifndef glGetMaterialxOES
#define glGetMaterialxOES(face, pname, param) glatter_glGetMaterialxOES((face), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMaterialxOES, (GLenum face, GLenum pname, GLfixed param))
#ifndef glGetPixelMapxv
#define glGetPixelMapxv(map, size, values) glatter_glGetPixelMapxv((map), (size), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPixelMapxv, (GLenum map, GLint size, GLfixed *values))
#ifndef glGetTexEnvxvOES
#define glGetTexEnvxvOES(target, pname, params) glatter_glGetTexEnvxvOES((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTexEnvxvOES, (GLenum target, GLenum pname, GLfixed *params))
#ifndef glGetTexGenxvOES
#define glGetTexGenxvOES(coord, pname, params) glatter_glGetTexGenxvOES((coord), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTexGenxvOES, (GLenum coord, GLenum pname, GLfixed *params))
#ifndef glGetTexLevelParameterxvOES
#define glGetTexLevelParameterxvOES(target, level, pname, params) glatter_glGetTexLevelParameterxvOES((target), (level), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTexLevelParameterxvOES, (GLenum target, GLint level, GLenum pname, GLfixed *params))
#ifndef glGetTexParameterxvOES
#define glGetTexParameterxvOES(target, pname, params) glatter_glGetTexParameterxvOES((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterxvOES, (GLenum target, GLenum pname, GLfixed *params))
#ifndef glIndexxOES
#define glIndexxOES(component) glatter_glIndexxOES((component))
#endif
GLATTER_UBLOCK(void, APIENTRY, glIndexxOES, (GLfixed component))
#ifndef glIndexxvOES
#define glIndexxvOES(component) glatter_glIndexxvOES((component))
#endif
GLATTER_UBLOCK(void, APIENTRY, glIndexxvOES, (const GLfixed *component))
#ifndef glLightModelxOES
#define glLightModelxOES(pname, param) glatter_glLightModelxOES((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLightModelxOES, (GLenum pname, GLfixed param))
#ifndef glLightModelxvOES
#define glLightModelxvOES(pname, param) glatter_glLightModelxvOES((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLightModelxvOES, (GLenum pname, const GLfixed *param))
#ifndef glLightxOES
#define glLightxOES(light, pname, param) glatter_glLightxOES((light), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLightxOES, (GLenum light, GLenum pname, GLfixed param))
#ifndef glLightxvOES
#define glLightxvOES(light, pname, params) glatter_glLightxvOES((light), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLightxvOES, (GLenum light, GLenum pname, const GLfixed *params))
#ifndef glLineWidthxOES
#define glLineWidthxOES(width) glatter_glLineWidthxOES((width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLineWidthxOES, (GLfixed width))
#ifndef glLoadMatrixxOES
#define glLoadMatrixxOES(m) glatter_glLoadMatrixxOES((m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLoadMatrixxOES, (const GLfixed *m))
#ifndef glLoadTransposeMatrixxOES
#define glLoadTransposeMatrixxOES(m) glatter_glLoadTransposeMatrixxOES((m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixxOES, (const GLfixed *m))
#ifndef glMap1xOES
#define glMap1xOES(target, u1, u2, stride, order, points) glatter_glMap1xOES((target), (u1), (u2), (stride), (order), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMap1xOES, (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points))
#ifndef glMap2xOES
#define glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2xOES((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMap2xOES, (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points))
#ifndef glMapGrid1xOES
#define glMapGrid1xOES(n, u1, u2) glatter_glMapGrid1xOES((n), (u1), (u2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMapGrid1xOES, (GLint n, GLfixed u1, GLfixed u2))
#ifndef glMapGrid2xOES
#define glMapGrid2xOES(n, u1, u2, v1, v2) glatter_glMapGrid2xOES((n), (u1), (u2), (v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMapGrid2xOES, (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2))
#ifndef glMaterialxOES
#define glMaterialxOES(face, pname, param) glatter_glMaterialxOES((face), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMaterialxOES, (GLenum face, GLenum pname, GLfixed param))
#ifndef glMaterialxvOES
#define glMaterialxvOES(face, pname, param) glatter_glMaterialxvOES((face), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMaterialxvOES, (GLenum face, GLenum pname, const GLfixed *param))
#ifndef glMultMatrixxOES
#define glMultMatrixxOES(m) glatter_glMultMatrixxOES((m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultMatrixxOES, (const GLfixed *m))
#ifndef glMultTransposeMatrixxOES
#define glMultTransposeMatrixxOES(m) glatter_glMultTransposeMatrixxOES((m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixxOES, (const GLfixed *m))
#ifndef glMultiTexCoord1xOES
#define glMultiTexCoord1xOES(texture, s) glatter_glMultiTexCoord1xOES((texture), (s))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1xOES, (GLenum texture, GLfixed s))
#ifndef glMultiTexCoord1xvOES
#define glMultiTexCoord1xvOES(texture, coords) glatter_glMultiTexCoord1xvOES((texture), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1xvOES, (GLenum texture, const GLfixed *coords))
#ifndef glMultiTexCoord2xOES
#define glMultiTexCoord2xOES(texture, s, t) glatter_glMultiTexCoord2xOES((texture), (s), (t))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2xOES, (GLenum texture, GLfixed s, GLfixed t))
#ifndef glMultiTexCoord2xvOES
#define glMultiTexCoord2xvOES(texture, coords) glatter_glMultiTexCoord2xvOES((texture), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2xvOES, (GLenum texture, const GLfixed *coords))
#ifndef glMultiTexCoord3xOES
#define glMultiTexCoord3xOES(texture, s, t, r) glatter_glMultiTexCoord3xOES((texture), (s), (t), (r))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3xOES, (GLenum texture, GLfixed s, GLfixed t, GLfixed r))
#ifndef glMultiTexCoord3xvOES
#define glMultiTexCoord3xvOES(texture, coords) glatter_glMultiTexCoord3xvOES((texture), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3xvOES, (GLenum texture, const GLfixed *coords))
#ifndef glMultiTexCoord4xOES
#define glMultiTexCoord4xOES(texture, s, t, r, q) glatter_glMultiTexCoord4xOES((texture), (s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4xOES, (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q))
#ifndef glMultiTexCoord4xvOES
#define glMultiTexCoord4xvOES(texture, coords) glatter_glMultiTexCoord4xvOES((texture), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4xvOES, (GLenum texture, const GLfixed *coords))
#ifndef glNormal3xOES
#define glNormal3xOES(nx, ny, nz) glatter_glNormal3xOES((nx), (ny), (nz))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormal3xOES, (GLfixed nx, GLfixed ny, GLfixed nz))
#ifndef glNormal3xvOES
#define glNormal3xvOES(coords) glatter_glNormal3xvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormal3xvOES, (const GLfixed *coords))
#ifndef glOrthoxOES
#define glOrthoxOES(l, r, b, t, n, f) glatter_glOrthoxOES((l), (r), (b), (t), (n), (f))
#endif
GLATTER_UBLOCK(void, APIENTRY, glOrthoxOES, (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f))
#ifndef glPassThroughxOES
#define glPassThroughxOES(token) glatter_glPassThroughxOES((token))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPassThroughxOES, (GLfixed token))
#ifndef glPixelMapx
#define glPixelMapx(map, size, values) glatter_glPixelMapx((map), (size), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPixelMapx, (GLenum map, GLint size, const GLfixed *values))
#ifndef glPixelStorex
#define glPixelStorex(pname, param) glatter_glPixelStorex((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPixelStorex, (GLenum pname, GLfixed param))
#ifndef glPixelTransferxOES
#define glPixelTransferxOES(pname, param) glatter_glPixelTransferxOES((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPixelTransferxOES, (GLenum pname, GLfixed param))
#ifndef glPixelZoomxOES
#define glPixelZoomxOES(xfactor, yfactor) glatter_glPixelZoomxOES((xfactor), (yfactor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPixelZoomxOES, (GLfixed xfactor, GLfixed yfactor))
#ifndef glPointParameterxvOES
#define glPointParameterxvOES(pname, params) glatter_glPointParameterxvOES((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPointParameterxvOES, (GLenum pname, const GLfixed *params))
#ifndef glPointSizexOES
#define glPointSizexOES(size) glatter_glPointSizexOES((size))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPointSizexOES, (GLfixed size))
#ifndef glPolygonOffsetxOES
#define glPolygonOffsetxOES(factor, units) glatter_glPolygonOffsetxOES((factor), (units))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffsetxOES, (GLfixed factor, GLfixed units))
#ifndef glPrioritizeTexturesxOES
#define glPrioritizeTexturesxOES(n, textures, priorities) glatter_glPrioritizeTexturesxOES((n), (textures), (priorities))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPrioritizeTexturesxOES, (GLsizei n, const GLuint *textures, const GLfixed *priorities))
#ifndef glRasterPos2xOES
#define glRasterPos2xOES(x, y) glatter_glRasterPos2xOES((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2xOES, (GLfixed x, GLfixed y))
#ifndef glRasterPos2xvOES
#define glRasterPos2xvOES(coords) glatter_glRasterPos2xvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2xvOES, (const GLfixed *coords))
#ifndef glRasterPos3xOES
#define glRasterPos3xOES(x, y, z) glatter_glRasterPos3xOES((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3xOES, (GLfixed x, GLfixed y, GLfixed z))
#ifndef glRasterPos3xvOES
#define glRasterPos3xvOES(coords) glatter_glRasterPos3xvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3xvOES, (const GLfixed *coords))
#ifndef glRasterPos4xOES
#define glRasterPos4xOES(x, y, z, w) glatter_glRasterPos4xOES((x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4xOES, (GLfixed x, GLfixed y, GLfixed z, GLfixed w))
#ifndef glRasterPos4xvOES
#define glRasterPos4xvOES(coords) glatter_glRasterPos4xvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4xvOES, (const GLfixed *coords))
#ifndef glRectxOES
#define glRectxOES(x1, y1, x2, y2) glatter_glRectxOES((x1), (y1), (x2), (y2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRectxOES, (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2))
#ifndef glRectxvOES
#define glRectxvOES(v1, v2) glatter_glRectxvOES((v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRectxvOES, (const GLfixed *v1, const GLfixed *v2))
#ifndef glRotatexOES
#define glRotatexOES(angle, x, y, z) glatter_glRotatexOES((angle), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRotatexOES, (GLfixed angle, GLfixed x, GLfixed y, GLfixed z))
#ifndef glScalexOES
#define glScalexOES(x, y, z) glatter_glScalexOES((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glScalexOES, (GLfixed x, GLfixed y, GLfixed z))
#ifndef glTexCoord1xOES
#define glTexCoord1xOES(s) glatter_glTexCoord1xOES((s))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1xOES, (GLfixed s))
#ifndef glTexCoord1xvOES
#define glTexCoord1xvOES(coords) glatter_glTexCoord1xvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1xvOES, (const GLfixed *coords))
#ifndef glTexCoord2xOES
#define glTexCoord2xOES(s, t) glatter_glTexCoord2xOES((s), (t))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2xOES, (GLfixed s, GLfixed t))
#ifndef glTexCoord2xvOES
#define glTexCoord2xvOES(coords) glatter_glTexCoord2xvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2xvOES, (const GLfixed *coords))
#ifndef glTexCoord3xOES
#define glTexCoord3xOES(s, t, r) glatter_glTexCoord3xOES((s), (t), (r))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3xOES, (GLfixed s, GLfixed t, GLfixed r))
#ifndef glTexCoord3xvOES
#define glTexCoord3xvOES(coords) glatter_glTexCoord3xvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3xvOES, (const GLfixed *coords))
#ifndef glTexCoord4xOES
#define glTexCoord4xOES(s, t, r, q) glatter_glTexCoord4xOES((s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4xOES, (GLfixed s, GLfixed t, GLfixed r, GLfixed q))
#ifndef glTexCoord4xvOES
#define glTexCoord4xvOES(coords) glatter_glTexCoord4xvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4xvOES, (const GLfixed *coords))
#ifndef glTexEnvxOES
#define glTexEnvxOES(target, pname, param) glatter_glTexEnvxOES((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexEnvxOES, (GLenum target, GLenum pname, GLfixed param))
#ifndef glTexEnvxvOES
#define glTexEnvxvOES(target, pname, params) glatter_glTexEnvxvOES((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexEnvxvOES, (GLenum target, GLenum pname, const GLfixed *params))
#ifndef glTexGenxOES
#define glTexGenxOES(coord, pname, param) glatter_glTexGenxOES((coord), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexGenxOES, (GLenum coord, GLenum pname, GLfixed param))
#ifndef glTexGenxvOES
#define glTexGenxvOES(coord, pname, params) glatter_glTexGenxvOES((coord), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexGenxvOES, (GLenum coord, GLenum pname, const GLfixed *params))
#ifndef glTexParameterxOES
#define glTexParameterxOES(target, pname, param) glatter_glTexParameterxOES((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexParameterxOES, (GLenum target, GLenum pname, GLfixed param))
#ifndef glTexParameterxvOES
#define glTexParameterxvOES(target, pname, params) glatter_glTexParameterxvOES((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexParameterxvOES, (GLenum target, GLenum pname, const GLfixed *params))
#ifndef glTranslatexOES
#define glTranslatexOES(x, y, z) glatter_glTranslatexOES((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTranslatexOES, (GLfixed x, GLfixed y, GLfixed z))
#ifndef glVertex2xOES
#define glVertex2xOES(x) glatter_glVertex2xOES((x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex2xOES, (GLfixed x))
#ifndef glVertex2xvOES
#define glVertex2xvOES(coords) glatter_glVertex2xvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex2xvOES, (const GLfixed *coords))
#ifndef glVertex3xOES
#define glVertex3xOES(x, y) glatter_glVertex3xOES((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex3xOES, (GLfixed x, GLfixed y))
#ifndef glVertex3xvOES
#define glVertex3xvOES(coords) glatter_glVertex3xvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex3xvOES, (const GLfixed *coords))
#ifndef glVertex4xOES
#define glVertex4xOES(x, y, z) glatter_glVertex4xOES((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex4xOES, (GLfixed x, GLfixed y, GLfixed z))
#ifndef glVertex4xvOES
#define glVertex4xvOES(coords) glatter_glVertex4xvOES((coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertex4xvOES, (const GLfixed *coords))
#endif // defined(GL_OES_fixed_point)
#if defined(GL_OES_query_matrix)
#ifndef glQueryMatrixxOES
#define glQueryMatrixxOES(mantissa, exponent) glatter_glQueryMatrixxOES((mantissa), (exponent))
#endif
GLATTER_UBLOCK(GLbitfield, APIENTRY, glQueryMatrixxOES, (GLfixed *mantissa, GLint *exponent))
#endif // defined(GL_OES_query_matrix)
#if defined(GL_OES_single_precision)
#ifndef glClearDepthfOES
#define glClearDepthfOES(depth) glatter_glClearDepthfOES((depth))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearDepthfOES, (GLclampf depth))
#ifndef glClipPlanefOES
#define glClipPlanefOES(plane, equation) glatter_glClipPlanefOES((plane), (equation))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClipPlanefOES, (GLenum plane, const GLfloat *equation))
#ifndef glDepthRangefOES
#define glDepthRangefOES(n, f) glatter_glDepthRangefOES((n), (f))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDepthRangefOES, (GLclampf n, GLclampf f))
#ifndef glFrustumfOES
#define glFrustumfOES(l, r, b, t, n, f) glatter_glFrustumfOES((l), (r), (b), (t), (n), (f))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFrustumfOES, (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f))
#ifndef glGetClipPlanefOES
#define glGetClipPlanefOES(plane, equation) glatter_glGetClipPlanefOES((plane), (equation))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetClipPlanefOES, (GLenum plane, GLfloat *equation))
#ifndef glOrthofOES
#define glOrthofOES(l, r, b, t, n, f) glatter_glOrthofOES((l), (r), (b), (t), (n), (f))
#endif
GLATTER_UBLOCK(void, APIENTRY, glOrthofOES, (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f))
#endif // defined(GL_OES_single_precision)
#if defined(GL_OVR_multiview)
#ifndef glFramebufferTextureMultiviewOVR
#define glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) glatter_glFramebufferTextureMultiviewOVR((target), (attachment), (texture), (level), (baseViewIndex), (numViews))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureMultiviewOVR, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews))
#ifndef glNamedFramebufferTextureMultiviewOVR
#define glNamedFramebufferTextureMultiviewOVR(framebuffer, attachment, texture, level, baseViewIndex, numViews) glatter_glNamedFramebufferTextureMultiviewOVR((framebuffer), (attachment), (texture), (level), (baseViewIndex), (numViews))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureMultiviewOVR, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews))
#endif // defined(GL_OVR_multiview)
#if defined(GL_PGI_misc_hints)
#ifndef glHintPGI
#define glHintPGI(target, mode) glatter_glHintPGI((target), (mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glHintPGI, (GLenum target, GLint mode))
#endif // defined(GL_PGI_misc_hints)
#if defined(GL_SGIS_detail_texture)
#ifndef glDetailTexFuncSGIS
#define glDetailTexFuncSGIS(target, n, points) glatter_glDetailTexFuncSGIS((target), (n), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDetailTexFuncSGIS, (GLenum target, GLsizei n, const GLfloat *points))
#ifndef glGetDetailTexFuncSGIS
#define glGetDetailTexFuncSGIS(target, points) glatter_glGetDetailTexFuncSGIS((target), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetDetailTexFuncSGIS, (GLenum target, GLfloat *points))
#endif // defined(GL_SGIS_detail_texture)
#if defined(GL_SGIS_fog_function)
#ifndef glFogFuncSGIS
#define glFogFuncSGIS(n, points) glatter_glFogFuncSGIS((n), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogFuncSGIS, (GLsizei n, const GLfloat *points))
#ifndef glGetFogFuncSGIS
#define glGetFogFuncSGIS(points) glatter_glGetFogFuncSGIS((points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFogFuncSGIS, (GLfloat *points))
#endif // defined(GL_SGIS_fog_function)
#if defined(GL_SGIS_multisample)
#ifndef glSampleMaskSGIS
#define glSampleMaskSGIS(value, invert) glatter_glSampleMaskSGIS((value), (invert))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSampleMaskSGIS, (GLclampf value, GLboolean invert))
#ifndef glSamplePatternSGIS
#define glSamplePatternSGIS(pattern) glatter_glSamplePatternSGIS((pattern))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSamplePatternSGIS, (GLenum pattern))
#endif // defined(GL_SGIS_multisample)
#if defined(GL_SGIS_pixel_texture)
#ifndef glGetPixelTexGenParameterfvSGIS
#define glGetPixelTexGenParameterfvSGIS(pname, params) glatter_glGetPixelTexGenParameterfvSGIS((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPixelTexGenParameterfvSGIS, (GLenum pname, GLfloat *params))
#ifndef glGetPixelTexGenParameterivSGIS
#define glGetPixelTexGenParameterivSGIS(pname, params) glatter_glGetPixelTexGenParameterivSGIS((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetPixelTexGenParameterivSGIS, (GLenum pname, GLint *params))
#ifndef glPixelTexGenParameterfSGIS
#define glPixelTexGenParameterfSGIS(pname, param) glatter_glPixelTexGenParameterfSGIS((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenParameterfSGIS, (GLenum pname, GLfloat param))
#ifndef glPixelTexGenParameterfvSGIS
#define glPixelTexGenParameterfvSGIS(pname, params) glatter_glPixelTexGenParameterfvSGIS((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenParameterfvSGIS, (GLenum pname, const GLfloat *params))
#ifndef glPixelTexGenParameteriSGIS
#define glPixelTexGenParameteriSGIS(pname, param) glatter_glPixelTexGenParameteriSGIS((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenParameteriSGIS, (GLenum pname, GLint param))
#ifndef glPixelTexGenParameterivSGIS
#define glPixelTexGenParameterivSGIS(pname, params) glatter_glPixelTexGenParameterivSGIS((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenParameterivSGIS, (GLenum pname, const GLint *params))
#endif // defined(GL_SGIS_pixel_texture)
#if defined(GL_SGIS_point_parameters)
#ifndef glPointParameterfSGIS
#define glPointParameterfSGIS(pname, param) glatter_glPointParameterfSGIS((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfSGIS, (GLenum pname, GLfloat param))
#ifndef glPointParameterfvSGIS
#define glPointParameterfvSGIS(pname, params) glatter_glPointParameterfvSGIS((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfvSGIS, (GLenum pname, const GLfloat *params))
#endif // defined(GL_SGIS_point_parameters)
#if defined(GL_SGIS_sharpen_texture)
#ifndef glGetSharpenTexFuncSGIS
#define glGetSharpenTexFuncSGIS(target, points) glatter_glGetSharpenTexFuncSGIS((target), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetSharpenTexFuncSGIS, (GLenum target, GLfloat *points))
#ifndef glSharpenTexFuncSGIS
#define glSharpenTexFuncSGIS(target, n, points) glatter_glSharpenTexFuncSGIS((target), (n), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSharpenTexFuncSGIS, (GLenum target, GLsizei n, const GLfloat *points))
#endif // defined(GL_SGIS_sharpen_texture)
#if defined(GL_SGIS_texture4D)
#ifndef glTexImage4DSGIS
#define glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels) glatter_glTexImage4DSGIS((target), (level), (internalformat), (width), (height), (depth), (size4d), (border), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexImage4DSGIS, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels))
#ifndef glTexSubImage4DSGIS
#define glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels) glatter_glTexSubImage4DSGIS((target), (level), (xoffset), (yoffset), (zoffset), (woffset), (width), (height), (depth), (size4d), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage4DSGIS, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_SGIS_texture4D)
#if defined(GL_SGIS_texture_color_mask)
#ifndef glTextureColorMaskSGIS
#define glTextureColorMaskSGIS(red, green, blue, alpha) glatter_glTextureColorMaskSGIS((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureColorMaskSGIS, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#endif // defined(GL_SGIS_texture_color_mask)
#if defined(GL_SGIS_texture_filter4)
#ifndef glGetTexFilterFuncSGIS
#define glGetTexFilterFuncSGIS(target, filter, weights) glatter_glGetTexFilterFuncSGIS((target), (filter), (weights))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTexFilterFuncSGIS, (GLenum target, GLenum filter, GLfloat *weights))
#ifndef glTexFilterFuncSGIS
#define glTexFilterFuncSGIS(target, filter, n, weights) glatter_glTexFilterFuncSGIS((target), (filter), (n), (weights))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexFilterFuncSGIS, (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights))
#endif // defined(GL_SGIS_texture_filter4)
#if defined(GL_SGIX_async)
#ifndef glAsyncMarkerSGIX
#define glAsyncMarkerSGIX(marker) glatter_glAsyncMarkerSGIX((marker))
#endif
GLATTER_UBLOCK(void, APIENTRY, glAsyncMarkerSGIX, (GLuint marker))
#ifndef glDeleteAsyncMarkersSGIX
#define glDeleteAsyncMarkersSGIX(marker, range) glatter_glDeleteAsyncMarkersSGIX((marker), (range))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteAsyncMarkersSGIX, (GLuint marker, GLsizei range))
#ifndef glFinishAsyncSGIX
#define glFinishAsyncSGIX(markerp) glatter_glFinishAsyncSGIX((markerp))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glFinishAsyncSGIX, (GLuint *markerp))
#ifndef glGenAsyncMarkersSGIX
#define glGenAsyncMarkersSGIX(range) glatter_glGenAsyncMarkersSGIX((range))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glGenAsyncMarkersSGIX, (GLsizei range))
#ifndef glIsAsyncMarkerSGIX
#define glIsAsyncMarkerSGIX(marker) glatter_glIsAsyncMarkerSGIX((marker))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsAsyncMarkerSGIX, (GLuint marker))
#ifndef glPollAsyncSGIX
#define glPollAsyncSGIX(markerp) glatter_glPollAsyncSGIX((markerp))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glPollAsyncSGIX, (GLuint *markerp))
#endif // defined(GL_SGIX_async)
#if defined(GL_SGIX_flush_raster)
#ifndef glFlushRasterSGIX
#define glFlushRasterSGIX() glatter_glFlushRasterSGIX()
#endif
GLATTER_UBLOCK(void, APIENTRY, glFlushRasterSGIX, (void))
#endif // defined(GL_SGIX_flush_raster)
#if defined(GL_SGIX_fragment_lighting)
#ifndef glFragmentColorMaterialSGIX
#define glFragmentColorMaterialSGIX(face, mode) glatter_glFragmentColorMaterialSGIX((face), (mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFragmentColorMaterialSGIX, (GLenum face, GLenum mode))
#ifndef glFragmentLightModelfSGIX
#define glFragmentLightModelfSGIX(pname, param) glatter_glFragmentLightModelfSGIX((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightModelfSGIX, (GLenum pname, GLfloat param))
#ifndef glFragmentLightModelfvSGIX
#define glFragmentLightModelfvSGIX(pname, params) glatter_glFragmentLightModelfvSGIX((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightModelfvSGIX, (GLenum pname, const GLfloat *params))
#ifndef glFragmentLightModeliSGIX
#define glFragmentLightModeliSGIX(pname, param) glatter_glFragmentLightModeliSGIX((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightModeliSGIX, (GLenum pname, GLint param))
#ifndef glFragmentLightModelivSGIX
#define glFragmentLightModelivSGIX(pname, params) glatter_glFragmentLightModelivSGIX((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightModelivSGIX, (GLenum pname, const GLint *params))
#ifndef glFragmentLightfSGIX
#define glFragmentLightfSGIX(light, pname, param) glatter_glFragmentLightfSGIX((light), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightfSGIX, (GLenum light, GLenum pname, GLfloat param))
#ifndef glFragmentLightfvSGIX
#define glFragmentLightfvSGIX(light, pname, params) glatter_glFragmentLightfvSGIX((light), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightfvSGIX, (GLenum light, GLenum pname, const GLfloat *params))
#ifndef glFragmentLightiSGIX
#define glFragmentLightiSGIX(light, pname, param) glatter_glFragmentLightiSGIX((light), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightiSGIX, (GLenum light, GLenum pname, GLint param))
#ifndef glFragmentLightivSGIX
#define glFragmentLightivSGIX(light, pname, params) glatter_glFragmentLightivSGIX((light), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightivSGIX, (GLenum light, GLenum pname, const GLint *params))
#ifndef glFragmentMaterialfSGIX
#define glFragmentMaterialfSGIX(face, pname, param) glatter_glFragmentMaterialfSGIX((face), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFragmentMaterialfSGIX, (GLenum face, GLenum pname, GLfloat param))
#ifndef glFragmentMaterialfvSGIX
#define glFragmentMaterialfvSGIX(face, pname, params) glatter_glFragmentMaterialfvSGIX((face), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFragmentMaterialfvSGIX, (GLenum face, GLenum pname, const GLfloat *params))
#ifndef glFragmentMaterialiSGIX
#define glFragmentMaterialiSGIX(face, pname, param) glatter_glFragmentMaterialiSGIX((face), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFragmentMaterialiSGIX, (GLenum face, GLenum pname, GLint param))
#ifndef glFragmentMaterialivSGIX
#define glFragmentMaterialivSGIX(face, pname, params) glatter_glFragmentMaterialivSGIX((face), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFragmentMaterialivSGIX, (GLenum face, GLenum pname, const GLint *params))
#ifndef glGetFragmentLightfvSGIX
#define glGetFragmentLightfvSGIX(light, pname, params) glatter_glGetFragmentLightfvSGIX((light), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFragmentLightfvSGIX, (GLenum light, GLenum pname, GLfloat *params))
#ifndef glGetFragmentLightivSGIX
#define glGetFragmentLightivSGIX(light, pname, params) glatter_glGetFragmentLightivSGIX((light), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFragmentLightivSGIX, (GLenum light, GLenum pname, GLint *params))
#ifndef glGetFragmentMaterialfvSGIX
#define glGetFragmentMaterialfvSGIX(face, pname, params) glatter_glGetFragmentMaterialfvSGIX((face), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFragmentMaterialfvSGIX, (GLenum face, GLenum pname, GLfloat *params))
#ifndef glGetFragmentMaterialivSGIX
#define glGetFragmentMaterialivSGIX(face, pname, params) glatter_glGetFragmentMaterialivSGIX((face), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFragmentMaterialivSGIX, (GLenum face, GLenum pname, GLint *params))
#ifndef glLightEnviSGIX
#define glLightEnviSGIX(pname, param) glatter_glLightEnviSGIX((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLightEnviSGIX, (GLenum pname, GLint param))
#endif // defined(GL_SGIX_fragment_lighting)
#if defined(GL_SGIX_framezoom)
#ifndef glFrameZoomSGIX
#define glFrameZoomSGIX(factor) glatter_glFrameZoomSGIX((factor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFrameZoomSGIX, (GLint factor))
#endif // defined(GL_SGIX_framezoom)
#if defined(GL_SGIX_igloo_interface)
#ifndef glIglooInterfaceSGIX
#define glIglooInterfaceSGIX(pname, params) glatter_glIglooInterfaceSGIX((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glIglooInterfaceSGIX, (GLenum pname, const void *params))
#endif // defined(GL_SGIX_igloo_interface)
#if defined(GL_SGIX_instruments)
#ifndef glGetInstrumentsSGIX
#define glGetInstrumentsSGIX() glatter_glGetInstrumentsSGIX()
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glGetInstrumentsSGIX, (void))
#ifndef glInstrumentsBufferSGIX
#define glInstrumentsBufferSGIX(size, buffer) glatter_glInstrumentsBufferSGIX((size), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glInstrumentsBufferSGIX, (GLsizei size, GLint *buffer))
#ifndef glPollInstrumentsSGIX
#define glPollInstrumentsSGIX(marker_p) glatter_glPollInstrumentsSGIX((marker_p))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glPollInstrumentsSGIX, (GLint *marker_p))
#ifndef glReadInstrumentsSGIX
#define glReadInstrumentsSGIX(marker) glatter_glReadInstrumentsSGIX((marker))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReadInstrumentsSGIX, (GLint marker))
#ifndef glStartInstrumentsSGIX
#define glStartInstrumentsSGIX() glatter_glStartInstrumentsSGIX()
#endif
GLATTER_UBLOCK(void, APIENTRY, glStartInstrumentsSGIX, (void))
#ifndef glStopInstrumentsSGIX
#define glStopInstrumentsSGIX(marker) glatter_glStopInstrumentsSGIX((marker))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStopInstrumentsSGIX, (GLint marker))
#endif // defined(GL_SGIX_instruments)
#if defined(GL_SGIX_list_priority)
#ifndef glGetListParameterfvSGIX
#define glGetListParameterfvSGIX(list, pname, params) glatter_glGetListParameterfvSGIX((list), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetListParameterfvSGIX, (GLuint list, GLenum pname, GLfloat *params))
#ifndef glGetListParameterivSGIX
#define glGetListParameterivSGIX(list, pname, params) glatter_glGetListParameterivSGIX((list), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetListParameterivSGIX, (GLuint list, GLenum pname, GLint *params))
#ifndef glListParameterfSGIX
#define glListParameterfSGIX(list, pname, param) glatter_glListParameterfSGIX((list), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glListParameterfSGIX, (GLuint list, GLenum pname, GLfloat param))
#ifndef glListParameterfvSGIX
#define glListParameterfvSGIX(list, pname, params) glatter_glListParameterfvSGIX((list), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glListParameterfvSGIX, (GLuint list, GLenum pname, const GLfloat *params))
#ifndef glListParameteriSGIX
#define glListParameteriSGIX(list, pname, param) glatter_glListParameteriSGIX((list), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glListParameteriSGIX, (GLuint list, GLenum pname, GLint param))
#ifndef glListParameterivSGIX
#define glListParameterivSGIX(list, pname, params) glatter_glListParameterivSGIX((list), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glListParameterivSGIX, (GLuint list, GLenum pname, const GLint *params))
#endif // defined(GL_SGIX_list_priority)
#if defined(GL_SGIX_pixel_texture)
#ifndef glPixelTexGenSGIX
#define glPixelTexGenSGIX(mode) glatter_glPixelTexGenSGIX((mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenSGIX, (GLenum mode))
#endif // defined(GL_SGIX_pixel_texture)
#if defined(GL_SGIX_polynomial_ffd)
#ifndef glDeformSGIX
#define glDeformSGIX(mask) glatter_glDeformSGIX((mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeformSGIX, (GLbitfield mask))
#ifndef glDeformationMap3dSGIX
#define glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) glatter_glDeformationMap3dSGIX((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (w1), (w2), (wstride), (worder), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeformationMap3dSGIX, (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points))
#ifndef glDeformationMap3fSGIX
#define glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) glatter_glDeformationMap3fSGIX((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (w1), (w2), (wstride), (worder), (points))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeformationMap3fSGIX, (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points))
#ifndef glLoadIdentityDeformationMapSGIX
#define glLoadIdentityDeformationMapSGIX(mask) glatter_glLoadIdentityDeformationMapSGIX((mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLoadIdentityDeformationMapSGIX, (GLbitfield mask))
#endif // defined(GL_SGIX_polynomial_ffd)
#if defined(GL_SGIX_reference_plane)
#ifndef glReferencePlaneSGIX
#define glReferencePlaneSGIX(equation) glatter_glReferencePlaneSGIX((equation))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReferencePlaneSGIX, (const GLdouble *equation))
#endif // defined(GL_SGIX_reference_plane)
#if defined(GL_SGIX_sprite)
#ifndef glSpriteParameterfSGIX
#define glSpriteParameterfSGIX(pname, param) glatter_glSpriteParameterfSGIX((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSpriteParameterfSGIX, (GLenum pname, GLfloat param))
#ifndef glSpriteParameterfvSGIX
#define glSpriteParameterfvSGIX(pname, params) glatter_glSpriteParameterfvSGIX((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSpriteParameterfvSGIX, (GLenum pname, const GLfloat *params))
#ifndef glSpriteParameteriSGIX
#define glSpriteParameteriSGIX(pname, param) glatter_glSpriteParameteriSGIX((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSpriteParameteriSGIX, (GLenum pname, GLint param))
#ifndef glSpriteParameterivSGIX
#define glSpriteParameterivSGIX(pname, params) glatter_glSpriteParameterivSGIX((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSpriteParameterivSGIX, (GLenum pname, const GLint *params))
#endif // defined(GL_SGIX_sprite)
#if defined(GL_SGIX_tag_sample_buffer)
#ifndef glTagSampleBufferSGIX
#define glTagSampleBufferSGIX() glatter_glTagSampleBufferSGIX()
#endif
GLATTER_UBLOCK(void, APIENTRY, glTagSampleBufferSGIX, (void))
#endif // defined(GL_SGIX_tag_sample_buffer)
#if defined(GL_SGI_color_table)
#ifndef glColorTableParameterfvSGI
#define glColorTableParameterfvSGI(target, pname, params) glatter_glColorTableParameterfvSGI((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorTableParameterfvSGI, (GLenum target, GLenum pname, const GLfloat *params))
#ifndef glColorTableParameterivSGI
#define glColorTableParameterivSGI(target, pname, params) glatter_glColorTableParameterivSGI((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorTableParameterivSGI, (GLenum target, GLenum pname, const GLint *params))
#ifndef glColorTableSGI
#define glColorTableSGI(target, internalformat, width, format, type, table) glatter_glColorTableSGI((target), (internalformat), (width), (format), (type), (table))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorTableSGI, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table))
#ifndef glCopyColorTableSGI
#define glCopyColorTableSGI(target, internalformat, x, y, width) glatter_glCopyColorTableSGI((target), (internalformat), (x), (y), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyColorTableSGI, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#ifndef glGetColorTableParameterfvSGI
#define glGetColorTableParameterfvSGI(target, pname, params) glatter_glGetColorTableParameterfvSGI((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterfvSGI, (GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetColorTableParameterivSGI
#define glGetColorTableParameterivSGI(target, pname, params) glatter_glGetColorTableParameterivSGI((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterivSGI, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetColorTableSGI
#define glGetColorTableSGI(target, format, type, table) glatter_glGetColorTableSGI((target), (format), (type), (table))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableSGI, (GLenum target, GLenum format, GLenum type, void *table))
#endif // defined(GL_SGI_color_table)
#if defined(GL_SUNX_constant_data)
#ifndef glFinishTextureSUNX
#define glFinishTextureSUNX() glatter_glFinishTextureSUNX()
#endif
GLATTER_UBLOCK(void, APIENTRY, glFinishTextureSUNX, (void))
#endif // defined(GL_SUNX_constant_data)
#if defined(GL_SUN_global_alpha)
#ifndef glGlobalAlphaFactorbSUN
#define glGlobalAlphaFactorbSUN(factor) glatter_glGlobalAlphaFactorbSUN((factor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorbSUN, (GLbyte factor))
#ifndef glGlobalAlphaFactordSUN
#define glGlobalAlphaFactordSUN(factor) glatter_glGlobalAlphaFactordSUN((factor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactordSUN, (GLdouble factor))
#ifndef glGlobalAlphaFactorfSUN
#define glGlobalAlphaFactorfSUN(factor) glatter_glGlobalAlphaFactorfSUN((factor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorfSUN, (GLfloat factor))
#ifndef glGlobalAlphaFactoriSUN
#define glGlobalAlphaFactoriSUN(factor) glatter_glGlobalAlphaFactoriSUN((factor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactoriSUN, (GLint factor))
#ifndef glGlobalAlphaFactorsSUN
#define glGlobalAlphaFactorsSUN(factor) glatter_glGlobalAlphaFactorsSUN((factor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorsSUN, (GLshort factor))
#ifndef glGlobalAlphaFactorubSUN
#define glGlobalAlphaFactorubSUN(factor) glatter_glGlobalAlphaFactorubSUN((factor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorubSUN, (GLubyte factor))
#ifndef glGlobalAlphaFactoruiSUN
#define glGlobalAlphaFactoruiSUN(factor) glatter_glGlobalAlphaFactoruiSUN((factor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactoruiSUN, (GLuint factor))
#ifndef glGlobalAlphaFactorusSUN
#define glGlobalAlphaFactorusSUN(factor) glatter_glGlobalAlphaFactorusSUN((factor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorusSUN, (GLushort factor))
#endif // defined(GL_SUN_global_alpha)
#if defined(GL_SUN_mesh_array)
#ifndef glDrawMeshArraysSUN
#define glDrawMeshArraysSUN(mode, first, count, width) glatter_glDrawMeshArraysSUN((mode), (first), (count), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawMeshArraysSUN, (GLenum mode, GLint first, GLsizei count, GLsizei width))
#endif // defined(GL_SUN_mesh_array)
#if defined(GL_SUN_triangle_list)
#ifndef glReplacementCodePointerSUN
#define glReplacementCodePointerSUN(type, stride, pointer) glatter_glReplacementCodePointerSUN((type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodePointerSUN, (GLenum type, GLsizei stride, const void **pointer))
#ifndef glReplacementCodeubSUN
#define glReplacementCodeubSUN(code) glatter_glReplacementCodeubSUN((code))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeubSUN, (GLubyte code))
#ifndef glReplacementCodeubvSUN
#define glReplacementCodeubvSUN(code) glatter_glReplacementCodeubvSUN((code))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeubvSUN, (const GLubyte *code))
#ifndef glReplacementCodeuiSUN
#define glReplacementCodeuiSUN(code) glatter_glReplacementCodeuiSUN((code))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiSUN, (GLuint code))
#ifndef glReplacementCodeuivSUN
#define glReplacementCodeuivSUN(code) glatter_glReplacementCodeuivSUN((code))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuivSUN, (const GLuint *code))
#ifndef glReplacementCodeusSUN
#define glReplacementCodeusSUN(code) glatter_glReplacementCodeusSUN((code))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeusSUN, (GLushort code))
#ifndef glReplacementCodeusvSUN
#define glReplacementCodeusvSUN(code) glatter_glReplacementCodeusvSUN((code))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeusvSUN, (const GLushort *code))
#endif // defined(GL_SUN_triangle_list)
#if defined(GL_SUN_vertex)
#ifndef glColor3fVertex3fSUN
#define glColor3fVertex3fSUN(r, g, b, x, y, z) glatter_glColor3fVertex3fSUN((r), (g), (b), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor3fVertex3fSUN, (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z))
#ifndef glColor3fVertex3fvSUN
#define glColor3fVertex3fvSUN(c, v) glatter_glColor3fVertex3fvSUN((c), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor3fVertex3fvSUN, (const GLfloat *c, const GLfloat *v))
#ifndef glColor4fNormal3fVertex3fSUN
#define glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z) glatter_glColor4fNormal3fVertex3fSUN((r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor4fNormal3fVertex3fSUN, (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#ifndef glColor4fNormal3fVertex3fvSUN
#define glColor4fNormal3fVertex3fvSUN(c, n, v) glatter_glColor4fNormal3fVertex3fvSUN((c), (n), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor4fNormal3fVertex3fvSUN, (const GLfloat *c, const GLfloat *n, const GLfloat *v))
#ifndef glColor4ubVertex2fSUN
#define glColor4ubVertex2fSUN(r, g, b, a, x, y) glatter_glColor4ubVertex2fSUN((r), (g), (b), (a), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor4ubVertex2fSUN, (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y))
#ifndef glColor4ubVertex2fvSUN
#define glColor4ubVertex2fvSUN(c, v) glatter_glColor4ubVertex2fvSUN((c), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor4ubVertex2fvSUN, (const GLubyte *c, const GLfloat *v))
#ifndef glColor4ubVertex3fSUN
#define glColor4ubVertex3fSUN(r, g, b, a, x, y, z) glatter_glColor4ubVertex3fSUN((r), (g), (b), (a), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor4ubVertex3fSUN, (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z))
#ifndef glColor4ubVertex3fvSUN
#define glColor4ubVertex3fvSUN(c, v) glatter_glColor4ubVertex3fvSUN((c), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColor4ubVertex3fvSUN, (const GLubyte *c, const GLfloat *v))
#ifndef glNormal3fVertex3fSUN
#define glNormal3fVertex3fSUN(nx, ny, nz, x, y, z) glatter_glNormal3fVertex3fSUN((nx), (ny), (nz), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormal3fVertex3fSUN, (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#ifndef glNormal3fVertex3fvSUN
#define glNormal3fVertex3fvSUN(n, v) glatter_glNormal3fVertex3fvSUN((n), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormal3fVertex3fvSUN, (const GLfloat *n, const GLfloat *v))
#ifndef glReplacementCodeuiColor3fVertex3fSUN
#define glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z) glatter_glReplacementCodeuiColor3fVertex3fSUN((rc), (r), (g), (b), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor3fVertex3fSUN, (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z))
#ifndef glReplacementCodeuiColor3fVertex3fvSUN
#define glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v) glatter_glReplacementCodeuiColor3fVertex3fvSUN((rc), (c), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor3fVertex3fvSUN, (const GLuint *rc, const GLfloat *c, const GLfloat *v))
#ifndef glReplacementCodeuiColor4fNormal3fVertex3fSUN
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiColor4fNormal3fVertex3fSUN((rc), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor4fNormal3fVertex3fSUN, (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#ifndef glReplacementCodeuiColor4fNormal3fVertex3fvSUN
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v) glatter_glReplacementCodeuiColor4fNormal3fVertex3fvSUN((rc), (c), (n), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor4fNormal3fVertex3fvSUN, (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v))
#ifndef glReplacementCodeuiColor4ubVertex3fSUN
#define glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z) glatter_glReplacementCodeuiColor4ubVertex3fSUN((rc), (r), (g), (b), (a), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor4ubVertex3fSUN, (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z))
#ifndef glReplacementCodeuiColor4ubVertex3fvSUN
#define glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v) glatter_glReplacementCodeuiColor4ubVertex3fvSUN((rc), (c), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor4ubVertex3fvSUN, (const GLuint *rc, const GLubyte *c, const GLfloat *v))
#ifndef glReplacementCodeuiNormal3fVertex3fSUN
#define glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiNormal3fVertex3fSUN((rc), (nx), (ny), (nz), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiNormal3fVertex3fSUN, (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#ifndef glReplacementCodeuiNormal3fVertex3fvSUN
#define glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v) glatter_glReplacementCodeuiNormal3fVertex3fvSUN((rc), (n), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiNormal3fVertex3fvSUN, (const GLuint *rc, const GLfloat *n, const GLfloat *v))
#ifndef glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN((rc), (s), (t), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#ifndef glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v) glatter_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((rc), (tc), (c), (n), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v))
#ifndef glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN((rc), (s), (t), (nx), (ny), (nz), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#ifndef glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v) glatter_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((rc), (tc), (n), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v))
#ifndef glReplacementCodeuiTexCoord2fVertex3fSUN
#define glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z) glatter_glReplacementCodeuiTexCoord2fVertex3fSUN((rc), (s), (t), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fVertex3fSUN, (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z))
#ifndef glReplacementCodeuiTexCoord2fVertex3fvSUN
#define glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v) glatter_glReplacementCodeuiTexCoord2fVertex3fvSUN((rc), (tc), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fVertex3fvSUN, (const GLuint *rc, const GLfloat *tc, const GLfloat *v))
#ifndef glReplacementCodeuiVertex3fSUN
#define glReplacementCodeuiVertex3fSUN(rc, x, y, z) glatter_glReplacementCodeuiVertex3fSUN((rc), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiVertex3fSUN, (GLuint rc, GLfloat x, GLfloat y, GLfloat z))
#ifndef glReplacementCodeuiVertex3fvSUN
#define glReplacementCodeuiVertex3fvSUN(rc, v) glatter_glReplacementCodeuiVertex3fvSUN((rc), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiVertex3fvSUN, (const GLuint *rc, const GLfloat *v))
#ifndef glTexCoord2fColor3fVertex3fSUN
#define glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z) glatter_glTexCoord2fColor3fVertex3fSUN((s), (t), (r), (g), (b), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor3fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z))
#ifndef glTexCoord2fColor3fVertex3fvSUN
#define glTexCoord2fColor3fVertex3fvSUN(tc, c, v) glatter_glTexCoord2fColor3fVertex3fvSUN((tc), (c), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor3fVertex3fvSUN, (const GLfloat *tc, const GLfloat *c, const GLfloat *v))
#ifndef glTexCoord2fColor4fNormal3fVertex3fSUN
#define glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z) glatter_glTexCoord2fColor4fNormal3fVertex3fSUN((s), (t), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor4fNormal3fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#ifndef glTexCoord2fColor4fNormal3fVertex3fvSUN
#define glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v) glatter_glTexCoord2fColor4fNormal3fVertex3fvSUN((tc), (c), (n), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor4fNormal3fVertex3fvSUN, (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v))
#ifndef glTexCoord2fColor4ubVertex3fSUN
#define glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z) glatter_glTexCoord2fColor4ubVertex3fSUN((s), (t), (r), (g), (b), (a), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor4ubVertex3fSUN, (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z))
#ifndef glTexCoord2fColor4ubVertex3fvSUN
#define glTexCoord2fColor4ubVertex3fvSUN(tc, c, v) glatter_glTexCoord2fColor4ubVertex3fvSUN((tc), (c), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor4ubVertex3fvSUN, (const GLfloat *tc, const GLubyte *c, const GLfloat *v))
#ifndef glTexCoord2fNormal3fVertex3fSUN
#define glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z) glatter_glTexCoord2fNormal3fVertex3fSUN((s), (t), (nx), (ny), (nz), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fNormal3fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#ifndef glTexCoord2fNormal3fVertex3fvSUN
#define glTexCoord2fNormal3fVertex3fvSUN(tc, n, v) glatter_glTexCoord2fNormal3fVertex3fvSUN((tc), (n), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fNormal3fVertex3fvSUN, (const GLfloat *tc, const GLfloat *n, const GLfloat *v))
#ifndef glTexCoord2fVertex3fSUN
#define glTexCoord2fVertex3fSUN(s, t, x, y, z) glatter_glTexCoord2fVertex3fSUN((s), (t), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z))
#ifndef glTexCoord2fVertex3fvSUN
#define glTexCoord2fVertex3fvSUN(tc, v) glatter_glTexCoord2fVertex3fvSUN((tc), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fVertex3fvSUN, (const GLfloat *tc, const GLfloat *v))
#ifndef glTexCoord4fColor4fNormal3fVertex4fSUN
#define glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) glatter_glTexCoord4fColor4fNormal3fVertex4fSUN((s), (t), (p), (q), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4fColor4fNormal3fVertex4fSUN, (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#ifndef glTexCoord4fColor4fNormal3fVertex4fvSUN
#define glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v) glatter_glTexCoord4fColor4fNormal3fVertex4fvSUN((tc), (c), (n), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4fColor4fNormal3fVertex4fvSUN, (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v))
#ifndef glTexCoord4fVertex4fSUN
#define glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w) glatter_glTexCoord4fVertex4fSUN((s), (t), (p), (q), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4fVertex4fSUN, (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#ifndef glTexCoord4fVertex4fvSUN
#define glTexCoord4fVertex4fvSUN(tc, v) glatter_glTexCoord4fVertex4fvSUN((tc), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4fVertex4fvSUN, (const GLfloat *tc, const GLfloat *v))
#endif // defined(GL_SUN_vertex)
#if defined(GL_VERSION_1_2)
#ifndef glCopyTexSubImage3D
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#ifndef glDrawRangeElements
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements((mode), (start), (end), (count), (type), (indices))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#ifndef glTexImage3D
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexImage3D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#ifndef glTexSubImage3D
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_VERSION_1_2)
#if defined(GL_VERSION_1_3)
#ifndef glActiveTexture
#define glActiveTexture(texture) glatter_glActiveTexture((texture))
#endif
GLATTER_UBLOCK(void, APIENTRY, glActiveTexture, (GLenum texture))
#ifndef glClientActiveTexture
#define glClientActiveTexture(texture) glatter_glClientActiveTexture((texture))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClientActiveTexture, (GLenum texture))
#ifndef glCompressedTexImage1D
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D((target), (level), (internalformat), (width), (border), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data))
#ifndef glCompressedTexImage2D
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#ifndef glCompressedTexImage3D
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#ifndef glCompressedTexSubImage1D
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D((target), (level), (xoffset), (width), (format), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#ifndef glCompressedTexSubImage2D
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#ifndef glCompressedTexSubImage3D
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#ifndef glGetCompressedTexImage
#define glGetCompressedTexImage(target, level, img) glatter_glGetCompressedTexImage((target), (level), (img))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTexImage, (GLenum target, GLint level, void *img))
#ifndef glLoadTransposeMatrixd
#define glLoadTransposeMatrixd(m) glatter_glLoadTransposeMatrixd((m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixd, (const GLdouble *m))
#ifndef glLoadTransposeMatrixf
#define glLoadTransposeMatrixf(m) glatter_glLoadTransposeMatrixf((m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixf, (const GLfloat *m))
#ifndef glMultTransposeMatrixd
#define glMultTransposeMatrixd(m) glatter_glMultTransposeMatrixd((m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixd, (const GLdouble *m))
#ifndef glMultTransposeMatrixf
#define glMultTransposeMatrixf(m) glatter_glMultTransposeMatrixf((m))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixf, (const GLfloat *m))
#ifndef glMultiTexCoord1d
#define glMultiTexCoord1d(target, s) glatter_glMultiTexCoord1d((target), (s))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1d, (GLenum target, GLdouble s))
#ifndef glMultiTexCoord1dv
#define glMultiTexCoord1dv(target, v) glatter_glMultiTexCoord1dv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1dv, (GLenum target, const GLdouble *v))
#ifndef glMultiTexCoord1f
#define glMultiTexCoord1f(target, s) glatter_glMultiTexCoord1f((target), (s))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1f, (GLenum target, GLfloat s))
#ifndef glMultiTexCoord1fv
#define glMultiTexCoord1fv(target, v) glatter_glMultiTexCoord1fv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1fv, (GLenum target, const GLfloat *v))
#ifndef glMultiTexCoord1i
#define glMultiTexCoord1i(target, s) glatter_glMultiTexCoord1i((target), (s))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1i, (GLenum target, GLint s))
#ifndef glMultiTexCoord1iv
#define glMultiTexCoord1iv(target, v) glatter_glMultiTexCoord1iv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1iv, (GLenum target, const GLint *v))
#ifndef glMultiTexCoord1s
#define glMultiTexCoord1s(target, s) glatter_glMultiTexCoord1s((target), (s))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1s, (GLenum target, GLshort s))
#ifndef glMultiTexCoord1sv
#define glMultiTexCoord1sv(target, v) glatter_glMultiTexCoord1sv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1sv, (GLenum target, const GLshort *v))
#ifndef glMultiTexCoord2d
#define glMultiTexCoord2d(target, s, t) glatter_glMultiTexCoord2d((target), (s), (t))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2d, (GLenum target, GLdouble s, GLdouble t))
#ifndef glMultiTexCoord2dv
#define glMultiTexCoord2dv(target, v) glatter_glMultiTexCoord2dv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2dv, (GLenum target, const GLdouble *v))
#ifndef glMultiTexCoord2f
#define glMultiTexCoord2f(target, s, t) glatter_glMultiTexCoord2f((target), (s), (t))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2f, (GLenum target, GLfloat s, GLfloat t))
#ifndef glMultiTexCoord2fv
#define glMultiTexCoord2fv(target, v) glatter_glMultiTexCoord2fv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2fv, (GLenum target, const GLfloat *v))
#ifndef glMultiTexCoord2i
#define glMultiTexCoord2i(target, s, t) glatter_glMultiTexCoord2i((target), (s), (t))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2i, (GLenum target, GLint s, GLint t))
#ifndef glMultiTexCoord2iv
#define glMultiTexCoord2iv(target, v) glatter_glMultiTexCoord2iv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2iv, (GLenum target, const GLint *v))
#ifndef glMultiTexCoord2s
#define glMultiTexCoord2s(target, s, t) glatter_glMultiTexCoord2s((target), (s), (t))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2s, (GLenum target, GLshort s, GLshort t))
#ifndef glMultiTexCoord2sv
#define glMultiTexCoord2sv(target, v) glatter_glMultiTexCoord2sv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2sv, (GLenum target, const GLshort *v))
#ifndef glMultiTexCoord3d
#define glMultiTexCoord3d(target, s, t, r) glatter_glMultiTexCoord3d((target), (s), (t), (r))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3d, (GLenum target, GLdouble s, GLdouble t, GLdouble r))
#ifndef glMultiTexCoord3dv
#define glMultiTexCoord3dv(target, v) glatter_glMultiTexCoord3dv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3dv, (GLenum target, const GLdouble *v))
#ifndef glMultiTexCoord3f
#define glMultiTexCoord3f(target, s, t, r) glatter_glMultiTexCoord3f((target), (s), (t), (r))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3f, (GLenum target, GLfloat s, GLfloat t, GLfloat r))
#ifndef glMultiTexCoord3fv
#define glMultiTexCoord3fv(target, v) glatter_glMultiTexCoord3fv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3fv, (GLenum target, const GLfloat *v))
#ifndef glMultiTexCoord3i
#define glMultiTexCoord3i(target, s, t, r) glatter_glMultiTexCoord3i((target), (s), (t), (r))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3i, (GLenum target, GLint s, GLint t, GLint r))
#ifndef glMultiTexCoord3iv
#define glMultiTexCoord3iv(target, v) glatter_glMultiTexCoord3iv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3iv, (GLenum target, const GLint *v))
#ifndef glMultiTexCoord3s
#define glMultiTexCoord3s(target, s, t, r) glatter_glMultiTexCoord3s((target), (s), (t), (r))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3s, (GLenum target, GLshort s, GLshort t, GLshort r))
#ifndef glMultiTexCoord3sv
#define glMultiTexCoord3sv(target, v) glatter_glMultiTexCoord3sv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3sv, (GLenum target, const GLshort *v))
#ifndef glMultiTexCoord4d
#define glMultiTexCoord4d(target, s, t, r, q) glatter_glMultiTexCoord4d((target), (s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4d, (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q))
#ifndef glMultiTexCoord4dv
#define glMultiTexCoord4dv(target, v) glatter_glMultiTexCoord4dv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4dv, (GLenum target, const GLdouble *v))
#ifndef glMultiTexCoord4f
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f((target), (s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4f, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#ifndef glMultiTexCoord4fv
#define glMultiTexCoord4fv(target, v) glatter_glMultiTexCoord4fv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4fv, (GLenum target, const GLfloat *v))
#ifndef glMultiTexCoord4i
#define glMultiTexCoord4i(target, s, t, r, q) glatter_glMultiTexCoord4i((target), (s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4i, (GLenum target, GLint s, GLint t, GLint r, GLint q))
#ifndef glMultiTexCoord4iv
#define glMultiTexCoord4iv(target, v) glatter_glMultiTexCoord4iv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4iv, (GLenum target, const GLint *v))
#ifndef glMultiTexCoord4s
#define glMultiTexCoord4s(target, s, t, r, q) glatter_glMultiTexCoord4s((target), (s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4s, (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q))
#ifndef glMultiTexCoord4sv
#define glMultiTexCoord4sv(target, v) glatter_glMultiTexCoord4sv((target), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4sv, (GLenum target, const GLshort *v))
#ifndef glSampleCoverage
#define glSampleCoverage(value, invert) glatter_glSampleCoverage((value), (invert))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#endif // defined(GL_VERSION_1_3)
#if defined(GL_VERSION_1_4)
#ifndef glBlendColor
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#ifndef glBlendEquation
#define glBlendEquation(mode) glatter_glBlendEquation((mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendEquation, (GLenum mode))
#ifndef glBlendFuncSeparate
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#ifndef glFogCoordPointer
#define glFogCoordPointer(type, stride, pointer) glatter_glFogCoordPointer((type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogCoordPointer, (GLenum type, GLsizei stride, const void *pointer))
#ifndef glFogCoordd
#define glFogCoordd(coord) glatter_glFogCoordd((coord))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogCoordd, (GLdouble coord))
#ifndef glFogCoorddv
#define glFogCoorddv(coord) glatter_glFogCoorddv((coord))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogCoorddv, (const GLdouble *coord))
#ifndef glFogCoordf
#define glFogCoordf(coord) glatter_glFogCoordf((coord))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogCoordf, (GLfloat coord))
#ifndef glFogCoordfv
#define glFogCoordfv(coord) glatter_glFogCoordfv((coord))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFogCoordfv, (const GLfloat *coord))
#ifndef glMultiDrawArrays
#define glMultiDrawArrays(mode, first, count, drawcount) glatter_glMultiDrawArrays((mode), (first), (count), (drawcount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArrays, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount))
#ifndef glMultiDrawElements
#define glMultiDrawElements(mode, count, type, indices, drawcount) glatter_glMultiDrawElements((mode), (count), (type), (indices), (drawcount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElements, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount))
#ifndef glPointParameterf
#define glPointParameterf(pname, param) glatter_glPointParameterf((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPointParameterf, (GLenum pname, GLfloat param))
#ifndef glPointParameterfv
#define glPointParameterfv(pname, params) glatter_glPointParameterfv((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfv, (GLenum pname, const GLfloat *params))
#ifndef glPointParameteri
#define glPointParameteri(pname, param) glatter_glPointParameteri((pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPointParameteri, (GLenum pname, GLint param))
#ifndef glPointParameteriv
#define glPointParameteriv(pname, params) glatter_glPointParameteriv((pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPointParameteriv, (GLenum pname, const GLint *params))
#ifndef glSecondaryColor3b
#define glSecondaryColor3b(red, green, blue) glatter_glSecondaryColor3b((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3b, (GLbyte red, GLbyte green, GLbyte blue))
#ifndef glSecondaryColor3bv
#define glSecondaryColor3bv(v) glatter_glSecondaryColor3bv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3bv, (const GLbyte *v))
#ifndef glSecondaryColor3d
#define glSecondaryColor3d(red, green, blue) glatter_glSecondaryColor3d((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3d, (GLdouble red, GLdouble green, GLdouble blue))
#ifndef glSecondaryColor3dv
#define glSecondaryColor3dv(v) glatter_glSecondaryColor3dv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3dv, (const GLdouble *v))
#ifndef glSecondaryColor3f
#define glSecondaryColor3f(red, green, blue) glatter_glSecondaryColor3f((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3f, (GLfloat red, GLfloat green, GLfloat blue))
#ifndef glSecondaryColor3fv
#define glSecondaryColor3fv(v) glatter_glSecondaryColor3fv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3fv, (const GLfloat *v))
#ifndef glSecondaryColor3i
#define glSecondaryColor3i(red, green, blue) glatter_glSecondaryColor3i((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3i, (GLint red, GLint green, GLint blue))
#ifndef glSecondaryColor3iv
#define glSecondaryColor3iv(v) glatter_glSecondaryColor3iv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3iv, (const GLint *v))
#ifndef glSecondaryColor3s
#define glSecondaryColor3s(red, green, blue) glatter_glSecondaryColor3s((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3s, (GLshort red, GLshort green, GLshort blue))
#ifndef glSecondaryColor3sv
#define glSecondaryColor3sv(v) glatter_glSecondaryColor3sv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3sv, (const GLshort *v))
#ifndef glSecondaryColor3ub
#define glSecondaryColor3ub(red, green, blue) glatter_glSecondaryColor3ub((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ub, (GLubyte red, GLubyte green, GLubyte blue))
#ifndef glSecondaryColor3ubv
#define glSecondaryColor3ubv(v) glatter_glSecondaryColor3ubv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ubv, (const GLubyte *v))
#ifndef glSecondaryColor3ui
#define glSecondaryColor3ui(red, green, blue) glatter_glSecondaryColor3ui((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ui, (GLuint red, GLuint green, GLuint blue))
#ifndef glSecondaryColor3uiv
#define glSecondaryColor3uiv(v) glatter_glSecondaryColor3uiv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3uiv, (const GLuint *v))
#ifndef glSecondaryColor3us
#define glSecondaryColor3us(red, green, blue) glatter_glSecondaryColor3us((red), (green), (blue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3us, (GLushort red, GLushort green, GLushort blue))
#ifndef glSecondaryColor3usv
#define glSecondaryColor3usv(v) glatter_glSecondaryColor3usv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3usv, (const GLushort *v))
#ifndef glSecondaryColorPointer
#define glSecondaryColorPointer(size, type, stride, pointer) glatter_glSecondaryColorPointer((size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorPointer, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#ifndef glWindowPos2d
#define glWindowPos2d(x, y) glatter_glWindowPos2d((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2d, (GLdouble x, GLdouble y))
#ifndef glWindowPos2dv
#define glWindowPos2dv(v) glatter_glWindowPos2dv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dv, (const GLdouble *v))
#ifndef glWindowPos2f
#define glWindowPos2f(x, y) glatter_glWindowPos2f((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2f, (GLfloat x, GLfloat y))
#ifndef glWindowPos2fv
#define glWindowPos2fv(v) glatter_glWindowPos2fv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fv, (const GLfloat *v))
#ifndef glWindowPos2i
#define glWindowPos2i(x, y) glatter_glWindowPos2i((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2i, (GLint x, GLint y))
#ifndef glWindowPos2iv
#define glWindowPos2iv(v) glatter_glWindowPos2iv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2iv, (const GLint *v))
#ifndef glWindowPos2s
#define glWindowPos2s(x, y) glatter_glWindowPos2s((x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2s, (GLshort x, GLshort y))
#ifndef glWindowPos2sv
#define glWindowPos2sv(v) glatter_glWindowPos2sv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2sv, (const GLshort *v))
#ifndef glWindowPos3d
#define glWindowPos3d(x, y, z) glatter_glWindowPos3d((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3d, (GLdouble x, GLdouble y, GLdouble z))
#ifndef glWindowPos3dv
#define glWindowPos3dv(v) glatter_glWindowPos3dv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dv, (const GLdouble *v))
#ifndef glWindowPos3f
#define glWindowPos3f(x, y, z) glatter_glWindowPos3f((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3f, (GLfloat x, GLfloat y, GLfloat z))
#ifndef glWindowPos3fv
#define glWindowPos3fv(v) glatter_glWindowPos3fv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fv, (const GLfloat *v))
#ifndef glWindowPos3i
#define glWindowPos3i(x, y, z) glatter_glWindowPos3i((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3i, (GLint x, GLint y, GLint z))
#ifndef glWindowPos3iv
#define glWindowPos3iv(v) glatter_glWindowPos3iv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3iv, (const GLint *v))
#ifndef glWindowPos3s
#define glWindowPos3s(x, y, z) glatter_glWindowPos3s((x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3s, (GLshort x, GLshort y, GLshort z))
#ifndef glWindowPos3sv
#define glWindowPos3sv(v) glatter_glWindowPos3sv((v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3sv, (const GLshort *v))
#endif // defined(GL_VERSION_1_4)
#if defined(GL_VERSION_1_5)
#ifndef glBeginQuery
#define glBeginQuery(target, id) glatter_glBeginQuery((target), (id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginQuery, (GLenum target, GLuint id))
#ifndef glBindBuffer
#define glBindBuffer(target, buffer) glatter_glBindBuffer((target), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#ifndef glBufferData
#define glBufferData(target, size, data, usage) glatter_glBufferData((target), (size), (data), (usage))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#ifndef glBufferSubData
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData((target), (offset), (size), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#ifndef glDeleteBuffers
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers((n), (buffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#ifndef glDeleteQueries
#define glDeleteQueries(n, ids) glatter_glDeleteQueries((n), (ids))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteQueries, (GLsizei n, const GLuint *ids))
#ifndef glEndQuery
#define glEndQuery(target) glatter_glEndQuery((target))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndQuery, (GLenum target))
#ifndef glGenBuffers
#define glGenBuffers(n, buffers) glatter_glGenBuffers((n), (buffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#ifndef glGenQueries
#define glGenQueries(n, ids) glatter_glGenQueries((n), (ids))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenQueries, (GLsizei n, GLuint *ids))
#ifndef glGetBufferParameteriv
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetBufferPointerv
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetBufferPointerv, (GLenum target, GLenum pname, void **params))
#ifndef glGetBufferSubData
#define glGetBufferSubData(target, offset, size, data) glatter_glGetBufferSubData((target), (offset), (size), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, void *data))
#ifndef glGetQueryObjectiv
#define glGetQueryObjectiv(id, pname, params) glatter_glGetQueryObjectiv((id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectiv, (GLuint id, GLenum pname, GLint *params))
#ifndef glGetQueryObjectuiv
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv((id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectuiv, (GLuint id, GLenum pname, GLuint *params))
#ifndef glGetQueryiv
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryiv, (GLenum target, GLenum pname, GLint *params))
#ifndef glIsBuffer
#define glIsBuffer(buffer) glatter_glIsBuffer((buffer))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsBuffer, (GLuint buffer))
#ifndef glIsQuery
#define glIsQuery(id) glatter_glIsQuery((id))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsQuery, (GLuint id))
#ifndef glMapBuffer
#define glMapBuffer(target, access) glatter_glMapBuffer((target), (access))
#endif
GLATTER_UBLOCK(void *, APIENTRY, glMapBuffer, (GLenum target, GLenum access))
#ifndef glUnmapBuffer
#define glUnmapBuffer(target) glatter_glUnmapBuffer((target))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapBuffer, (GLenum target))
#endif // defined(GL_VERSION_1_5)
#if defined(GL_VERSION_2_0)
#ifndef glAttachShader
#define glAttachShader(program, shader) glatter_glAttachShader((program), (shader))
#endif
GLATTER_UBLOCK(void, APIENTRY, glAttachShader, (GLuint program, GLuint shader))
#ifndef glBindAttribLocation
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation((program), (index), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindAttribLocation, (GLuint program, GLuint index, const GLchar *name))
#ifndef glBlendEquationSeparate
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate((modeRGB), (modeAlpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha))
#ifndef glCompileShader
#define glCompileShader(shader) glatter_glCompileShader((shader))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompileShader, (GLuint shader))
#ifndef glCreateProgram
#define glCreateProgram() glatter_glCreateProgram()
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateProgram, (void))
#ifndef glCreateShader
#define glCreateShader(type) glatter_glCreateShader((type))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShader, (GLenum type))
#ifndef glDeleteProgram
#define glDeleteProgram(program) glatter_glDeleteProgram((program))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgram, (GLuint program))
#ifndef glDeleteShader
#define glDeleteShader(shader) glatter_glDeleteShader((shader))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteShader, (GLuint shader))
#ifndef glDetachShader
#define glDetachShader(program, shader) glatter_glDetachShader((program), (shader))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDetachShader, (GLuint program, GLuint shader))
#ifndef glDisableVertexAttribArray
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray((index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexAttribArray, (GLuint index))
#ifndef glDrawBuffers
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers((n), (bufs))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffers, (GLsizei n, const GLenum *bufs))
#ifndef glEnableVertexAttribArray
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray((index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexAttribArray, (GLuint index))
#ifndef glGetActiveAttrib
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib((program), (index), (bufSize), (length), (size), (type), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#ifndef glGetActiveUniform
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform((program), (index), (bufSize), (length), (size), (type), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#ifndef glGetAttachedShaders
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders((program), (maxCount), (count), (shaders))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders))
#ifndef glGetAttribLocation
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation((program), (name))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glGetAttribLocation, (GLuint program, const GLchar *name))
#ifndef glGetProgramInfoLog
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog((program), (bufSize), (length), (infoLog))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#ifndef glGetProgramiv
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv((program), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramiv, (GLuint program, GLenum pname, GLint *params))
#ifndef glGetShaderInfoLog
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog((shader), (bufSize), (length), (infoLog))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#ifndef glGetShaderSource
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource((shader), (bufSize), (length), (source))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source))
#ifndef glGetShaderiv
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv((shader), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetShaderiv, (GLuint shader, GLenum pname, GLint *params))
#ifndef glGetUniformLocation
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation((program), (name))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glGetUniformLocation, (GLuint program, const GLchar *name))
#ifndef glGetUniformfv
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv((program), (location), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUniformfv, (GLuint program, GLint location, GLfloat *params))
#ifndef glGetUniformiv
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv((program), (location), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUniformiv, (GLuint program, GLint location, GLint *params))
#ifndef glGetVertexAttribPointerv
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv((index), (pname), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void **pointer))
#ifndef glGetVertexAttribdv
#define glGetVertexAttribdv(index, pname, params) glatter_glGetVertexAttribdv((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribdv, (GLuint index, GLenum pname, GLdouble *params))
#ifndef glGetVertexAttribfv
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat *params))
#ifndef glGetVertexAttribiv
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint *params))
#ifndef glIsProgram
#define glIsProgram(program) glatter_glIsProgram((program))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgram, (GLuint program))
#ifndef glIsShader
#define glIsShader(shader) glatter_glIsShader((shader))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsShader, (GLuint shader))
#ifndef glLinkProgram
#define glLinkProgram(program) glatter_glLinkProgram((program))
#endif
GLATTER_UBLOCK(void, APIENTRY, glLinkProgram, (GLuint program))
#ifndef glShaderSource
#define glShaderSource(shader, count, string, length) glatter_glShaderSource((shader), (count), (string), (length))
#endif
GLATTER_UBLOCK(void, APIENTRY, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length))
#ifndef glStencilFuncSeparate
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate((face), (func), (ref), (mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask))
#ifndef glStencilMaskSeparate
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate((face), (mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilMaskSeparate, (GLenum face, GLuint mask))
#ifndef glStencilOpSeparate
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate((face), (sfail), (dpfail), (dppass))
#endif
GLATTER_UBLOCK(void, APIENTRY, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#ifndef glUniform1f
#define glUniform1f(location, v0) glatter_glUniform1f((location), (v0))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1f, (GLint location, GLfloat v0))
#ifndef glUniform1fv
#define glUniform1fv(location, count, value) glatter_glUniform1fv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1fv, (GLint location, GLsizei count, const GLfloat *value))
#ifndef glUniform1i
#define glUniform1i(location, v0) glatter_glUniform1i((location), (v0))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1i, (GLint location, GLint v0))
#ifndef glUniform1iv
#define glUniform1iv(location, count, value) glatter_glUniform1iv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1iv, (GLint location, GLsizei count, const GLint *value))
#ifndef glUniform2f
#define glUniform2f(location, v0, v1) glatter_glUniform2f((location), (v0), (v1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2f, (GLint location, GLfloat v0, GLfloat v1))
#ifndef glUniform2fv
#define glUniform2fv(location, count, value) glatter_glUniform2fv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2fv, (GLint location, GLsizei count, const GLfloat *value))
#ifndef glUniform2i
#define glUniform2i(location, v0, v1) glatter_glUniform2i((location), (v0), (v1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2i, (GLint location, GLint v0, GLint v1))
#ifndef glUniform2iv
#define glUniform2iv(location, count, value) glatter_glUniform2iv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2iv, (GLint location, GLsizei count, const GLint *value))
#ifndef glUniform3f
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f((location), (v0), (v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#ifndef glUniform3fv
#define glUniform3fv(location, count, value) glatter_glUniform3fv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3fv, (GLint location, GLsizei count, const GLfloat *value))
#ifndef glUniform3i
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i((location), (v0), (v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2))
#ifndef glUniform3iv
#define glUniform3iv(location, count, value) glatter_glUniform3iv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3iv, (GLint location, GLsizei count, const GLint *value))
#ifndef glUniform4f
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f((location), (v0), (v1), (v2), (v3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#ifndef glUniform4fv
#define glUniform4fv(location, count, value) glatter_glUniform4fv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4fv, (GLint location, GLsizei count, const GLfloat *value))
#ifndef glUniform4i
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i((location), (v0), (v1), (v2), (v3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#ifndef glUniform4iv
#define glUniform4iv(location, count, value) glatter_glUniform4iv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4iv, (GLint location, GLsizei count, const GLint *value))
#ifndef glUniformMatrix2fv
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glUniformMatrix3fv
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glUniformMatrix4fv
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glUseProgram
#define glUseProgram(program) glatter_glUseProgram((program))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUseProgram, (GLuint program))
#ifndef glValidateProgram
#define glValidateProgram(program) glatter_glValidateProgram((program))
#endif
GLATTER_UBLOCK(void, APIENTRY, glValidateProgram, (GLuint program))
#ifndef glVertexAttrib1d
#define glVertexAttrib1d(index, x) glatter_glVertexAttrib1d((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1d, (GLuint index, GLdouble x))
#ifndef glVertexAttrib1dv
#define glVertexAttrib1dv(index, v) glatter_glVertexAttrib1dv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dv, (GLuint index, const GLdouble *v))
#ifndef glVertexAttrib1f
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1f, (GLuint index, GLfloat x))
#ifndef glVertexAttrib1fv
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fv, (GLuint index, const GLfloat *v))
#ifndef glVertexAttrib1s
#define glVertexAttrib1s(index, x) glatter_glVertexAttrib1s((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1s, (GLuint index, GLshort x))
#ifndef glVertexAttrib1sv
#define glVertexAttrib1sv(index, v) glatter_glVertexAttrib1sv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1sv, (GLuint index, const GLshort *v))
#ifndef glVertexAttrib2d
#define glVertexAttrib2d(index, x, y) glatter_glVertexAttrib2d((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2d, (GLuint index, GLdouble x, GLdouble y))
#ifndef glVertexAttrib2dv
#define glVertexAttrib2dv(index, v) glatter_glVertexAttrib2dv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dv, (GLuint index, const GLdouble *v))
#ifndef glVertexAttrib2f
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y))
#ifndef glVertexAttrib2fv
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fv, (GLuint index, const GLfloat *v))
#ifndef glVertexAttrib2s
#define glVertexAttrib2s(index, x, y) glatter_glVertexAttrib2s((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2s, (GLuint index, GLshort x, GLshort y))
#ifndef glVertexAttrib2sv
#define glVertexAttrib2sv(index, v) glatter_glVertexAttrib2sv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2sv, (GLuint index, const GLshort *v))
#ifndef glVertexAttrib3d
#define glVertexAttrib3d(index, x, y, z) glatter_glVertexAttrib3d((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3d, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#ifndef glVertexAttrib3dv
#define glVertexAttrib3dv(index, v) glatter_glVertexAttrib3dv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dv, (GLuint index, const GLdouble *v))
#ifndef glVertexAttrib3f
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#ifndef glVertexAttrib3fv
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fv, (GLuint index, const GLfloat *v))
#ifndef glVertexAttrib3s
#define glVertexAttrib3s(index, x, y, z) glatter_glVertexAttrib3s((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3s, (GLuint index, GLshort x, GLshort y, GLshort z))
#ifndef glVertexAttrib3sv
#define glVertexAttrib3sv(index, v) glatter_glVertexAttrib3sv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3sv, (GLuint index, const GLshort *v))
#ifndef glVertexAttrib4Nbv
#define glVertexAttrib4Nbv(index, v) glatter_glVertexAttrib4Nbv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nbv, (GLuint index, const GLbyte *v))
#ifndef glVertexAttrib4Niv
#define glVertexAttrib4Niv(index, v) glatter_glVertexAttrib4Niv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Niv, (GLuint index, const GLint *v))
#ifndef glVertexAttrib4Nsv
#define glVertexAttrib4Nsv(index, v) glatter_glVertexAttrib4Nsv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nsv, (GLuint index, const GLshort *v))
#ifndef glVertexAttrib4Nub
#define glVertexAttrib4Nub(index, x, y, z, w) glatter_glVertexAttrib4Nub((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nub, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w))
#ifndef glVertexAttrib4Nubv
#define glVertexAttrib4Nubv(index, v) glatter_glVertexAttrib4Nubv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nubv, (GLuint index, const GLubyte *v))
#ifndef glVertexAttrib4Nuiv
#define glVertexAttrib4Nuiv(index, v) glatter_glVertexAttrib4Nuiv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nuiv, (GLuint index, const GLuint *v))
#ifndef glVertexAttrib4Nusv
#define glVertexAttrib4Nusv(index, v) glatter_glVertexAttrib4Nusv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nusv, (GLuint index, const GLushort *v))
#ifndef glVertexAttrib4bv
#define glVertexAttrib4bv(index, v) glatter_glVertexAttrib4bv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4bv, (GLuint index, const GLbyte *v))
#ifndef glVertexAttrib4d
#define glVertexAttrib4d(index, x, y, z, w) glatter_glVertexAttrib4d((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4d, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#ifndef glVertexAttrib4dv
#define glVertexAttrib4dv(index, v) glatter_glVertexAttrib4dv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dv, (GLuint index, const GLdouble *v))
#ifndef glVertexAttrib4f
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#ifndef glVertexAttrib4fv
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fv, (GLuint index, const GLfloat *v))
#ifndef glVertexAttrib4iv
#define glVertexAttrib4iv(index, v) glatter_glVertexAttrib4iv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4iv, (GLuint index, const GLint *v))
#ifndef glVertexAttrib4s
#define glVertexAttrib4s(index, x, y, z, w) glatter_glVertexAttrib4s((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4s, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w))
#ifndef glVertexAttrib4sv
#define glVertexAttrib4sv(index, v) glatter_glVertexAttrib4sv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4sv, (GLuint index, const GLshort *v))
#ifndef glVertexAttrib4ubv
#define glVertexAttrib4ubv(index, v) glatter_glVertexAttrib4ubv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubv, (GLuint index, const GLubyte *v))
#ifndef glVertexAttrib4uiv
#define glVertexAttrib4uiv(index, v) glatter_glVertexAttrib4uiv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4uiv, (GLuint index, const GLuint *v))
#ifndef glVertexAttrib4usv
#define glVertexAttrib4usv(index, v) glatter_glVertexAttrib4usv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4usv, (GLuint index, const GLushort *v))
#ifndef glVertexAttribPointer
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer((index), (size), (type), (normalized), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#endif // defined(GL_VERSION_2_0)
#if defined(GL_VERSION_2_1)
#ifndef glUniformMatrix2x3fv
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glUniformMatrix2x4fv
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glUniformMatrix3x2fv
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glUniformMatrix3x4fv
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glUniformMatrix4x2fv
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glUniformMatrix4x3fv
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#endif // defined(GL_VERSION_2_1)
#if defined(GL_VERSION_3_0)
#ifndef glBeginConditionalRender
#define glBeginConditionalRender(id, mode) glatter_glBeginConditionalRender((id), (mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginConditionalRender, (GLuint id, GLenum mode))
#ifndef glBeginTransformFeedback
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback((primitiveMode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginTransformFeedback, (GLenum primitiveMode))
#ifndef glBindBufferBase
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase((target), (index), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindBufferBase, (GLenum target, GLuint index, GLuint buffer))
#ifndef glBindBufferRange
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange((target), (index), (buffer), (offset), (size))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindBufferRange, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#ifndef glBindFragDataLocation
#define glBindFragDataLocation(program, color, name) glatter_glBindFragDataLocation((program), (color), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocation, (GLuint program, GLuint color, const GLchar *name))
#ifndef glBindFramebuffer
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer((target), (framebuffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindFramebuffer, (GLenum target, GLuint framebuffer))
#ifndef glBindRenderbuffer
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer((target), (renderbuffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindRenderbuffer, (GLenum target, GLuint renderbuffer))
#ifndef glBindVertexArray
#define glBindVertexArray(array) glatter_glBindVertexArray((array))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindVertexArray, (GLuint array))
#ifndef glBlitFramebuffer
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlitFramebuffer, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#ifndef glCheckFramebufferStatus
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus((target))
#endif
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckFramebufferStatus, (GLenum target))
#ifndef glClampColor
#define glClampColor(target, clamp) glatter_glClampColor((target), (clamp))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClampColor, (GLenum target, GLenum clamp))
#ifndef glClearBufferfi
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi((buffer), (drawbuffer), (depth), (stencil))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearBufferfi, (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#ifndef glClearBufferfv
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv((buffer), (drawbuffer), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearBufferfv, (GLenum buffer, GLint drawbuffer, const GLfloat *value))
#ifndef glClearBufferiv
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv((buffer), (drawbuffer), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearBufferiv, (GLenum buffer, GLint drawbuffer, const GLint *value))
#ifndef glClearBufferuiv
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv((buffer), (drawbuffer), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearBufferuiv, (GLenum buffer, GLint drawbuffer, const GLuint *value))
#ifndef glColorMaski
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski((index), (r), (g), (b), (a))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorMaski, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#ifndef glDeleteFramebuffers
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers((n), (framebuffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteFramebuffers, (GLsizei n, const GLuint *framebuffers))
#ifndef glDeleteRenderbuffers
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers((n), (renderbuffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteRenderbuffers, (GLsizei n, const GLuint *renderbuffers))
#ifndef glDeleteVertexArrays
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays((n), (arrays))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteVertexArrays, (GLsizei n, const GLuint *arrays))
#ifndef glDisablei
#define glDisablei(target, index) glatter_glDisablei((target), (index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDisablei, (GLenum target, GLuint index))
#ifndef glEnablei
#define glEnablei(target, index) glatter_glEnablei((target), (index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEnablei, (GLenum target, GLuint index))
#ifndef glEndConditionalRender
#define glEndConditionalRender() glatter_glEndConditionalRender()
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndConditionalRender, (void))
#ifndef glEndTransformFeedback
#define glEndTransformFeedback() glatter_glEndTransformFeedback()
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndTransformFeedback, (void))
#ifndef glFlushMappedBufferRange
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange((target), (offset), (length))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length))
#ifndef glFramebufferRenderbuffer
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer((target), (attachment), (renderbuffertarget), (renderbuffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#ifndef glFramebufferTexture1D
#define glFramebufferTexture1D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1D((target), (attachment), (textarget), (texture), (level))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture1D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#ifndef glFramebufferTexture2D
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D((target), (attachment), (textarget), (texture), (level))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#ifndef glFramebufferTexture3D
#define glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3D((target), (attachment), (textarget), (texture), (level), (zoffset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture3D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#ifndef glFramebufferTextureLayer
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer((target), (attachment), (texture), (level), (layer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureLayer, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#ifndef glGenFramebuffers
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers((n), (framebuffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenFramebuffers, (GLsizei n, GLuint *framebuffers))
#ifndef glGenRenderbuffers
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers((n), (renderbuffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#ifndef glGenVertexArrays
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays((n), (arrays))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenVertexArrays, (GLsizei n, GLuint *arrays))
#ifndef glGenerateMipmap
#define glGenerateMipmap(target) glatter_glGenerateMipmap((target))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenerateMipmap, (GLenum target))
#ifndef glGetBooleani_v
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v((target), (index), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetBooleani_v, (GLenum target, GLuint index, GLboolean *data))
#ifndef glGetFragDataLocation
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation((program), (name))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataLocation, (GLuint program, const GLchar *name))
#ifndef glGetFramebufferAttachmentParameteriv
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv((target), (attachment), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#ifndef glGetIntegeri_v
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v((target), (index), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetIntegeri_v, (GLenum target, GLuint index, GLint *data))
#ifndef glGetRenderbufferParameteriv
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetStringi
#define glGetStringi(name, index) glatter_glGetStringi((name), (index))
#endif
GLATTER_UBLOCK(const GLubyte *, APIENTRY, glGetStringi, (GLenum name, GLuint index))
#ifndef glGetTexParameterIiv
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIiv, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetTexParameterIuiv
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIuiv, (GLenum target, GLenum pname, GLuint *params))
#ifndef glGetTransformFeedbackVarying
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying((program), (index), (bufSize), (length), (size), (type), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackVarying, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#ifndef glGetUniformuiv
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv((program), (location), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUniformuiv, (GLuint program, GLint location, GLuint *params))
#ifndef glGetVertexAttribIiv
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIiv, (GLuint index, GLenum pname, GLint *params))
#ifndef glGetVertexAttribIuiv
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIuiv, (GLuint index, GLenum pname, GLuint *params))
#ifndef glIsEnabledi
#define glIsEnabledi(target, index) glatter_glIsEnabledi((target), (index))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabledi, (GLenum target, GLuint index))
#ifndef glIsFramebuffer
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer((framebuffer))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFramebuffer, (GLuint framebuffer))
#ifndef glIsRenderbuffer
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer((renderbuffer))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsRenderbuffer, (GLuint renderbuffer))
#ifndef glIsVertexArray
#define glIsVertexArray(array) glatter_glIsVertexArray((array))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVertexArray, (GLuint array))
#ifndef glMapBufferRange
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange((target), (offset), (length), (access))
#endif
GLATTER_UBLOCK(void *, APIENTRY, glMapBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#ifndef glRenderbufferStorage
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage((target), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glRenderbufferStorageMultisample
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample((target), (samples), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glTexParameterIiv
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIiv, (GLenum target, GLenum pname, const GLint *params))
#ifndef glTexParameterIuiv
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIuiv, (GLenum target, GLenum pname, const GLuint *params))
#ifndef glTransformFeedbackVaryings
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings((program), (count), (varyings), (bufferMode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackVaryings, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#ifndef glUniform1ui
#define glUniform1ui(location, v0) glatter_glUniform1ui((location), (v0))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui, (GLint location, GLuint v0))
#ifndef glUniform1uiv
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1uiv, (GLint location, GLsizei count, const GLuint *value))
#ifndef glUniform2ui
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui((location), (v0), (v1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui, (GLint location, GLuint v0, GLuint v1))
#ifndef glUniform2uiv
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2uiv, (GLint location, GLsizei count, const GLuint *value))
#ifndef glUniform3ui
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui((location), (v0), (v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#ifndef glUniform3uiv
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3uiv, (GLint location, GLsizei count, const GLuint *value))
#ifndef glUniform4ui
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui((location), (v0), (v1), (v2), (v3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#ifndef glUniform4uiv
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4uiv, (GLint location, GLsizei count, const GLuint *value))
#ifndef glVertexAttribI1i
#define glVertexAttribI1i(index, x) glatter_glVertexAttribI1i((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1i, (GLuint index, GLint x))
#ifndef glVertexAttribI1iv
#define glVertexAttribI1iv(index, v) glatter_glVertexAttribI1iv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1iv, (GLuint index, const GLint *v))
#ifndef glVertexAttribI1ui
#define glVertexAttribI1ui(index, x) glatter_glVertexAttribI1ui((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1ui, (GLuint index, GLuint x))
#ifndef glVertexAttribI1uiv
#define glVertexAttribI1uiv(index, v) glatter_glVertexAttribI1uiv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1uiv, (GLuint index, const GLuint *v))
#ifndef glVertexAttribI2i
#define glVertexAttribI2i(index, x, y) glatter_glVertexAttribI2i((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2i, (GLuint index, GLint x, GLint y))
#ifndef glVertexAttribI2iv
#define glVertexAttribI2iv(index, v) glatter_glVertexAttribI2iv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2iv, (GLuint index, const GLint *v))
#ifndef glVertexAttribI2ui
#define glVertexAttribI2ui(index, x, y) glatter_glVertexAttribI2ui((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2ui, (GLuint index, GLuint x, GLuint y))
#ifndef glVertexAttribI2uiv
#define glVertexAttribI2uiv(index, v) glatter_glVertexAttribI2uiv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2uiv, (GLuint index, const GLuint *v))
#ifndef glVertexAttribI3i
#define glVertexAttribI3i(index, x, y, z) glatter_glVertexAttribI3i((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3i, (GLuint index, GLint x, GLint y, GLint z))
#ifndef glVertexAttribI3iv
#define glVertexAttribI3iv(index, v) glatter_glVertexAttribI3iv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3iv, (GLuint index, const GLint *v))
#ifndef glVertexAttribI3ui
#define glVertexAttribI3ui(index, x, y, z) glatter_glVertexAttribI3ui((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3ui, (GLuint index, GLuint x, GLuint y, GLuint z))
#ifndef glVertexAttribI3uiv
#define glVertexAttribI3uiv(index, v) glatter_glVertexAttribI3uiv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3uiv, (GLuint index, const GLuint *v))
#ifndef glVertexAttribI4bv
#define glVertexAttribI4bv(index, v) glatter_glVertexAttribI4bv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4bv, (GLuint index, const GLbyte *v))
#ifndef glVertexAttribI4i
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4i, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#ifndef glVertexAttribI4iv
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4iv, (GLuint index, const GLint *v))
#ifndef glVertexAttribI4sv
#define glVertexAttribI4sv(index, v) glatter_glVertexAttribI4sv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4sv, (GLuint index, const GLshort *v))
#ifndef glVertexAttribI4ubv
#define glVertexAttribI4ubv(index, v) glatter_glVertexAttribI4ubv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ubv, (GLuint index, const GLubyte *v))
#ifndef glVertexAttribI4ui
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ui, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#ifndef glVertexAttribI4uiv
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4uiv, (GLuint index, const GLuint *v))
#ifndef glVertexAttribI4usv
#define glVertexAttribI4usv(index, v) glatter_glVertexAttribI4usv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4usv, (GLuint index, const GLushort *v))
#ifndef glVertexAttribIPointer
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer((index), (size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_VERSION_3_0)
#if defined(GL_VERSION_3_1)
#ifndef glCopyBufferSubData
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData((readTarget), (writeTarget), (readOffset), (writeOffset), (size))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyBufferSubData, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#ifndef glDrawArraysInstanced
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced((mode), (first), (count), (instancecount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstanced, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount))
#ifndef glDrawElementsInstanced
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced((mode), (count), (type), (indices), (instancecount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstanced, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount))
#ifndef glGetActiveUniformBlockName
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformBlockName, (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName))
#ifndef glGetActiveUniformBlockiv
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv((program), (uniformBlockIndex), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformBlockiv, (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params))
#ifndef glGetActiveUniformName
#define glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) glatter_glGetActiveUniformName((program), (uniformIndex), (bufSize), (length), (uniformName))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformName, (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName))
#ifndef glGetActiveUniformsiv
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv((program), (uniformCount), (uniformIndices), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformsiv, (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params))
#ifndef glGetUniformBlockIndex
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex((program), (uniformBlockName))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glGetUniformBlockIndex, (GLuint program, const GLchar *uniformBlockName))
#ifndef glGetUniformIndices
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices((program), (uniformCount), (uniformNames), (uniformIndices))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUniformIndices, (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices))
#ifndef glPrimitiveRestartIndex
#define glPrimitiveRestartIndex(index) glatter_glPrimitiveRestartIndex((index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveRestartIndex, (GLuint index))
#ifndef glTexBuffer
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer((target), (internalformat), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexBuffer, (GLenum target, GLenum internalformat, GLuint buffer))
#ifndef glUniformBlockBinding
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding((program), (uniformBlockIndex), (uniformBlockBinding))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformBlockBinding, (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding))
#endif // defined(GL_VERSION_3_1)
#if defined(GL_VERSION_3_2)
#ifndef glClientWaitSync
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync((sync), (flags), (timeout))
#endif
GLATTER_UBLOCK(GLenum, APIENTRY, glClientWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#ifndef glDeleteSync
#define glDeleteSync(sync) glatter_glDeleteSync((sync))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteSync, (GLsync sync))
#ifndef glDrawElementsBaseVertex
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex((mode), (count), (type), (indices), (basevertex))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#ifndef glDrawElementsInstancedBaseVertex
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex((mode), (count), (type), (indices), (instancecount), (basevertex))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex))
#ifndef glDrawRangeElementsBaseVertex
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex((mode), (start), (end), (count), (type), (indices), (basevertex))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementsBaseVertex, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#ifndef glFenceSync
#define glFenceSync(condition, flags) glatter_glFenceSync((condition), (flags))
#endif
GLATTER_UBLOCK(GLsync, APIENTRY, glFenceSync, (GLenum condition, GLbitfield flags))
#ifndef glFramebufferTexture
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture((target), (attachment), (texture), (level))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#ifndef glGetBufferParameteri64v
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameteri64v, (GLenum target, GLenum pname, GLint64 *params))
#ifndef glGetInteger64i_v
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v((target), (index), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetInteger64i_v, (GLenum target, GLuint index, GLint64 *data))
#ifndef glGetInteger64v
#define glGetInteger64v(pname, data) glatter_glGetInteger64v((pname), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetInteger64v, (GLenum pname, GLint64 *data))
#ifndef glGetMultisamplefv
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv((pname), (index), (val))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetMultisamplefv, (GLenum pname, GLuint index, GLfloat *val))
#ifndef glGetSynciv
#define glGetSynciv(sync, pname, count, length, values) glatter_glGetSynciv((sync), (pname), (count), (length), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetSynciv, (GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values))
#ifndef glIsSync
#define glIsSync(sync) glatter_glIsSync((sync))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsSync, (GLsync sync))
#ifndef glMultiDrawElementsBaseVertex
#define glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex) glatter_glMultiDrawElementsBaseVertex((mode), (count), (type), (indices), (drawcount), (basevertex))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsBaseVertex, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex))
#ifndef glProvokingVertex
#define glProvokingVertex(mode) glatter_glProvokingVertex((mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProvokingVertex, (GLenum mode))
#ifndef glSampleMaski
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski((maskNumber), (mask))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSampleMaski, (GLuint maskNumber, GLbitfield mask))
#ifndef glTexImage2DMultisample
#define glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexImage2DMultisample((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexImage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#ifndef glTexImage3DMultisample
#define glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexImage3DMultisample((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexImage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#ifndef glWaitSync
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync((sync), (flags), (timeout))
#endif
GLATTER_UBLOCK(void, APIENTRY, glWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_VERSION_3_2)
#if defined(GL_VERSION_3_3)
#ifndef glBindFragDataLocationIndexed
#define glBindFragDataLocationIndexed(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexed((program), (colorNumber), (index), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocationIndexed, (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name))
#ifndef glBindSampler
#define glBindSampler(unit, sampler) glatter_glBindSampler((unit), (sampler))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindSampler, (GLuint unit, GLuint sampler))
#ifndef glColorP3ui
#define glColorP3ui(type, color) glatter_glColorP3ui((type), (color))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorP3ui, (GLenum type, GLuint color))
#ifndef glColorP3uiv
#define glColorP3uiv(type, color) glatter_glColorP3uiv((type), (color))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorP3uiv, (GLenum type, const GLuint *color))
#ifndef glColorP4ui
#define glColorP4ui(type, color) glatter_glColorP4ui((type), (color))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorP4ui, (GLenum type, GLuint color))
#ifndef glColorP4uiv
#define glColorP4uiv(type, color) glatter_glColorP4uiv((type), (color))
#endif
GLATTER_UBLOCK(void, APIENTRY, glColorP4uiv, (GLenum type, const GLuint *color))
#ifndef glDeleteSamplers
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers((count), (samplers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteSamplers, (GLsizei count, const GLuint *samplers))
#ifndef glGenSamplers
#define glGenSamplers(count, samplers) glatter_glGenSamplers((count), (samplers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenSamplers, (GLsizei count, GLuint *samplers))
#ifndef glGetFragDataIndex
#define glGetFragDataIndex(program, name) glatter_glGetFragDataIndex((program), (name))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataIndex, (GLuint program, const GLchar *name))
#ifndef glGetQueryObjecti64v
#define glGetQueryObjecti64v(id, pname, params) glatter_glGetQueryObjecti64v((id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjecti64v, (GLuint id, GLenum pname, GLint64 *params))
#ifndef glGetQueryObjectui64v
#define glGetQueryObjectui64v(id, pname, params) glatter_glGetQueryObjectui64v((id), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectui64v, (GLuint id, GLenum pname, GLuint64 *params))
#ifndef glGetSamplerParameterIiv
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv((sampler), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterIiv, (GLuint sampler, GLenum pname, GLint *params))
#ifndef glGetSamplerParameterIuiv
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv((sampler), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterIuiv, (GLuint sampler, GLenum pname, GLuint *params))
#ifndef glGetSamplerParameterfv
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv((sampler), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterfv, (GLuint sampler, GLenum pname, GLfloat *params))
#ifndef glGetSamplerParameteriv
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv((sampler), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameteriv, (GLuint sampler, GLenum pname, GLint *params))
#ifndef glIsSampler
#define glIsSampler(sampler) glatter_glIsSampler((sampler))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsSampler, (GLuint sampler))
#ifndef glMultiTexCoordP1ui
#define glMultiTexCoordP1ui(texture, type, coords) glatter_glMultiTexCoordP1ui((texture), (type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP1ui, (GLenum texture, GLenum type, GLuint coords))
#ifndef glMultiTexCoordP1uiv
#define glMultiTexCoordP1uiv(texture, type, coords) glatter_glMultiTexCoordP1uiv((texture), (type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP1uiv, (GLenum texture, GLenum type, const GLuint *coords))
#ifndef glMultiTexCoordP2ui
#define glMultiTexCoordP2ui(texture, type, coords) glatter_glMultiTexCoordP2ui((texture), (type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP2ui, (GLenum texture, GLenum type, GLuint coords))
#ifndef glMultiTexCoordP2uiv
#define glMultiTexCoordP2uiv(texture, type, coords) glatter_glMultiTexCoordP2uiv((texture), (type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP2uiv, (GLenum texture, GLenum type, const GLuint *coords))
#ifndef glMultiTexCoordP3ui
#define glMultiTexCoordP3ui(texture, type, coords) glatter_glMultiTexCoordP3ui((texture), (type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP3ui, (GLenum texture, GLenum type, GLuint coords))
#ifndef glMultiTexCoordP3uiv
#define glMultiTexCoordP3uiv(texture, type, coords) glatter_glMultiTexCoordP3uiv((texture), (type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP3uiv, (GLenum texture, GLenum type, const GLuint *coords))
#ifndef glMultiTexCoordP4ui
#define glMultiTexCoordP4ui(texture, type, coords) glatter_glMultiTexCoordP4ui((texture), (type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP4ui, (GLenum texture, GLenum type, GLuint coords))
#ifndef glMultiTexCoordP4uiv
#define glMultiTexCoordP4uiv(texture, type, coords) glatter_glMultiTexCoordP4uiv((texture), (type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP4uiv, (GLenum texture, GLenum type, const GLuint *coords))
#ifndef glNormalP3ui
#define glNormalP3ui(type, coords) glatter_glNormalP3ui((type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalP3ui, (GLenum type, GLuint coords))
#ifndef glNormalP3uiv
#define glNormalP3uiv(type, coords) glatter_glNormalP3uiv((type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNormalP3uiv, (GLenum type, const GLuint *coords))
#ifndef glQueryCounter
#define glQueryCounter(id, target) glatter_glQueryCounter((id), (target))
#endif
GLATTER_UBLOCK(void, APIENTRY, glQueryCounter, (GLuint id, GLenum target))
#ifndef glSamplerParameterIiv
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv((sampler), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterIiv, (GLuint sampler, GLenum pname, const GLint *param))
#ifndef glSamplerParameterIuiv
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv((sampler), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterIuiv, (GLuint sampler, GLenum pname, const GLuint *param))
#ifndef glSamplerParameterf
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf((sampler), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterf, (GLuint sampler, GLenum pname, GLfloat param))
#ifndef glSamplerParameterfv
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv((sampler), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterfv, (GLuint sampler, GLenum pname, const GLfloat *param))
#ifndef glSamplerParameteri
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri((sampler), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameteri, (GLuint sampler, GLenum pname, GLint param))
#ifndef glSamplerParameteriv
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv((sampler), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameteriv, (GLuint sampler, GLenum pname, const GLint *param))
#ifndef glSecondaryColorP3ui
#define glSecondaryColorP3ui(type, color) glatter_glSecondaryColorP3ui((type), (color))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorP3ui, (GLenum type, GLuint color))
#ifndef glSecondaryColorP3uiv
#define glSecondaryColorP3uiv(type, color) glatter_glSecondaryColorP3uiv((type), (color))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorP3uiv, (GLenum type, const GLuint *color))
#ifndef glTexCoordP1ui
#define glTexCoordP1ui(type, coords) glatter_glTexCoordP1ui((type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP1ui, (GLenum type, GLuint coords))
#ifndef glTexCoordP1uiv
#define glTexCoordP1uiv(type, coords) glatter_glTexCoordP1uiv((type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP1uiv, (GLenum type, const GLuint *coords))
#ifndef glTexCoordP2ui
#define glTexCoordP2ui(type, coords) glatter_glTexCoordP2ui((type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP2ui, (GLenum type, GLuint coords))
#ifndef glTexCoordP2uiv
#define glTexCoordP2uiv(type, coords) glatter_glTexCoordP2uiv((type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP2uiv, (GLenum type, const GLuint *coords))
#ifndef glTexCoordP3ui
#define glTexCoordP3ui(type, coords) glatter_glTexCoordP3ui((type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP3ui, (GLenum type, GLuint coords))
#ifndef glTexCoordP3uiv
#define glTexCoordP3uiv(type, coords) glatter_glTexCoordP3uiv((type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP3uiv, (GLenum type, const GLuint *coords))
#ifndef glTexCoordP4ui
#define glTexCoordP4ui(type, coords) glatter_glTexCoordP4ui((type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP4ui, (GLenum type, GLuint coords))
#ifndef glTexCoordP4uiv
#define glTexCoordP4uiv(type, coords) glatter_glTexCoordP4uiv((type), (coords))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP4uiv, (GLenum type, const GLuint *coords))
#ifndef glVertexAttribDivisor
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor((index), (divisor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribDivisor, (GLuint index, GLuint divisor))
#ifndef glVertexAttribP1ui
#define glVertexAttribP1ui(index, type, normalized, value) glatter_glVertexAttribP1ui((index), (type), (normalized), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP1ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#ifndef glVertexAttribP1uiv
#define glVertexAttribP1uiv(index, type, normalized, value) glatter_glVertexAttribP1uiv((index), (type), (normalized), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP1uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#ifndef glVertexAttribP2ui
#define glVertexAttribP2ui(index, type, normalized, value) glatter_glVertexAttribP2ui((index), (type), (normalized), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP2ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#ifndef glVertexAttribP2uiv
#define glVertexAttribP2uiv(index, type, normalized, value) glatter_glVertexAttribP2uiv((index), (type), (normalized), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP2uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#ifndef glVertexAttribP3ui
#define glVertexAttribP3ui(index, type, normalized, value) glatter_glVertexAttribP3ui((index), (type), (normalized), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP3ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#ifndef glVertexAttribP3uiv
#define glVertexAttribP3uiv(index, type, normalized, value) glatter_glVertexAttribP3uiv((index), (type), (normalized), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP3uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#ifndef glVertexAttribP4ui
#define glVertexAttribP4ui(index, type, normalized, value) glatter_glVertexAttribP4ui((index), (type), (normalized), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP4ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#ifndef glVertexAttribP4uiv
#define glVertexAttribP4uiv(index, type, normalized, value) glatter_glVertexAttribP4uiv((index), (type), (normalized), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP4uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#ifndef glVertexP2ui
#define glVertexP2ui(type, value) glatter_glVertexP2ui((type), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexP2ui, (GLenum type, GLuint value))
#ifndef glVertexP2uiv
#define glVertexP2uiv(type, value) glatter_glVertexP2uiv((type), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexP2uiv, (GLenum type, const GLuint *value))
#ifndef glVertexP3ui
#define glVertexP3ui(type, value) glatter_glVertexP3ui((type), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexP3ui, (GLenum type, GLuint value))
#ifndef glVertexP3uiv
#define glVertexP3uiv(type, value) glatter_glVertexP3uiv((type), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexP3uiv, (GLenum type, const GLuint *value))
#ifndef glVertexP4ui
#define glVertexP4ui(type, value) glatter_glVertexP4ui((type), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexP4ui, (GLenum type, GLuint value))
#ifndef glVertexP4uiv
#define glVertexP4uiv(type, value) glatter_glVertexP4uiv((type), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexP4uiv, (GLenum type, const GLuint *value))
#endif // defined(GL_VERSION_3_3)
#if defined(GL_VERSION_4_0)
#ifndef glBeginQueryIndexed
#define glBeginQueryIndexed(target, index, id) glatter_glBeginQueryIndexed((target), (index), (id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBeginQueryIndexed, (GLenum target, GLuint index, GLuint id))
#ifndef glBindTransformFeedback
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback((target), (id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindTransformFeedback, (GLenum target, GLuint id))
#ifndef glBlendEquationSeparatei
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei((buf), (modeRGB), (modeAlpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparatei, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#ifndef glBlendEquationi
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi((buf), (mode))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationi, (GLuint buf, GLenum mode))
#ifndef glBlendFuncSeparatei
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparatei, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#ifndef glBlendFunci
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci((buf), (src), (dst))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlendFunci, (GLuint buf, GLenum src, GLenum dst))
#ifndef glDeleteTransformFeedbacks
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks((n), (ids))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteTransformFeedbacks, (GLsizei n, const GLuint *ids))
#ifndef glDrawArraysIndirect
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect((mode), (indirect))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysIndirect, (GLenum mode, const void *indirect))
#ifndef glDrawElementsIndirect
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect((mode), (type), (indirect))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect))
#ifndef glDrawTransformFeedback
#define glDrawTransformFeedback(mode, id) glatter_glDrawTransformFeedback((mode), (id))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedback, (GLenum mode, GLuint id))
#ifndef glDrawTransformFeedbackStream
#define glDrawTransformFeedbackStream(mode, id, stream) glatter_glDrawTransformFeedbackStream((mode), (id), (stream))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackStream, (GLenum mode, GLuint id, GLuint stream))
#ifndef glEndQueryIndexed
#define glEndQueryIndexed(target, index) glatter_glEndQueryIndexed((target), (index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEndQueryIndexed, (GLenum target, GLuint index))
#ifndef glGenTransformFeedbacks
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks((n), (ids))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenTransformFeedbacks, (GLsizei n, GLuint *ids))
#ifndef glGetActiveSubroutineName
#define glGetActiveSubroutineName(program, shadertype, index, bufSize, length, name) glatter_glGetActiveSubroutineName((program), (shadertype), (index), (bufSize), (length), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineName, (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name))
#ifndef glGetActiveSubroutineUniformName
#define glGetActiveSubroutineUniformName(program, shadertype, index, bufSize, length, name) glatter_glGetActiveSubroutineUniformName((program), (shadertype), (index), (bufSize), (length), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineUniformName, (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name))
#ifndef glGetActiveSubroutineUniformiv
#define glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values) glatter_glGetActiveSubroutineUniformiv((program), (shadertype), (index), (pname), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineUniformiv, (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values))
#ifndef glGetProgramStageiv
#define glGetProgramStageiv(program, shadertype, pname, values) glatter_glGetProgramStageiv((program), (shadertype), (pname), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramStageiv, (GLuint program, GLenum shadertype, GLenum pname, GLint *values))
#ifndef glGetQueryIndexediv
#define glGetQueryIndexediv(target, index, pname, params) glatter_glGetQueryIndexediv((target), (index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryIndexediv, (GLenum target, GLuint index, GLenum pname, GLint *params))
#ifndef glGetSubroutineIndex
#define glGetSubroutineIndex(program, shadertype, name) glatter_glGetSubroutineIndex((program), (shadertype), (name))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glGetSubroutineIndex, (GLuint program, GLenum shadertype, const GLchar *name))
#ifndef glGetSubroutineUniformLocation
#define glGetSubroutineUniformLocation(program, shadertype, name) glatter_glGetSubroutineUniformLocation((program), (shadertype), (name))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glGetSubroutineUniformLocation, (GLuint program, GLenum shadertype, const GLchar *name))
#ifndef glGetUniformSubroutineuiv
#define glGetUniformSubroutineuiv(shadertype, location, params) glatter_glGetUniformSubroutineuiv((shadertype), (location), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUniformSubroutineuiv, (GLenum shadertype, GLint location, GLuint *params))
#ifndef glGetUniformdv
#define glGetUniformdv(program, location, params) glatter_glGetUniformdv((program), (location), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetUniformdv, (GLuint program, GLint location, GLdouble *params))
#ifndef glIsTransformFeedback
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback((id))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTransformFeedback, (GLuint id))
#ifndef glMinSampleShading
#define glMinSampleShading(value) glatter_glMinSampleShading((value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMinSampleShading, (GLfloat value))
#ifndef glPatchParameterfv
#define glPatchParameterfv(pname, values) glatter_glPatchParameterfv((pname), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPatchParameterfv, (GLenum pname, const GLfloat *values))
#ifndef glPatchParameteri
#define glPatchParameteri(pname, value) glatter_glPatchParameteri((pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPatchParameteri, (GLenum pname, GLint value))
#ifndef glPauseTransformFeedback
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback()
#endif
GLATTER_UBLOCK(void, APIENTRY, glPauseTransformFeedback, (void))
#ifndef glResumeTransformFeedback
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback()
#endif
GLATTER_UBLOCK(void, APIENTRY, glResumeTransformFeedback, (void))
#ifndef glUniform1d
#define glUniform1d(location, x) glatter_glUniform1d((location), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1d, (GLint location, GLdouble x))
#ifndef glUniform1dv
#define glUniform1dv(location, count, value) glatter_glUniform1dv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform1dv, (GLint location, GLsizei count, const GLdouble *value))
#ifndef glUniform2d
#define glUniform2d(location, x, y) glatter_glUniform2d((location), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2d, (GLint location, GLdouble x, GLdouble y))
#ifndef glUniform2dv
#define glUniform2dv(location, count, value) glatter_glUniform2dv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform2dv, (GLint location, GLsizei count, const GLdouble *value))
#ifndef glUniform3d
#define glUniform3d(location, x, y, z) glatter_glUniform3d((location), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3d, (GLint location, GLdouble x, GLdouble y, GLdouble z))
#ifndef glUniform3dv
#define glUniform3dv(location, count, value) glatter_glUniform3dv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform3dv, (GLint location, GLsizei count, const GLdouble *value))
#ifndef glUniform4d
#define glUniform4d(location, x, y, z, w) glatter_glUniform4d((location), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4d, (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#ifndef glUniform4dv
#define glUniform4dv(location, count, value) glatter_glUniform4dv((location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniform4dv, (GLint location, GLsizei count, const GLdouble *value))
#ifndef glUniformMatrix2dv
#define glUniformMatrix2dv(location, count, transpose, value) glatter_glUniformMatrix2dv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glUniformMatrix2x3dv
#define glUniformMatrix2x3dv(location, count, transpose, value) glatter_glUniformMatrix2x3dv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glUniformMatrix2x4dv
#define glUniformMatrix2x4dv(location, count, transpose, value) glatter_glUniformMatrix2x4dv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glUniformMatrix3dv
#define glUniformMatrix3dv(location, count, transpose, value) glatter_glUniformMatrix3dv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glUniformMatrix3x2dv
#define glUniformMatrix3x2dv(location, count, transpose, value) glatter_glUniformMatrix3x2dv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glUniformMatrix3x4dv
#define glUniformMatrix3x4dv(location, count, transpose, value) glatter_glUniformMatrix3x4dv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glUniformMatrix4dv
#define glUniformMatrix4dv(location, count, transpose, value) glatter_glUniformMatrix4dv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glUniformMatrix4x2dv
#define glUniformMatrix4x2dv(location, count, transpose, value) glatter_glUniformMatrix4x2dv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glUniformMatrix4x3dv
#define glUniformMatrix4x3dv(location, count, transpose, value) glatter_glUniformMatrix4x3dv((location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glUniformSubroutinesuiv
#define glUniformSubroutinesuiv(shadertype, count, indices) glatter_glUniformSubroutinesuiv((shadertype), (count), (indices))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUniformSubroutinesuiv, (GLenum shadertype, GLsizei count, const GLuint *indices))
#endif // defined(GL_VERSION_4_0)
#if defined(GL_VERSION_4_1)
#ifndef glActiveShaderProgram
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram((pipeline), (program))
#endif
GLATTER_UBLOCK(void, APIENTRY, glActiveShaderProgram, (GLuint pipeline, GLuint program))
#ifndef glBindProgramPipeline
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline((pipeline))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindProgramPipeline, (GLuint pipeline))
#ifndef glClearDepthf
#define glClearDepthf(d) glatter_glClearDepthf((d))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearDepthf, (GLfloat d))
#ifndef glCreateShaderProgramv
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv((type), (count), (strings))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShaderProgramv, (GLenum type, GLsizei count, const GLchar *const*strings))
#ifndef glDeleteProgramPipelines
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines((n), (pipelines))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgramPipelines, (GLsizei n, const GLuint *pipelines))
#ifndef glDepthRangeArrayv
#define glDepthRangeArrayv(first, count, v) glatter_glDepthRangeArrayv((first), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDepthRangeArrayv, (GLuint first, GLsizei count, const GLdouble *v))
#ifndef glDepthRangeIndexed
#define glDepthRangeIndexed(index, n, f) glatter_glDepthRangeIndexed((index), (n), (f))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDepthRangeIndexed, (GLuint index, GLdouble n, GLdouble f))
#ifndef glDepthRangef
#define glDepthRangef(n, f) glatter_glDepthRangef((n), (f))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#ifndef glGenProgramPipelines
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines((n), (pipelines))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenProgramPipelines, (GLsizei n, GLuint *pipelines))
#ifndef glGetDoublei_v
#define glGetDoublei_v(target, index, data) glatter_glGetDoublei_v((target), (index), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetDoublei_v, (GLenum target, GLuint index, GLdouble *data))
#ifndef glGetFloati_v
#define glGetFloati_v(target, index, data) glatter_glGetFloati_v((target), (index), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFloati_v, (GLenum target, GLuint index, GLfloat *data))
#ifndef glGetProgramBinary
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary((program), (bufSize), (length), (binaryFormat), (binary))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramBinary, (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary))
#ifndef glGetProgramPipelineInfoLog
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog((pipeline), (bufSize), (length), (infoLog))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramPipelineInfoLog, (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#ifndef glGetProgramPipelineiv
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv((pipeline), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramPipelineiv, (GLuint pipeline, GLenum pname, GLint *params))
#ifndef glGetShaderPrecisionFormat
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat((shadertype), (precisiontype), (range), (precision))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision))
#ifndef glGetVertexAttribLdv
#define glGetVertexAttribLdv(index, pname, params) glatter_glGetVertexAttribLdv((index), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLdv, (GLuint index, GLenum pname, GLdouble *params))
#ifndef glIsProgramPipeline
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline((pipeline))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgramPipeline, (GLuint pipeline))
#ifndef glProgramBinary
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary((program), (binaryFormat), (binary), (length))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramBinary, (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length))
#ifndef glProgramParameteri
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri((program), (pname), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramParameteri, (GLuint program, GLenum pname, GLint value))
#ifndef glProgramUniform1d
#define glProgramUniform1d(program, location, v0) glatter_glProgramUniform1d((program), (location), (v0))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1d, (GLuint program, GLint location, GLdouble v0))
#ifndef glProgramUniform1dv
#define glProgramUniform1dv(program, location, count, value) glatter_glProgramUniform1dv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#ifndef glProgramUniform1f
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f((program), (location), (v0))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1f, (GLuint program, GLint location, GLfloat v0))
#ifndef glProgramUniform1fv
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#ifndef glProgramUniform1i
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i((program), (location), (v0))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i, (GLuint program, GLint location, GLint v0))
#ifndef glProgramUniform1iv
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#ifndef glProgramUniform1ui
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui((program), (location), (v0))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui, (GLuint program, GLint location, GLuint v0))
#ifndef glProgramUniform1uiv
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#ifndef glProgramUniform2d
#define glProgramUniform2d(program, location, v0, v1) glatter_glProgramUniform2d((program), (location), (v0), (v1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2d, (GLuint program, GLint location, GLdouble v0, GLdouble v1))
#ifndef glProgramUniform2dv
#define glProgramUniform2dv(program, location, count, value) glatter_glProgramUniform2dv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#ifndef glProgramUniform2f
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f((program), (location), (v0), (v1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2f, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#ifndef glProgramUniform2fv
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#ifndef glProgramUniform2i
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i((program), (location), (v0), (v1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i, (GLuint program, GLint location, GLint v0, GLint v1))
#ifndef glProgramUniform2iv
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#ifndef glProgramUniform2ui
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui((program), (location), (v0), (v1))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui, (GLuint program, GLint location, GLuint v0, GLuint v1))
#ifndef glProgramUniform2uiv
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#ifndef glProgramUniform3d
#define glProgramUniform3d(program, location, v0, v1, v2) glatter_glProgramUniform3d((program), (location), (v0), (v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3d, (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2))
#ifndef glProgramUniform3dv
#define glProgramUniform3dv(program, location, count, value) glatter_glProgramUniform3dv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#ifndef glProgramUniform3f
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f((program), (location), (v0), (v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#ifndef glProgramUniform3fv
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#ifndef glProgramUniform3i
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i((program), (location), (v0), (v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#ifndef glProgramUniform3iv
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#ifndef glProgramUniform3ui
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui((program), (location), (v0), (v1), (v2))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#ifndef glProgramUniform3uiv
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#ifndef glProgramUniform4d
#define glProgramUniform4d(program, location, v0, v1, v2, v3) glatter_glProgramUniform4d((program), (location), (v0), (v1), (v2), (v3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4d, (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3))
#ifndef glProgramUniform4dv
#define glProgramUniform4dv(program, location, count, value) glatter_glProgramUniform4dv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#ifndef glProgramUniform4f
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f((program), (location), (v0), (v1), (v2), (v3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#ifndef glProgramUniform4fv
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#ifndef glProgramUniform4i
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i((program), (location), (v0), (v1), (v2), (v3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#ifndef glProgramUniform4iv
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#ifndef glProgramUniform4ui
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui((program), (location), (v0), (v1), (v2), (v3))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#ifndef glProgramUniform4uiv
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv((program), (location), (count), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#ifndef glProgramUniformMatrix2dv
#define glProgramUniformMatrix2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix2fv
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix2x3dv
#define glProgramUniformMatrix2x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix2x3fv
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix2x4dv
#define glProgramUniformMatrix2x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix2x4fv
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix3dv
#define glProgramUniformMatrix3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix3fv
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix3x2dv
#define glProgramUniformMatrix3x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix3x2fv
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix3x4dv
#define glProgramUniformMatrix3x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix3x4fv
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix4dv
#define glProgramUniformMatrix4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix4fv
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix4x2dv
#define glProgramUniformMatrix4x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix4x2fv
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glProgramUniformMatrix4x3dv
#define glProgramUniformMatrix4x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#ifndef glProgramUniformMatrix4x3fv
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv((program), (location), (count), (transpose), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#ifndef glReleaseShaderCompiler
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler()
#endif
GLATTER_UBLOCK(void, APIENTRY, glReleaseShaderCompiler, (void))
#ifndef glScissorArrayv
#define glScissorArrayv(first, count, v) glatter_glScissorArrayv((first), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glScissorArrayv, (GLuint first, GLsizei count, const GLint *v))
#ifndef glScissorIndexed
#define glScissorIndexed(index, left, bottom, width, height) glatter_glScissorIndexed((index), (left), (bottom), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glScissorIndexed, (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height))
#ifndef glScissorIndexedv
#define glScissorIndexedv(index, v) glatter_glScissorIndexedv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glScissorIndexedv, (GLuint index, const GLint *v))
#ifndef glShaderBinary
#define glShaderBinary(count, shaders, binaryFormat, binary, length) glatter_glShaderBinary((count), (shaders), (binaryFormat), (binary), (length))
#endif
GLATTER_UBLOCK(void, APIENTRY, glShaderBinary, (GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length))
#ifndef glUseProgramStages
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages((pipeline), (stages), (program))
#endif
GLATTER_UBLOCK(void, APIENTRY, glUseProgramStages, (GLuint pipeline, GLbitfield stages, GLuint program))
#ifndef glValidateProgramPipeline
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline((pipeline))
#endif
GLATTER_UBLOCK(void, APIENTRY, glValidateProgramPipeline, (GLuint pipeline))
#ifndef glVertexAttribL1d
#define glVertexAttribL1d(index, x) glatter_glVertexAttribL1d((index), (x))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1d, (GLuint index, GLdouble x))
#ifndef glVertexAttribL1dv
#define glVertexAttribL1dv(index, v) glatter_glVertexAttribL1dv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1dv, (GLuint index, const GLdouble *v))
#ifndef glVertexAttribL2d
#define glVertexAttribL2d(index, x, y) glatter_glVertexAttribL2d((index), (x), (y))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2d, (GLuint index, GLdouble x, GLdouble y))
#ifndef glVertexAttribL2dv
#define glVertexAttribL2dv(index, v) glatter_glVertexAttribL2dv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2dv, (GLuint index, const GLdouble *v))
#ifndef glVertexAttribL3d
#define glVertexAttribL3d(index, x, y, z) glatter_glVertexAttribL3d((index), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3d, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#ifndef glVertexAttribL3dv
#define glVertexAttribL3dv(index, v) glatter_glVertexAttribL3dv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3dv, (GLuint index, const GLdouble *v))
#ifndef glVertexAttribL4d
#define glVertexAttribL4d(index, x, y, z, w) glatter_glVertexAttribL4d((index), (x), (y), (z), (w))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4d, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#ifndef glVertexAttribL4dv
#define glVertexAttribL4dv(index, v) glatter_glVertexAttribL4dv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4dv, (GLuint index, const GLdouble *v))
#ifndef glVertexAttribLPointer
#define glVertexAttribLPointer(index, size, type, stride, pointer) glatter_glVertexAttribLPointer((index), (size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#ifndef glViewportArrayv
#define glViewportArrayv(first, count, v) glatter_glViewportArrayv((first), (count), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glViewportArrayv, (GLuint first, GLsizei count, const GLfloat *v))
#ifndef glViewportIndexedf
#define glViewportIndexedf(index, x, y, w, h) glatter_glViewportIndexedf((index), (x), (y), (w), (h))
#endif
GLATTER_UBLOCK(void, APIENTRY, glViewportIndexedf, (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h))
#ifndef glViewportIndexedfv
#define glViewportIndexedfv(index, v) glatter_glViewportIndexedfv((index), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glViewportIndexedfv, (GLuint index, const GLfloat *v))
#endif // defined(GL_VERSION_4_1)
#if defined(GL_VERSION_4_2)
#ifndef glBindImageTexture
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture((unit), (texture), (level), (layered), (layer), (access), (format))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindImageTexture, (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format))
#ifndef glDrawArraysInstancedBaseInstance
#define glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstance((mode), (first), (count), (instancecount), (baseinstance))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedBaseInstance, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance))
#ifndef glDrawElementsInstancedBaseInstance
#define glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstance((mode), (count), (type), (indices), (instancecount), (baseinstance))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseInstance, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance))
#ifndef glDrawElementsInstancedBaseVertexBaseInstance
#define glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstance((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseVertexBaseInstance, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance))
#ifndef glDrawTransformFeedbackInstanced
#define glDrawTransformFeedbackInstanced(mode, id, instancecount) glatter_glDrawTransformFeedbackInstanced((mode), (id), (instancecount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackInstanced, (GLenum mode, GLuint id, GLsizei instancecount))
#ifndef glDrawTransformFeedbackStreamInstanced
#define glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) glatter_glDrawTransformFeedbackStreamInstanced((mode), (id), (stream), (instancecount))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackStreamInstanced, (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount))
#ifndef glGetActiveAtomicCounterBufferiv
#define glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) glatter_glGetActiveAtomicCounterBufferiv((program), (bufferIndex), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAtomicCounterBufferiv, (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params))
#ifndef glGetInternalformativ
#define glGetInternalformativ(target, internalformat, pname, count, params) glatter_glGetInternalformativ((target), (internalformat), (pname), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformativ, (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params))
#ifndef glMemoryBarrier
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier((barriers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrier, (GLbitfield barriers))
#ifndef glTexStorage1D
#define glTexStorage1D(target, levels, internalformat, width) glatter_glTexStorage1D((target), (levels), (internalformat), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexStorage1D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#ifndef glTexStorage2D
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D((target), (levels), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexStorage2D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glTexStorage3D
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D((target), (levels), (internalformat), (width), (height), (depth))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexStorage3D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GL_VERSION_4_2)
#if defined(GL_VERSION_4_3)
#ifndef glBindVertexBuffer
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer((bindingindex), (buffer), (offset), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindVertexBuffer, (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#ifndef glClearBufferData
#define glClearBufferData(target, internalformat, format, type, data) glatter_glClearBufferData((target), (internalformat), (format), (type), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearBufferData, (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data))
#ifndef glClearBufferSubData
#define glClearBufferSubData(target, internalformat, offset, size, format, type, data) glatter_glClearBufferSubData((target), (internalformat), (offset), (size), (format), (type), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearBufferSubData, (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data))
#ifndef glCopyImageSubData
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyImageSubData, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth))
#ifndef glDebugMessageCallback
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback((callback), (userParam))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallback, (GLDEBUGPROC callback, const void *userParam))
#ifndef glDebugMessageControl
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl((source), (type), (severity), (count), (ids), (enabled))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageControl, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#ifndef glDebugMessageInsert
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert((source), (type), (id), (severity), (length), (buf))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsert, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#ifndef glDispatchCompute
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute((num_groups_x), (num_groups_y), (num_groups_z))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDispatchCompute, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z))
#ifndef glDispatchComputeIndirect
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect((indirect))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDispatchComputeIndirect, (GLintptr indirect))
#ifndef glFramebufferParameteri
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFramebufferParameteri, (GLenum target, GLenum pname, GLint param))
#ifndef glGetDebugMessageLog
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLog, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#ifndef glGetFramebufferParameteriv
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetInternalformati64v
#define glGetInternalformati64v(target, internalformat, pname, count, params) glatter_glGetInternalformati64v((target), (internalformat), (pname), (count), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformati64v, (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params))
#ifndef glGetObjectLabel
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel((identifier), (name), (bufSize), (length), (label))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetObjectLabel, (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label))
#ifndef glGetObjectPtrLabel
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel((ptr), (bufSize), (length), (label))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetObjectPtrLabel, (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label))
#ifndef glGetProgramInterfaceiv
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv((program), (programInterface), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramInterfaceiv, (GLuint program, GLenum programInterface, GLenum pname, GLint *params))
#ifndef glGetProgramResourceIndex
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex((program), (programInterface), (name))
#endif
GLATTER_UBLOCK(GLuint, APIENTRY, glGetProgramResourceIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#ifndef glGetProgramResourceLocation
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation((program), (programInterface), (name))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glGetProgramResourceLocation, (GLuint program, GLenum programInterface, const GLchar *name))
#ifndef glGetProgramResourceLocationIndex
#define glGetProgramResourceLocationIndex(program, programInterface, name) glatter_glGetProgramResourceLocationIndex((program), (programInterface), (name))
#endif
GLATTER_UBLOCK(GLint, APIENTRY, glGetProgramResourceLocationIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#ifndef glGetProgramResourceName
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName((program), (programInterface), (index), (bufSize), (length), (name))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourceName, (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name))
#ifndef glGetProgramResourceiv
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, count, length, params) glatter_glGetProgramResourceiv((program), (programInterface), (index), (propCount), (props), (count), (length), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourceiv, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params))
#ifndef glInvalidateBufferData
#define glInvalidateBufferData(buffer) glatter_glInvalidateBufferData((buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glInvalidateBufferData, (GLuint buffer))
#ifndef glInvalidateBufferSubData
#define glInvalidateBufferSubData(buffer, offset, length) glatter_glInvalidateBufferSubData((buffer), (offset), (length))
#endif
GLATTER_UBLOCK(void, APIENTRY, glInvalidateBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr length))
#ifndef glInvalidateFramebuffer
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer((target), (numAttachments), (attachments))
#endif
GLATTER_UBLOCK(void, APIENTRY, glInvalidateFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#ifndef glInvalidateSubFramebuffer
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer((target), (numAttachments), (attachments), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glInvalidateSubFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#ifndef glInvalidateTexImage
#define glInvalidateTexImage(texture, level) glatter_glInvalidateTexImage((texture), (level))
#endif
GLATTER_UBLOCK(void, APIENTRY, glInvalidateTexImage, (GLuint texture, GLint level))
#ifndef glInvalidateTexSubImage
#define glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) glatter_glInvalidateTexSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth))
#endif
GLATTER_UBLOCK(void, APIENTRY, glInvalidateTexSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth))
#ifndef glMultiDrawArraysIndirect
#define glMultiDrawArraysIndirect(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirect((mode), (indirect), (drawcount), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirect, (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride))
#ifndef glMultiDrawElementsIndirect
#define glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirect((mode), (type), (indirect), (drawcount), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride))
#ifndef glObjectLabel
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel((identifier), (name), (length), (label))
#endif
GLATTER_UBLOCK(void, APIENTRY, glObjectLabel, (GLenum identifier, GLuint name, GLsizei length, const GLchar *label))
#ifndef glObjectPtrLabel
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel((ptr), (length), (label))
#endif
GLATTER_UBLOCK(void, APIENTRY, glObjectPtrLabel, (const void *ptr, GLsizei length, const GLchar *label))
#ifndef glPopDebugGroup
#define glPopDebugGroup() glatter_glPopDebugGroup()
#endif
GLATTER_UBLOCK(void, APIENTRY, glPopDebugGroup, (void))
#ifndef glPushDebugGroup
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup((source), (id), (length), (message))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPushDebugGroup, (GLenum source, GLuint id, GLsizei length, const GLchar *message))
#ifndef glShaderStorageBlockBinding
#define glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) glatter_glShaderStorageBlockBinding((program), (storageBlockIndex), (storageBlockBinding))
#endif
GLATTER_UBLOCK(void, APIENTRY, glShaderStorageBlockBinding, (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding))
#ifndef glTexBufferRange
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange((target), (internalformat), (buffer), (offset), (size))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexBufferRange, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#ifndef glTexStorage2DMultisample
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexStorage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#ifndef glTexStorage3DMultisample
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTexStorage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#ifndef glTextureView
#define glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureView((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureView, (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers))
#ifndef glVertexAttribBinding
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding((attribindex), (bindingindex))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribBinding, (GLuint attribindex, GLuint bindingindex))
#ifndef glVertexAttribFormat
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat((attribindex), (size), (type), (normalized), (relativeoffset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribFormat, (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#ifndef glVertexAttribIFormat
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat((attribindex), (size), (type), (relativeoffset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#ifndef glVertexAttribLFormat
#define glVertexAttribLFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribLFormat((attribindex), (size), (type), (relativeoffset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#ifndef glVertexBindingDivisor
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor((bindingindex), (divisor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexBindingDivisor, (GLuint bindingindex, GLuint divisor))
#endif // defined(GL_VERSION_4_3)
#if defined(GL_VERSION_4_4)
#ifndef glBindBuffersBase
#define glBindBuffersBase(target, first, count, buffers) glatter_glBindBuffersBase((target), (first), (count), (buffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindBuffersBase, (GLenum target, GLuint first, GLsizei count, const GLuint *buffers))
#ifndef glBindBuffersRange
#define glBindBuffersRange(target, first, count, buffers, offsets, sizes) glatter_glBindBuffersRange((target), (first), (count), (buffers), (offsets), (sizes))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindBuffersRange, (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes))
#ifndef glBindImageTextures
#define glBindImageTextures(first, count, textures) glatter_glBindImageTextures((first), (count), (textures))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindImageTextures, (GLuint first, GLsizei count, const GLuint *textures))
#ifndef glBindSamplers
#define glBindSamplers(first, count, samplers) glatter_glBindSamplers((first), (count), (samplers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindSamplers, (GLuint first, GLsizei count, const GLuint *samplers))
#ifndef glBindTextures
#define glBindTextures(first, count, textures) glatter_glBindTextures((first), (count), (textures))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindTextures, (GLuint first, GLsizei count, const GLuint *textures))
#ifndef glBindVertexBuffers
#define glBindVertexBuffers(first, count, buffers, offsets, strides) glatter_glBindVertexBuffers((first), (count), (buffers), (offsets), (strides))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindVertexBuffers, (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides))
#ifndef glBufferStorage
#define glBufferStorage(target, size, data, flags) glatter_glBufferStorage((target), (size), (data), (flags))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBufferStorage, (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags))
#ifndef glClearTexImage
#define glClearTexImage(texture, level, format, type, data) glatter_glClearTexImage((texture), (level), (format), (type), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearTexImage, (GLuint texture, GLint level, GLenum format, GLenum type, const void *data))
#ifndef glClearTexSubImage
#define glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearTexSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data))
#endif // defined(GL_VERSION_4_4)
#if defined(GL_VERSION_4_5)
#ifndef glBindTextureUnit
#define glBindTextureUnit(unit, texture) glatter_glBindTextureUnit((unit), (texture))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBindTextureUnit, (GLuint unit, GLuint texture))
#ifndef glBlitNamedFramebuffer
#define glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitNamedFramebuffer((readFramebuffer), (drawFramebuffer), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
#endif
GLATTER_UBLOCK(void, APIENTRY, glBlitNamedFramebuffer, (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#ifndef glCheckNamedFramebufferStatus
#define glCheckNamedFramebufferStatus(framebuffer, target) glatter_glCheckNamedFramebufferStatus((framebuffer), (target))
#endif
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckNamedFramebufferStatus, (GLuint framebuffer, GLenum target))
#ifndef glClearNamedBufferData
#define glClearNamedBufferData(buffer, internalformat, format, type, data) glatter_glClearNamedBufferData((buffer), (internalformat), (format), (type), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferData, (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data))
#ifndef glClearNamedBufferSubData
#define glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubData((buffer), (internalformat), (offset), (size), (format), (type), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferSubData, (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data))
#ifndef glClearNamedFramebufferfi
#define glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil) glatter_glClearNamedFramebufferfi((framebuffer), (buffer), (drawbuffer), (depth), (stencil))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferfi, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#ifndef glClearNamedFramebufferfv
#define glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferfv((framebuffer), (buffer), (drawbuffer), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferfv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value))
#ifndef glClearNamedFramebufferiv
#define glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferiv((framebuffer), (buffer), (drawbuffer), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferiv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value))
#ifndef glClearNamedFramebufferuiv
#define glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferuiv((framebuffer), (buffer), (drawbuffer), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferuiv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value))
#ifndef glClipControl
#define glClipControl(origin, depth) glatter_glClipControl((origin), (depth))
#endif
GLATTER_UBLOCK(void, APIENTRY, glClipControl, (GLenum origin, GLenum depth))
#ifndef glCompressedTextureSubImage1D
#define glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data) glatter_glCompressedTextureSubImage1D((texture), (level), (xoffset), (width), (format), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#ifndef glCompressedTextureSubImage2D
#define glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTextureSubImage2D((texture), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#ifndef glCompressedTextureSubImage3D
#define glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTextureSubImage3D((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#ifndef glCopyNamedBufferSubData
#define glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glCopyNamedBufferSubData((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyNamedBufferSubData, (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#ifndef glCopyTextureSubImage1D
#define glCopyTextureSubImage1D(texture, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1D((texture), (level), (xoffset), (x), (y), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#ifndef glCopyTextureSubImage2D
#define glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2D((texture), (level), (xoffset), (yoffset), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#ifndef glCopyTextureSubImage3D
#define glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3D((texture), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#ifndef glCreateBuffers
#define glCreateBuffers(n, buffers) glatter_glCreateBuffers((n), (buffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCreateBuffers, (GLsizei n, GLuint *buffers))
#ifndef glCreateFramebuffers
#define glCreateFramebuffers(n, framebuffers) glatter_glCreateFramebuffers((n), (framebuffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCreateFramebuffers, (GLsizei n, GLuint *framebuffers))
#ifndef glCreateProgramPipelines
#define glCreateProgramPipelines(n, pipelines) glatter_glCreateProgramPipelines((n), (pipelines))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCreateProgramPipelines, (GLsizei n, GLuint *pipelines))
#ifndef glCreateQueries
#define glCreateQueries(target, n, ids) glatter_glCreateQueries((target), (n), (ids))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCreateQueries, (GLenum target, GLsizei n, GLuint *ids))
#ifndef glCreateRenderbuffers
#define glCreateRenderbuffers(n, renderbuffers) glatter_glCreateRenderbuffers((n), (renderbuffers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCreateRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#ifndef glCreateSamplers
#define glCreateSamplers(n, samplers) glatter_glCreateSamplers((n), (samplers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCreateSamplers, (GLsizei n, GLuint *samplers))
#ifndef glCreateTextures
#define glCreateTextures(target, n, textures) glatter_glCreateTextures((target), (n), (textures))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCreateTextures, (GLenum target, GLsizei n, GLuint *textures))
#ifndef glCreateTransformFeedbacks
#define glCreateTransformFeedbacks(n, ids) glatter_glCreateTransformFeedbacks((n), (ids))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCreateTransformFeedbacks, (GLsizei n, GLuint *ids))
#ifndef glCreateVertexArrays
#define glCreateVertexArrays(n, arrays) glatter_glCreateVertexArrays((n), (arrays))
#endif
GLATTER_UBLOCK(void, APIENTRY, glCreateVertexArrays, (GLsizei n, GLuint *arrays))
#ifndef glDisableVertexArrayAttrib
#define glDisableVertexArrayAttrib(vaobj, index) glatter_glDisableVertexArrayAttrib((vaobj), (index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexArrayAttrib, (GLuint vaobj, GLuint index))
#ifndef glEnableVertexArrayAttrib
#define glEnableVertexArrayAttrib(vaobj, index) glatter_glEnableVertexArrayAttrib((vaobj), (index))
#endif
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexArrayAttrib, (GLuint vaobj, GLuint index))
#ifndef glFlushMappedNamedBufferRange
#define glFlushMappedNamedBufferRange(buffer, offset, length) glatter_glFlushMappedNamedBufferRange((buffer), (offset), (length))
#endif
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedNamedBufferRange, (GLuint buffer, GLintptr offset, GLsizeiptr length))
#ifndef glGenerateTextureMipmap
#define glGenerateTextureMipmap(texture) glatter_glGenerateTextureMipmap((texture))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGenerateTextureMipmap, (GLuint texture))
#ifndef glGetCompressedTextureImage
#define glGetCompressedTextureImage(texture, level, bufSize, pixels) glatter_glGetCompressedTextureImage((texture), (level), (bufSize), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureImage, (GLuint texture, GLint level, GLsizei bufSize, void *pixels))
#ifndef glGetCompressedTextureSubImage
#define glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) glatter_glGetCompressedTextureSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (bufSize), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels))
#ifndef glGetGraphicsResetStatus
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus()
#endif
GLATTER_UBLOCK(GLenum, APIENTRY, glGetGraphicsResetStatus, (void))
#ifndef glGetNamedBufferParameteri64v
#define glGetNamedBufferParameteri64v(buffer, pname, params) glatter_glGetNamedBufferParameteri64v((buffer), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameteri64v, (GLuint buffer, GLenum pname, GLint64 *params))
#ifndef glGetNamedBufferParameteriv
#define glGetNamedBufferParameteriv(buffer, pname, params) glatter_glGetNamedBufferParameteriv((buffer), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameteriv, (GLuint buffer, GLenum pname, GLint *params))
#ifndef glGetNamedBufferPointerv
#define glGetNamedBufferPointerv(buffer, pname, params) glatter_glGetNamedBufferPointerv((buffer), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferPointerv, (GLuint buffer, GLenum pname, void **params))
#ifndef glGetNamedBufferSubData
#define glGetNamedBufferSubData(buffer, offset, size, data) glatter_glGetNamedBufferSubData((buffer), (offset), (size), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data))
#ifndef glGetNamedFramebufferAttachmentParameteriv
#define glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameteriv((framebuffer), (attachment), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferAttachmentParameteriv, (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params))
#ifndef glGetNamedFramebufferParameteriv
#define glGetNamedFramebufferParameteriv(framebuffer, pname, param) glatter_glGetNamedFramebufferParameteriv((framebuffer), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferParameteriv, (GLuint framebuffer, GLenum pname, GLint *param))
#ifndef glGetNamedRenderbufferParameteriv
#define glGetNamedRenderbufferParameteriv(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameteriv((renderbuffer), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetNamedRenderbufferParameteriv, (GLuint renderbuffer, GLenum pname, GLint *params))
#ifndef glGetQueryBufferObjecti64v
#define glGetQueryBufferObjecti64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjecti64v((id), (buffer), (pname), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjecti64v, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#ifndef glGetQueryBufferObjectiv
#define glGetQueryBufferObjectiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectiv((id), (buffer), (pname), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectiv, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#ifndef glGetQueryBufferObjectui64v
#define glGetQueryBufferObjectui64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjectui64v((id), (buffer), (pname), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectui64v, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#ifndef glGetQueryBufferObjectuiv
#define glGetQueryBufferObjectuiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectuiv((id), (buffer), (pname), (offset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectuiv, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#ifndef glGetTextureImage
#define glGetTextureImage(texture, level, format, type, bufSize, pixels) glatter_glGetTextureImage((texture), (level), (format), (type), (bufSize), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureImage, (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#ifndef glGetTextureLevelParameterfv
#define glGetTextureLevelParameterfv(texture, level, pname, params) glatter_glGetTextureLevelParameterfv((texture), (level), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameterfv, (GLuint texture, GLint level, GLenum pname, GLfloat *params))
#ifndef glGetTextureLevelParameteriv
#define glGetTextureLevelParameteriv(texture, level, pname, params) glatter_glGetTextureLevelParameteriv((texture), (level), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameteriv, (GLuint texture, GLint level, GLenum pname, GLint *params))
#ifndef glGetTextureParameterIiv
#define glGetTextureParameterIiv(texture, pname, params) glatter_glGetTextureParameterIiv((texture), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIiv, (GLuint texture, GLenum pname, GLint *params))
#ifndef glGetTextureParameterIuiv
#define glGetTextureParameterIuiv(texture, pname, params) glatter_glGetTextureParameterIuiv((texture), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIuiv, (GLuint texture, GLenum pname, GLuint *params))
#ifndef glGetTextureParameterfv
#define glGetTextureParameterfv(texture, pname, params) glatter_glGetTextureParameterfv((texture), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterfv, (GLuint texture, GLenum pname, GLfloat *params))
#ifndef glGetTextureParameteriv
#define glGetTextureParameteriv(texture, pname, params) glatter_glGetTextureParameteriv((texture), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameteriv, (GLuint texture, GLenum pname, GLint *params))
#ifndef glGetTextureSubImage
#define glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels) glatter_glGetTextureSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (bufSize), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTextureSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#ifndef glGetTransformFeedbacki64_v
#define glGetTransformFeedbacki64_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki64_v((xfb), (pname), (index), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbacki64_v, (GLuint xfb, GLenum pname, GLuint index, GLint64 *param))
#ifndef glGetTransformFeedbacki_v
#define glGetTransformFeedbacki_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki_v((xfb), (pname), (index), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbacki_v, (GLuint xfb, GLenum pname, GLuint index, GLint *param))
#ifndef glGetTransformFeedbackiv
#define glGetTransformFeedbackiv(xfb, pname, param) glatter_glGetTransformFeedbackiv((xfb), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackiv, (GLuint xfb, GLenum pname, GLint *param))
#ifndef glGetVertexArrayIndexed64iv
#define glGetVertexArrayIndexed64iv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexed64iv((vaobj), (index), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIndexed64iv, (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param))
#ifndef glGetVertexArrayIndexediv
#define glGetVertexArrayIndexediv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexediv((vaobj), (index), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIndexediv, (GLuint vaobj, GLuint index, GLenum pname, GLint *param))
#ifndef glGetVertexArrayiv
#define glGetVertexArrayiv(vaobj, pname, param) glatter_glGetVertexArrayiv((vaobj), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayiv, (GLuint vaobj, GLenum pname, GLint *param))
#ifndef glGetnColorTable
#define glGetnColorTable(target, format, type, bufSize, table) glatter_glGetnColorTable((target), (format), (type), (bufSize), (table))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnColorTable, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table))
#ifndef glGetnCompressedTexImage
#define glGetnCompressedTexImage(target, lod, bufSize, pixels) glatter_glGetnCompressedTexImage((target), (lod), (bufSize), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnCompressedTexImage, (GLenum target, GLint lod, GLsizei bufSize, void *pixels))
#ifndef glGetnConvolutionFilter
#define glGetnConvolutionFilter(target, format, type, bufSize, image) glatter_glGetnConvolutionFilter((target), (format), (type), (bufSize), (image))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnConvolutionFilter, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image))
#ifndef glGetnHistogram
#define glGetnHistogram(target, reset, format, type, bufSize, values) glatter_glGetnHistogram((target), (reset), (format), (type), (bufSize), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnHistogram, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values))
#ifndef glGetnMapdv
#define glGetnMapdv(target, query, bufSize, v) glatter_glGetnMapdv((target), (query), (bufSize), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnMapdv, (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v))
#ifndef glGetnMapfv
#define glGetnMapfv(target, query, bufSize, v) glatter_glGetnMapfv((target), (query), (bufSize), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnMapfv, (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v))
#ifndef glGetnMapiv
#define glGetnMapiv(target, query, bufSize, v) glatter_glGetnMapiv((target), (query), (bufSize), (v))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnMapiv, (GLenum target, GLenum query, GLsizei bufSize, GLint *v))
#ifndef glGetnMinmax
#define glGetnMinmax(target, reset, format, type, bufSize, values) glatter_glGetnMinmax((target), (reset), (format), (type), (bufSize), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnMinmax, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values))
#ifndef glGetnPixelMapfv
#define glGetnPixelMapfv(map, bufSize, values) glatter_glGetnPixelMapfv((map), (bufSize), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapfv, (GLenum map, GLsizei bufSize, GLfloat *values))
#ifndef glGetnPixelMapuiv
#define glGetnPixelMapuiv(map, bufSize, values) glatter_glGetnPixelMapuiv((map), (bufSize), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapuiv, (GLenum map, GLsizei bufSize, GLuint *values))
#ifndef glGetnPixelMapusv
#define glGetnPixelMapusv(map, bufSize, values) glatter_glGetnPixelMapusv((map), (bufSize), (values))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapusv, (GLenum map, GLsizei bufSize, GLushort *values))
#ifndef glGetnPolygonStipple
#define glGetnPolygonStipple(bufSize, pattern) glatter_glGetnPolygonStipple((bufSize), (pattern))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnPolygonStipple, (GLsizei bufSize, GLubyte *pattern))
#ifndef glGetnSeparableFilter
#define glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span) glatter_glGetnSeparableFilter((target), (format), (type), (rowBufSize), (row), (columnBufSize), (column), (span))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnSeparableFilter, (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span))
#ifndef glGetnTexImage
#define glGetnTexImage(target, level, format, type, bufSize, pixels) glatter_glGetnTexImage((target), (level), (format), (type), (bufSize), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnTexImage, (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#ifndef glGetnUniformdv
#define glGetnUniformdv(program, location, bufSize, params) glatter_glGetnUniformdv((program), (location), (bufSize), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformdv, (GLuint program, GLint location, GLsizei bufSize, GLdouble *params))
#ifndef glGetnUniformfv
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv((program), (location), (bufSize), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformfv, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#ifndef glGetnUniformiv
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv((program), (location), (bufSize), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformiv, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#ifndef glGetnUniformuiv
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv((program), (location), (bufSize), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformuiv, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#ifndef glInvalidateNamedFramebufferData
#define glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments) glatter_glInvalidateNamedFramebufferData((framebuffer), (numAttachments), (attachments))
#endif
GLATTER_UBLOCK(void, APIENTRY, glInvalidateNamedFramebufferData, (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments))
#ifndef glInvalidateNamedFramebufferSubData
#define glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height) glatter_glInvalidateNamedFramebufferSubData((framebuffer), (numAttachments), (attachments), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glInvalidateNamedFramebufferSubData, (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#ifndef glMapNamedBuffer
#define glMapNamedBuffer(buffer, access) glatter_glMapNamedBuffer((buffer), (access))
#endif
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBuffer, (GLuint buffer, GLenum access))
#ifndef glMapNamedBufferRange
#define glMapNamedBufferRange(buffer, offset, length, access) glatter_glMapNamedBufferRange((buffer), (offset), (length), (access))
#endif
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBufferRange, (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access))
#ifndef glMemoryBarrierByRegion
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion((barriers))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrierByRegion, (GLbitfield barriers))
#ifndef glNamedBufferData
#define glNamedBufferData(buffer, size, data, usage) glatter_glNamedBufferData((buffer), (size), (data), (usage))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferData, (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage))
#ifndef glNamedBufferStorage
#define glNamedBufferStorage(buffer, size, data, flags) glatter_glNamedBufferStorage((buffer), (size), (data), (flags))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferStorage, (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags))
#ifndef glNamedBufferSubData
#define glNamedBufferSubData(buffer, offset, size, data) glatter_glNamedBufferSubData((buffer), (offset), (size), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data))
#ifndef glNamedFramebufferDrawBuffer
#define glNamedFramebufferDrawBuffer(framebuffer, buf) glatter_glNamedFramebufferDrawBuffer((framebuffer), (buf))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferDrawBuffer, (GLuint framebuffer, GLenum buf))
#ifndef glNamedFramebufferDrawBuffers
#define glNamedFramebufferDrawBuffers(framebuffer, n, bufs) glatter_glNamedFramebufferDrawBuffers((framebuffer), (n), (bufs))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferDrawBuffers, (GLuint framebuffer, GLsizei n, const GLenum *bufs))
#ifndef glNamedFramebufferParameteri
#define glNamedFramebufferParameteri(framebuffer, pname, param) glatter_glNamedFramebufferParameteri((framebuffer), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferParameteri, (GLuint framebuffer, GLenum pname, GLint param))
#ifndef glNamedFramebufferReadBuffer
#define glNamedFramebufferReadBuffer(framebuffer, src) glatter_glNamedFramebufferReadBuffer((framebuffer), (src))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferReadBuffer, (GLuint framebuffer, GLenum src))
#ifndef glNamedFramebufferRenderbuffer
#define glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbuffer((framebuffer), (attachment), (renderbuffertarget), (renderbuffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferRenderbuffer, (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#ifndef glNamedFramebufferTexture
#define glNamedFramebufferTexture(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTexture((framebuffer), (attachment), (texture), (level))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level))
#ifndef glNamedFramebufferTextureLayer
#define glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayer((framebuffer), (attachment), (texture), (level), (layer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureLayer, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer))
#ifndef glNamedRenderbufferStorage
#define glNamedRenderbufferStorage(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorage((renderbuffer), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorage, (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glNamedRenderbufferStorageMultisample
#define glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisample((renderbuffer), (samples), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisample, (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glReadnPixels
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels((x), (y), (width), (height), (format), (type), (bufSize), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, glReadnPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#ifndef glTextureBarrier
#define glTextureBarrier() glatter_glTextureBarrier()
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureBarrier, (void))
#ifndef glTextureBuffer
#define glTextureBuffer(texture, internalformat, buffer) glatter_glTextureBuffer((texture), (internalformat), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureBuffer, (GLuint texture, GLenum internalformat, GLuint buffer))
#ifndef glTextureBufferRange
#define glTextureBufferRange(texture, internalformat, buffer, offset, size) glatter_glTextureBufferRange((texture), (internalformat), (buffer), (offset), (size))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureBufferRange, (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#ifndef glTextureParameterIiv
#define glTextureParameterIiv(texture, pname, params) glatter_glTextureParameterIiv((texture), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIiv, (GLuint texture, GLenum pname, const GLint *params))
#ifndef glTextureParameterIuiv
#define glTextureParameterIuiv(texture, pname, params) glatter_glTextureParameterIuiv((texture), (pname), (params))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIuiv, (GLuint texture, GLenum pname, const GLuint *params))
#ifndef glTextureParameterf
#define glTextureParameterf(texture, pname, param) glatter_glTextureParameterf((texture), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterf, (GLuint texture, GLenum pname, GLfloat param))
#ifndef glTextureParameterfv
#define glTextureParameterfv(texture, pname, param) glatter_glTextureParameterfv((texture), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterfv, (GLuint texture, GLenum pname, const GLfloat *param))
#ifndef glTextureParameteri
#define glTextureParameteri(texture, pname, param) glatter_glTextureParameteri((texture), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteri, (GLuint texture, GLenum pname, GLint param))
#ifndef glTextureParameteriv
#define glTextureParameteriv(texture, pname, param) glatter_glTextureParameteriv((texture), (pname), (param))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteriv, (GLuint texture, GLenum pname, const GLint *param))
#ifndef glTextureStorage1D
#define glTextureStorage1D(texture, levels, internalformat, width) glatter_glTextureStorage1D((texture), (levels), (internalformat), (width))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage1D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width))
#ifndef glTextureStorage2D
#define glTextureStorage2D(texture, levels, internalformat, width, height) glatter_glTextureStorage2D((texture), (levels), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glTextureStorage2DMultisample
#define glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisample((texture), (samples), (internalformat), (width), (height), (fixedsamplelocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2DMultisample, (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#ifndef glTextureStorage3D
#define glTextureStorage3D(texture, levels, internalformat, width, height, depth) glatter_glTextureStorage3D((texture), (levels), (internalformat), (width), (height), (depth))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#ifndef glTextureStorage3DMultisample
#define glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisample((texture), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3DMultisample, (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#ifndef glTextureSubImage1D
#define glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1D((texture), (level), (xoffset), (width), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#ifndef glTextureSubImage2D
#define glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2D((texture), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#ifndef glTextureSubImage3D
#define glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3D((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#ifndef glTransformFeedbackBufferBase
#define glTransformFeedbackBufferBase(xfb, index, buffer) glatter_glTransformFeedbackBufferBase((xfb), (index), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackBufferBase, (GLuint xfb, GLuint index, GLuint buffer))
#ifndef glTransformFeedbackBufferRange
#define glTransformFeedbackBufferRange(xfb, index, buffer, offset, size) glatter_glTransformFeedbackBufferRange((xfb), (index), (buffer), (offset), (size))
#endif
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackBufferRange, (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#ifndef glUnmapNamedBuffer
#define glUnmapNamedBuffer(buffer) glatter_glUnmapNamedBuffer((buffer))
#endif
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapNamedBuffer, (GLuint buffer))
#ifndef glVertexArrayAttribBinding
#define glVertexArrayAttribBinding(vaobj, attribindex, bindingindex) glatter_glVertexArrayAttribBinding((vaobj), (attribindex), (bindingindex))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribBinding, (GLuint vaobj, GLuint attribindex, GLuint bindingindex))
#ifndef glVertexArrayAttribFormat
#define glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayAttribFormat((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#ifndef glVertexArrayAttribIFormat
#define glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribIFormat((vaobj), (attribindex), (size), (type), (relativeoffset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribIFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#ifndef glVertexArrayAttribLFormat
#define glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribLFormat((vaobj), (attribindex), (size), (type), (relativeoffset))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribLFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#ifndef glVertexArrayBindingDivisor
#define glVertexArrayBindingDivisor(vaobj, bindingindex, divisor) glatter_glVertexArrayBindingDivisor((vaobj), (bindingindex), (divisor))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayBindingDivisor, (GLuint vaobj, GLuint bindingindex, GLuint divisor))
#ifndef glVertexArrayElementBuffer
#define glVertexArrayElementBuffer(vaobj, buffer) glatter_glVertexArrayElementBuffer((vaobj), (buffer))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayElementBuffer, (GLuint vaobj, GLuint buffer))
#ifndef glVertexArrayVertexBuffer
#define glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayVertexBuffer((vaobj), (bindingindex), (buffer), (offset), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBuffer, (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#ifndef glVertexArrayVertexBuffers
#define glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides) glatter_glVertexArrayVertexBuffers((vaobj), (first), (count), (buffers), (offsets), (strides))
#endif
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBuffers, (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides))
#endif // defined(GL_VERSION_4_5)
#if defined(GL_VERSION_4_6)
#ifndef glMultiDrawArraysIndirectCount
#define glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCount((mode), (indirect), (drawcount), (maxdrawcount), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectCount, (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#ifndef glMultiDrawElementsIndirectCount
#define glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCount((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride))
#endif
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectCount, (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#ifndef glPolygonOffsetClamp
#define glPolygonOffsetClamp(factor, units, clamp) glatter_glPolygonOffsetClamp((factor), (units), (clamp))
#endif
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffsetClamp, (GLfloat factor, GLfloat units, GLfloat clamp))
#ifndef glSpecializeShader
#define glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) glatter_glSpecializeShader((shader), (pEntryPoint), (numSpecializationConstants), (pConstantIndex), (pConstantValue))
#endif
GLATTER_UBLOCK(void, APIENTRY, glSpecializeShader, (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue))
#endif // defined(__gl_glext_h_)
#endif // defined(GL_VERSION_4_6)
#endif // GLATTER_GL

