/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4702)
#endif

GLATTER_INLINE_OR_NOT
const char* enum_to_string_WGL(GLATTER_ENUM_WGL e)
{
    switch (e) {
#if defined(WGL_AMD_gpu_association)
        case 0x1f00: return "WGL_GPU_VENDOR_AMD";
        case 0x1f01: return "WGL_GPU_RENDERER_STRING_AMD";
        case 0x1f02: return "WGL_GPU_OPENGL_VERSION_STRING_AMD";
#endif
        case 0x2000:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_NUMBER_PIXEL_FORMATS_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_NUMBER_PIXEL_FORMATS_EXT";
#endif
            break;
        case 0x2001:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_DRAW_TO_WINDOW_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_DRAW_TO_WINDOW_EXT";
#endif
            break;
        case 0x2002:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_DRAW_TO_BITMAP_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_DRAW_TO_BITMAP_EXT";
#endif
            break;
        case 0x2003:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_ACCELERATION_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_ACCELERATION_EXT";
#endif
            break;
        case 0x2004:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_NEED_PALETTE_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_NEED_PALETTE_EXT";
#endif
            break;
        case 0x2005:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_NEED_SYSTEM_PALETTE_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_NEED_SYSTEM_PALETTE_EXT";
#endif
            break;
        case 0x2006:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_SWAP_LAYER_BUFFERS_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_SWAP_LAYER_BUFFERS_EXT";
#endif
            break;
        case 0x2007:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_SWAP_METHOD_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_SWAP_METHOD_EXT";
#endif
            break;
        case 0x2008:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_NUMBER_OVERLAYS_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_NUMBER_OVERLAYS_EXT";
#endif
            break;
        case 0x2009:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_NUMBER_UNDERLAYS_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_NUMBER_UNDERLAYS_EXT";
#endif
            break;
        case 0x200a:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_TRANSPARENT_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_TRANSPARENT_EXT";
#endif
            break;
#if defined(WGL_EXT_pixel_format)
        case 0x200b: return "WGL_TRANSPARENT_VALUE_EXT";
#endif
        case 0x200c:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_SHARE_DEPTH_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_SHARE_DEPTH_EXT";
#endif
            break;
        case 0x200d:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_SHARE_STENCIL_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_SHARE_STENCIL_EXT";
#endif
            break;
        case 0x200e:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_SHARE_ACCUM_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_SHARE_ACCUM_EXT";
#endif
            break;
        case 0x200f:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_SUPPORT_GDI_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_SUPPORT_GDI_EXT";
#endif
            break;
        case 0x2010:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_SUPPORT_OPENGL_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_SUPPORT_OPENGL_EXT";
#endif
            break;
        case 0x2011:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_DOUBLE_BUFFER_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_DOUBLE_BUFFER_EXT";
#endif
            break;
        case 0x2012:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_STEREO_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_STEREO_EXT";
#endif
            break;
        case 0x2013:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_PIXEL_TYPE_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_PIXEL_TYPE_EXT";
#endif
            break;
        case 0x2016:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_RED_SHIFT_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_RED_SHIFT_EXT";
#endif
            break;
        case 0x2018:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_GREEN_SHIFT_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_GREEN_SHIFT_EXT";
#endif
            break;
        case 0x201a:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_BLUE_SHIFT_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_BLUE_SHIFT_EXT";
#endif
            break;
        case 0x201c:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_ALPHA_SHIFT_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_ALPHA_SHIFT_EXT";
#endif
            break;
        case 0x2024:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_AUX_BUFFERS_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_AUX_BUFFERS_EXT";
#endif
            break;
        case 0x2025:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_NO_ACCELERATION_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_NO_ACCELERATION_EXT";
#endif
            break;
        case 0x2026:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_GENERIC_ACCELERATION_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_GENERIC_ACCELERATION_EXT";
#endif
            break;
        case 0x2027:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_FULL_ACCELERATION_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_FULL_ACCELERATION_EXT";
#endif
            break;
        case 0x2028:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_SWAP_EXCHANGE_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_SWAP_EXCHANGE_EXT";
#endif
            break;
        case 0x2029:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_SWAP_COPY_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_SWAP_COPY_EXT";
#endif
            break;
        case 0x202a:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_SWAP_UNDEFINED_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_SWAP_UNDEFINED_EXT";
#endif
            break;
        case 0x202b:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_TYPE_RGBA_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_TYPE_RGBA_EXT";
#endif
            break;
        case 0x202c:
#if defined(WGL_ARB_pixel_format)
                    return "WGL_TYPE_COLORINDEX_ARB";
#endif
#if defined(WGL_EXT_pixel_format)
                    return "WGL_TYPE_COLORINDEX_EXT";
#endif
            break;
        case 0x202d:
#if defined(WGL_ARB_pbuffer)
                    return "WGL_DRAW_TO_PBUFFER_ARB";
#endif
#if defined(WGL_EXT_pbuffer)
                    return "WGL_DRAW_TO_PBUFFER_EXT";
#endif
            break;
        case 0x202e:
#if defined(WGL_ARB_pbuffer)
                    return "WGL_MAX_PBUFFER_PIXELS_ARB";
#endif
#if defined(WGL_EXT_pbuffer)
                    return "WGL_MAX_PBUFFER_PIXELS_EXT";
#endif
            break;
        case 0x202f:
#if defined(WGL_ARB_pbuffer)
                    return "WGL_MAX_PBUFFER_WIDTH_ARB";
#endif
#if defined(WGL_EXT_pbuffer)
                    return "WGL_MAX_PBUFFER_WIDTH_EXT";
#endif
            break;
        case 0x2030:
#if defined(WGL_ARB_pbuffer)
                    return "WGL_MAX_PBUFFER_HEIGHT_ARB";
#endif
#if defined(WGL_EXT_pbuffer)
                    return "WGL_MAX_PBUFFER_HEIGHT_EXT";
#endif
            break;
#if defined(WGL_EXT_pbuffer)
        case 0x2031: return "WGL_OPTIMAL_PBUFFER_WIDTH_EXT";
        case 0x2032: return "WGL_OPTIMAL_PBUFFER_HEIGHT_EXT";
#endif
        case 0x2033:
#if defined(WGL_ARB_pbuffer)
                    return "WGL_PBUFFER_LARGEST_ARB";
#endif
#if defined(WGL_EXT_pbuffer)
                    return "WGL_PBUFFER_LARGEST_EXT";
#endif
            break;
        case 0x2034:
#if defined(WGL_ARB_pbuffer)
                    return "WGL_PBUFFER_WIDTH_ARB";
#endif
#if defined(WGL_EXT_pbuffer)
                    return "WGL_PBUFFER_WIDTH_EXT";
#endif
            break;
        case 0x2035:
#if defined(WGL_ARB_pbuffer)
                    return "WGL_PBUFFER_HEIGHT_ARB";
#endif
#if defined(WGL_EXT_pbuffer)
                    return "WGL_PBUFFER_HEIGHT_EXT";
#endif
            break;
#if defined(WGL_ARB_pbuffer)
        case 0x2036: return "WGL_PBUFFER_LOST_ARB";
#endif
#if defined(WGL_ARB_pixel_format)
        case 0x2037: return "WGL_TRANSPARENT_RED_VALUE_ARB";
        case 0x2038: return "WGL_TRANSPARENT_GREEN_VALUE_ARB";
        case 0x2039: return "WGL_TRANSPARENT_BLUE_VALUE_ARB";
        case 0x203a: return "WGL_TRANSPARENT_ALPHA_VALUE_ARB";
        case 0x203b: return "WGL_TRANSPARENT_INDEX_VALUE_ARB";
#endif
#if defined(WGL_EXT_depth_float)
        case 0x2040: return "WGL_DEPTH_FLOAT_EXT";
#endif
        case 0x2041:
#if defined(WGL_ARB_multisample)
                    return "WGL_SAMPLE_BUFFERS_ARB";
#endif
#if defined(WGL_EXT_multisample)
                    return "WGL_SAMPLE_BUFFERS_EXT";
#endif
            break;
        case 0x2042:
#if defined(WGL_NV_multisample_coverage)
                    return "WGL_COVERAGE_SAMPLES_NV";
#endif
#if defined(WGL_ARB_multisample)
                    return "WGL_SAMPLES_ARB";
#endif
#if defined(WGL_EXT_multisample)
                    return "WGL_SAMPLES_EXT";
#endif
            break;
#if defined(WGL_I3D_genlock)
        case 0x2044: return "WGL_GENLOCK_SOURCE_MULTIVIEW_I3D";
        case 0x2045: return "WGL_GENLOCK_SOURCE_EXTERNAL_SYNC_I3D";
        case 0x2046: return "WGL_GENLOCK_SOURCE_EXTERNAL_FIELD_I3D";
        case 0x2047: return "WGL_GENLOCK_SOURCE_EXTERNAL_TTL_I3D";
        case 0x2048: return "WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D";
        case 0x2049: return "WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D";
        case 0x204a: return "WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D";
        case 0x204b: return "WGL_GENLOCK_SOURCE_EDGE_RISING_I3D";
        case 0x204c: return "WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D";
#endif
#if defined(WGL_I3D_gamma)
        case 0x204e: return "WGL_GAMMA_TABLE_SIZE_I3D";
        case 0x204f: return "WGL_GAMMA_EXCLUDE_DESKTOP_I3D";
#endif
#if defined(WGL_I3D_digital_video_control)
        case 0x2050: return "WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D";
        case 0x2051: return "WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D";
        case 0x2052: return "WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D";
        case 0x2053: return "WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D";
#endif
#if defined(WGL_3DL_stereo_control)
        case 0x2055: return "WGL_STEREO_EMITTER_ENABLE_3DL";
        case 0x2056: return "WGL_STEREO_EMITTER_DISABLE_3DL";
        case 0x2057: return "WGL_STEREO_POLARITY_NORMAL_3DL";
        case 0x2058: return "WGL_STEREO_POLARITY_INVERT_3DL";
#endif
#if defined(WGL_3DFX_multisample)
        case 0x2060: return "WGL_SAMPLE_BUFFERS_3DFX";
        case 0x2061: return "WGL_SAMPLES_3DFX";
#endif
#if defined(WGL_ARB_render_texture)
        case 0x2070: return "WGL_BIND_TO_TEXTURE_RGB_ARB";
        case 0x2071: return "WGL_BIND_TO_TEXTURE_RGBA_ARB";
        case 0x2072: return "WGL_TEXTURE_FORMAT_ARB";
        case 0x2073: return "WGL_TEXTURE_TARGET_ARB";
        case 0x2074: return "WGL_MIPMAP_TEXTURE_ARB";
        case 0x2075: return "WGL_TEXTURE_RGB_ARB";
        case 0x2076: return "WGL_TEXTURE_RGBA_ARB";
        case 0x2077: return "WGL_NO_TEXTURE_ARB";
        case 0x2078: return "WGL_TEXTURE_CUBE_MAP_ARB";
        case 0x2079: return "WGL_TEXTURE_1D_ARB";
        case 0x207a: return "WGL_TEXTURE_2D_ARB";
        case 0x207b: return "WGL_MIPMAP_LEVEL_ARB";
        case 0x207c: return "WGL_CUBE_MAP_FACE_ARB";
        case 0x207d: return "WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB";
        case 0x207e: return "WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB";
        case 0x207f: return "WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB";
        case 0x2080: return "WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB";
        case 0x2081: return "WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB";
        case 0x2082: return "WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB";
        case 0x2083: return "WGL_FRONT_LEFT_ARB";
        case 0x2084: return "WGL_FRONT_RIGHT_ARB";
        case 0x2085: return "WGL_BACK_LEFT_ARB";
        case 0x2086: return "WGL_BACK_RIGHT_ARB";
        case 0x2087: return "WGL_AUX0_ARB";
        case 0x2088: return "WGL_AUX1_ARB";
        case 0x2089: return "WGL_AUX2_ARB";
        case 0x208a: return "WGL_AUX3_ARB";
        case 0x208b: return "WGL_AUX4_ARB";
        case 0x208c: return "WGL_AUX5_ARB";
        case 0x208d: return "WGL_AUX6_ARB";
        case 0x208e: return "WGL_AUX7_ARB";
        case 0x208f: return "WGL_AUX8_ARB";
        case 0x2090: return "WGL_AUX9_ARB";
#endif
#if defined(WGL_ARB_create_context)
        case 0x2091: return "WGL_CONTEXT_MAJOR_VERSION_ARB";
        case 0x2092: return "WGL_CONTEXT_MINOR_VERSION_ARB";
        case 0x2093: return "WGL_CONTEXT_LAYER_PLANE_ARB";
        case 0x2094: return "WGL_CONTEXT_FLAGS_ARB";
#endif
#if defined(WGL_ARB_context_flush_control)
        case 0x2097: return "WGL_CONTEXT_RELEASE_BEHAVIOR_ARB";
        case 0x2098: return "WGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB";
#endif
#if defined(WGL_NV_render_texture_rectangle)
        case 0x20a0: return "WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV";
        case 0x20a1: return "WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV";
        case 0x20a2: return "WGL_TEXTURE_RECTANGLE_NV";
#endif
#if defined(WGL_NV_render_depth_texture)
        case 0x20a3: return "WGL_BIND_TO_TEXTURE_DEPTH_NV";
        case 0x20a4: return "WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV";
        case 0x20a5: return "WGL_DEPTH_TEXTURE_FORMAT_NV";
        case 0x20a6: return "WGL_TEXTURE_DEPTH_COMPONENT_NV";
        case 0x20a7: return "WGL_DEPTH_COMPONENT_NV";
#endif
#if defined(WGL_EXT_pixel_format_packed_float)
        case 0x20a8: return "WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT";
#endif
        case 0x20a9:
#if defined(WGL_ARB_framebuffer_sRGB)
                    return "WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB";
#endif
#if defined(WGL_EXT_framebuffer_sRGB)
                    return "WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT";
#endif
            break;
#if defined(WGL_NV_multigpu_context)
        case 0x20aa: return "WGL_CONTEXT_MULTIGPU_ATTRIB_NV";
        case 0x20ab: return "WGL_CONTEXT_MULTIGPU_ATTRIB_SINGLE_NV";
        case 0x20ac: return "WGL_CONTEXT_MULTIGPU_ATTRIB_AFR_NV";
        case 0x20ad: return "WGL_CONTEXT_MULTIGPU_ATTRIB_MULTICAST_NV";
        case 0x20ae: return "WGL_CONTEXT_MULTIGPU_ATTRIB_MULTI_DISPLAY_MULTICAST_NV";
#endif
#if defined(WGL_NV_float_buffer)
        case 0x20b0: return "WGL_FLOAT_COMPONENTS_NV";
        case 0x20b1: return "WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV";
        case 0x20b2: return "WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV";
        case 0x20b3: return "WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV";
        case 0x20b4: return "WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV";
        case 0x20b5: return "WGL_TEXTURE_FLOAT_R_NV";
        case 0x20b6: return "WGL_TEXTURE_FLOAT_RG_NV";
        case 0x20b7: return "WGL_TEXTURE_FLOAT_RGB_NV";
        case 0x20b8: return "WGL_TEXTURE_FLOAT_RGBA_NV";
#endif
#if defined(WGL_NV_multisample_coverage)
        case 0x20b9: return "WGL_COLOR_SAMPLES_NV";
#endif
#if defined(WGL_NV_video_output)
        case 0x20c0: return "WGL_BIND_TO_VIDEO_RGB_NV";
        case 0x20c1: return "WGL_BIND_TO_VIDEO_RGBA_NV";
        case 0x20c2: return "WGL_BIND_TO_VIDEO_RGB_AND_DEPTH_NV";
        case 0x20c3: return "WGL_VIDEO_OUT_COLOR_NV";
        case 0x20c4: return "WGL_VIDEO_OUT_ALPHA_NV";
        case 0x20c5: return "WGL_VIDEO_OUT_DEPTH_NV";
        case 0x20c6: return "WGL_VIDEO_OUT_COLOR_AND_ALPHA_NV";
        case 0x20c7: return "WGL_VIDEO_OUT_COLOR_AND_DEPTH_NV";
        case 0x20c8: return "WGL_VIDEO_OUT_FRAME";
        case 0x20c9: return "WGL_VIDEO_OUT_FIELD_1";
        case 0x20ca: return "WGL_VIDEO_OUT_FIELD_2";
        case 0x20cb: return "WGL_VIDEO_OUT_STACKED_FIELDS_1_2";
        case 0x20cc: return "WGL_VIDEO_OUT_STACKED_FIELDS_2_1";
#endif
#if defined(WGL_NV_video_capture)
        case 0x20ce: return "WGL_UNIQUE_ID_NV";
        case 0x20cf: return "WGL_NUM_VIDEO_CAPTURE_SLOTS_NV";
#endif
#if defined(WGL_NV_present_video)
        case 0x20f0: return "WGL_NUM_VIDEO_SLOTS_NV";
#endif
        case 0x21a0:
#if defined(WGL_ARB_pixel_format_float)
                    return "WGL_TYPE_RGBA_FLOAT_ARB";
#endif
#if defined(WGL_ATI_pixel_format_float)
                    return "WGL_TYPE_RGBA_FLOAT_ATI";
#endif
            break;
#if defined(WGL_AMD_gpu_association)
        case 0x21a2: return "WGL_GPU_FASTEST_TARGET_GPUS_AMD";
        case 0x21a3: return "WGL_GPU_RAM_AMD";
        case 0x21a4: return "WGL_GPU_CLOCK_AMD";
#endif
        case 0x21a5:
#if defined(WGL_AMD_gpu_association)
                    return "WGL_GPU_NUM_PIPES_AMD";
#endif
#if defined(WGL_ATI_render_texture_rectangle)
                    return "WGL_TEXTURE_RECTANGLE_ATI";
#endif
            break;
#if defined(WGL_AMD_gpu_association)
        case 0x21a6: return "WGL_GPU_NUM_SIMD_AMD";
        case 0x21a7: return "WGL_GPU_NUM_RB_AMD";
        case 0x21a8: return "WGL_GPU_NUM_SPI_AMD";
#endif
#if defined(WGL_EXT_colorspace)
        case 0x3089: return "WGL_COLORSPACE_SRGB_EXT";
        case 0x308a: return "WGL_COLORSPACE_LINEAR_EXT";
        case 0x309d: return "WGL_COLORSPACE_EXT";
#endif
#if defined(WGL_ARB_create_context_no_error)
        case 0x31b3: return "WGL_CONTEXT_OPENGL_NO_ERROR_ARB";
#endif
#if defined(WGL_ARB_create_context_robustness)
        case 0x8252: return "WGL_LOSE_CONTEXT_ON_RESET_ARB";
        case 0x8256: return "WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB";
        case 0x8261: return "WGL_NO_RESET_NOTIFICATION_ARB";
#endif
#if defined(WGL_ARB_create_context_profile)
        case 0x9126: return "WGL_CONTEXT_PROFILE_MASK_ARB";
#endif
    }
    return "<UNKNOWN ENUM>";
}

#ifdef _MSC_VER
#pragma warning(pop) 
#endif

