/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_WGL
#if defined(__wgl_wglext_h_)
#if defined(WGL_3DL_stereo_control)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglSetStereoEmitterState3DL, (hDC, uState), (HDC hDC, UINT uState))
#define wglSetStereoEmitterState3DL_defined
#endif // defined(WGL_3DL_stereo_control)
#if defined(WGL_AMD_gpu_association)
GLATTER_FBLOCK(, WGL, , VOID, WINAPI, wglBlitContextFramebufferAMD, (dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter), (HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define wglBlitContextFramebufferAMD_defined
GLATTER_FBLOCK(return, WGL, , HGLRC, WINAPI, wglCreateAssociatedContextAMD, (id), (UINT id))
#define wglCreateAssociatedContextAMD_defined
GLATTER_FBLOCK(return, WGL, , HGLRC, WINAPI, wglCreateAssociatedContextAttribsAMD, (id, hShareContext, attribList), (UINT id, HGLRC hShareContext, const int *attribList))
#define wglCreateAssociatedContextAttribsAMD_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglDeleteAssociatedContextAMD, (hglrc), (HGLRC hglrc))
#define wglDeleteAssociatedContextAMD_defined
GLATTER_FBLOCK(return, WGL, , UINT, WINAPI, wglGetContextGPUIDAMD, (hglrc), (HGLRC hglrc))
#define wglGetContextGPUIDAMD_defined
GLATTER_FBLOCK(return, WGL, , HGLRC, WINAPI, wglGetCurrentAssociatedContextAMD, (), (void))
#define wglGetCurrentAssociatedContextAMD_defined
GLATTER_FBLOCK(return, WGL, , UINT, WINAPI, wglGetGPUIDsAMD, (maxCount, ids), (UINT maxCount, UINT *ids))
#define wglGetGPUIDsAMD_defined
GLATTER_FBLOCK(return, WGL, , INT, WINAPI, wglGetGPUInfoAMD, (id, property, dataType, size, data), (UINT id, INT property, GLenum dataType, UINT size, void *data))
#define wglGetGPUInfoAMD_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglMakeAssociatedContextCurrentAMD, (hglrc), (HGLRC hglrc))
#define wglMakeAssociatedContextCurrentAMD_defined
#endif // defined(WGL_AMD_gpu_association)
#if defined(WGL_ARB_buffer_region)
GLATTER_FBLOCK(return, WGL, , HANDLE, WINAPI, wglCreateBufferRegionARB, (hDC, iLayerPlane, uType), (HDC hDC, int iLayerPlane, UINT uType))
#define wglCreateBufferRegionARB_defined
GLATTER_FBLOCK(, WGL, , VOID, WINAPI, wglDeleteBufferRegionARB, (hRegion), (HANDLE hRegion))
#define wglDeleteBufferRegionARB_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglRestoreBufferRegionARB, (hRegion, x, y, width, height, xSrc, ySrc), (HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc))
#define wglRestoreBufferRegionARB_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglSaveBufferRegionARB, (hRegion, x, y, width, height), (HANDLE hRegion, int x, int y, int width, int height))
#define wglSaveBufferRegionARB_defined
#endif // defined(WGL_ARB_buffer_region)
#if defined(WGL_ARB_create_context)
GLATTER_FBLOCK(return, WGL, , HGLRC, WINAPI, wglCreateContextAttribsARB, (hDC, hShareContext, attribList), (HDC hDC, HGLRC hShareContext, const int *attribList))
#define wglCreateContextAttribsARB_defined
#endif // defined(WGL_ARB_create_context)
#if defined(WGL_ARB_extensions_string)
GLATTER_FBLOCK(return, WGL, , const char *, WINAPI, wglGetExtensionsStringARB, (hdc), (HDC hdc))
#define wglGetExtensionsStringARB_defined
#endif // defined(WGL_ARB_extensions_string)
#if defined(WGL_ARB_make_current_read)
GLATTER_FBLOCK(return, WGL, , HDC, WINAPI, wglGetCurrentReadDCARB, (), (void))
#define wglGetCurrentReadDCARB_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglMakeContextCurrentARB, (hDrawDC, hReadDC, hglrc), (HDC hDrawDC, HDC hReadDC, HGLRC hglrc))
#define wglMakeContextCurrentARB_defined
#endif // defined(WGL_ARB_make_current_read)
#if defined(WGL_ARB_pbuffer)
GLATTER_FBLOCK(return, WGL, , HPBUFFERARB, WINAPI, wglCreatePbufferARB, (hDC, iPixelFormat, iWidth, iHeight, piAttribList), (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList))
#define wglCreatePbufferARB_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglDestroyPbufferARB, (hPbuffer), (HPBUFFERARB hPbuffer))
#define wglDestroyPbufferARB_defined
GLATTER_FBLOCK(return, WGL, , HDC, WINAPI, wglGetPbufferDCARB, (hPbuffer), (HPBUFFERARB hPbuffer))
#define wglGetPbufferDCARB_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglQueryPbufferARB, (hPbuffer, iAttribute, piValue), (HPBUFFERARB hPbuffer, int iAttribute, int *piValue))
#define wglQueryPbufferARB_defined
GLATTER_FBLOCK(return, WGL, , int, WINAPI, wglReleasePbufferDCARB, (hPbuffer, hDC), (HPBUFFERARB hPbuffer, HDC hDC))
#define wglReleasePbufferDCARB_defined
#endif // defined(WGL_ARB_pbuffer)
#if defined(WGL_ARB_pixel_format)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglChoosePixelFormatARB, (hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats), (HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats))
#define wglChoosePixelFormatARB_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetPixelFormatAttribfvARB, (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues), (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues))
#define wglGetPixelFormatAttribfvARB_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetPixelFormatAttribivARB, (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues), (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues))
#define wglGetPixelFormatAttribivARB_defined
#endif // defined(WGL_ARB_pixel_format)
#if defined(WGL_ARB_render_texture)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglBindTexImageARB, (hPbuffer, iBuffer), (HPBUFFERARB hPbuffer, int iBuffer))
#define wglBindTexImageARB_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglReleaseTexImageARB, (hPbuffer, iBuffer), (HPBUFFERARB hPbuffer, int iBuffer))
#define wglReleaseTexImageARB_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglSetPbufferAttribARB, (hPbuffer, piAttribList), (HPBUFFERARB hPbuffer, const int *piAttribList))
#define wglSetPbufferAttribARB_defined
#endif // defined(WGL_ARB_render_texture)
#if defined(WGL_EXT_display_color_table)
GLATTER_FBLOCK(return, WGL, , GLboolean, WINAPI, wglBindDisplayColorTableEXT, (id), (GLushort id))
#define wglBindDisplayColorTableEXT_defined
GLATTER_FBLOCK(return, WGL, , GLboolean, WINAPI, wglCreateDisplayColorTableEXT, (id), (GLushort id))
#define wglCreateDisplayColorTableEXT_defined
GLATTER_FBLOCK(, WGL, , VOID, WINAPI, wglDestroyDisplayColorTableEXT, (id), (GLushort id))
#define wglDestroyDisplayColorTableEXT_defined
GLATTER_FBLOCK(return, WGL, , GLboolean, WINAPI, wglLoadDisplayColorTableEXT, (table, length), (const GLushort *table, GLuint length))
#define wglLoadDisplayColorTableEXT_defined
#endif // defined(WGL_EXT_display_color_table)
#if defined(WGL_EXT_extensions_string)
GLATTER_FBLOCK(return, WGL, , const char *, WINAPI, wglGetExtensionsStringEXT, (), (void))
#define wglGetExtensionsStringEXT_defined
#endif // defined(WGL_EXT_extensions_string)
#if defined(WGL_EXT_make_current_read)
GLATTER_FBLOCK(return, WGL, , HDC, WINAPI, wglGetCurrentReadDCEXT, (), (void))
#define wglGetCurrentReadDCEXT_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglMakeContextCurrentEXT, (hDrawDC, hReadDC, hglrc), (HDC hDrawDC, HDC hReadDC, HGLRC hglrc))
#define wglMakeContextCurrentEXT_defined
#endif // defined(WGL_EXT_make_current_read)
#if defined(WGL_EXT_pbuffer)
GLATTER_FBLOCK(return, WGL, , HPBUFFEREXT, WINAPI, wglCreatePbufferEXT, (hDC, iPixelFormat, iWidth, iHeight, piAttribList), (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList))
#define wglCreatePbufferEXT_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglDestroyPbufferEXT, (hPbuffer), (HPBUFFEREXT hPbuffer))
#define wglDestroyPbufferEXT_defined
GLATTER_FBLOCK(return, WGL, , HDC, WINAPI, wglGetPbufferDCEXT, (hPbuffer), (HPBUFFEREXT hPbuffer))
#define wglGetPbufferDCEXT_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglQueryPbufferEXT, (hPbuffer, iAttribute, piValue), (HPBUFFEREXT hPbuffer, int iAttribute, int *piValue))
#define wglQueryPbufferEXT_defined
GLATTER_FBLOCK(return, WGL, , int, WINAPI, wglReleasePbufferDCEXT, (hPbuffer, hDC), (HPBUFFEREXT hPbuffer, HDC hDC))
#define wglReleasePbufferDCEXT_defined
#endif // defined(WGL_EXT_pbuffer)
#if defined(WGL_EXT_pixel_format)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglChoosePixelFormatEXT, (hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats), (HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats))
#define wglChoosePixelFormatEXT_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetPixelFormatAttribfvEXT, (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues), (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, FLOAT *pfValues))
#define wglGetPixelFormatAttribfvEXT_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetPixelFormatAttribivEXT, (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues), (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, int *piValues))
#define wglGetPixelFormatAttribivEXT_defined
#endif // defined(WGL_EXT_pixel_format)
#if defined(WGL_EXT_swap_control)
GLATTER_FBLOCK(return, WGL, , int, WINAPI, wglGetSwapIntervalEXT, (), (void))
#define wglGetSwapIntervalEXT_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglSwapIntervalEXT, (interval), (int interval))
#define wglSwapIntervalEXT_defined
#endif // defined(WGL_EXT_swap_control)
#if defined(WGL_I3D_digital_video_control)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetDigitalVideoParametersI3D, (hDC, iAttribute, piValue), (HDC hDC, int iAttribute, int *piValue))
#define wglGetDigitalVideoParametersI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglSetDigitalVideoParametersI3D, (hDC, iAttribute, piValue), (HDC hDC, int iAttribute, const int *piValue))
#define wglSetDigitalVideoParametersI3D_defined
#endif // defined(WGL_I3D_digital_video_control)
#if defined(WGL_I3D_gamma)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetGammaTableI3D, (hDC, iEntries, puRed, puGreen, puBlue), (HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue))
#define wglGetGammaTableI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetGammaTableParametersI3D, (hDC, iAttribute, piValue), (HDC hDC, int iAttribute, int *piValue))
#define wglGetGammaTableParametersI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglSetGammaTableI3D, (hDC, iEntries, puRed, puGreen, puBlue), (HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue))
#define wglSetGammaTableI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglSetGammaTableParametersI3D, (hDC, iAttribute, piValue), (HDC hDC, int iAttribute, const int *piValue))
#define wglSetGammaTableParametersI3D_defined
#endif // defined(WGL_I3D_gamma)
#if defined(WGL_I3D_genlock)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglDisableGenlockI3D, (hDC), (HDC hDC))
#define wglDisableGenlockI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglEnableGenlockI3D, (hDC), (HDC hDC))
#define wglEnableGenlockI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGenlockSampleRateI3D, (hDC, uRate), (HDC hDC, UINT uRate))
#define wglGenlockSampleRateI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGenlockSourceDelayI3D, (hDC, uDelay), (HDC hDC, UINT uDelay))
#define wglGenlockSourceDelayI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGenlockSourceEdgeI3D, (hDC, uEdge), (HDC hDC, UINT uEdge))
#define wglGenlockSourceEdgeI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGenlockSourceI3D, (hDC, uSource), (HDC hDC, UINT uSource))
#define wglGenlockSourceI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetGenlockSampleRateI3D, (hDC, uRate), (HDC hDC, UINT *uRate))
#define wglGetGenlockSampleRateI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetGenlockSourceDelayI3D, (hDC, uDelay), (HDC hDC, UINT *uDelay))
#define wglGetGenlockSourceDelayI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetGenlockSourceEdgeI3D, (hDC, uEdge), (HDC hDC, UINT *uEdge))
#define wglGetGenlockSourceEdgeI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetGenlockSourceI3D, (hDC, uSource), (HDC hDC, UINT *uSource))
#define wglGetGenlockSourceI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglIsEnabledGenlockI3D, (hDC, pFlag), (HDC hDC, BOOL *pFlag))
#define wglIsEnabledGenlockI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglQueryGenlockMaxSourceDelayI3D, (hDC, uMaxLineDelay, uMaxPixelDelay), (HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay))
#define wglQueryGenlockMaxSourceDelayI3D_defined
#endif // defined(WGL_I3D_genlock)
#if defined(WGL_I3D_image_buffer)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglAssociateImageBufferEventsI3D, (hDC, pEvent, pAddress, pSize, count), (HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count))
#define wglAssociateImageBufferEventsI3D_defined
GLATTER_FBLOCK(return, WGL, , LPVOID, WINAPI, wglCreateImageBufferI3D, (hDC, dwSize, uFlags), (HDC hDC, DWORD dwSize, UINT uFlags))
#define wglCreateImageBufferI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglDestroyImageBufferI3D, (hDC, pAddress), (HDC hDC, LPVOID pAddress))
#define wglDestroyImageBufferI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglReleaseImageBufferEventsI3D, (hDC, pAddress, count), (HDC hDC, const LPVOID *pAddress, UINT count))
#define wglReleaseImageBufferEventsI3D_defined
#endif // defined(WGL_I3D_image_buffer)
#if defined(WGL_I3D_swap_frame_lock)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglDisableFrameLockI3D, (), (void))
#define wglDisableFrameLockI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglEnableFrameLockI3D, (), (void))
#define wglEnableFrameLockI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglIsEnabledFrameLockI3D, (pFlag), (BOOL *pFlag))
#define wglIsEnabledFrameLockI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglQueryFrameLockMasterI3D, (pFlag), (BOOL *pFlag))
#define wglQueryFrameLockMasterI3D_defined
#endif // defined(WGL_I3D_swap_frame_lock)
#if defined(WGL_I3D_swap_frame_usage)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglBeginFrameTrackingI3D, (), (void))
#define wglBeginFrameTrackingI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglEndFrameTrackingI3D, (), (void))
#define wglEndFrameTrackingI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetFrameUsageI3D, (pUsage), (float *pUsage))
#define wglGetFrameUsageI3D_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglQueryFrameTrackingI3D, (pFrameCount, pMissedFrames, pLastMissedUsage), (DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage))
#define wglQueryFrameTrackingI3D_defined
#endif // defined(WGL_I3D_swap_frame_usage)
#if defined(WGL_NV_DX_interop)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglDXCloseDeviceNV, (hDevice), (HANDLE hDevice))
#define wglDXCloseDeviceNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglDXLockObjectsNV, (hDevice, count, hObjects), (HANDLE hDevice, GLint count, HANDLE *hObjects))
#define wglDXLockObjectsNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglDXObjectAccessNV, (hObject, access), (HANDLE hObject, GLenum access))
#define wglDXObjectAccessNV_defined
GLATTER_FBLOCK(return, WGL, , HANDLE, WINAPI, wglDXOpenDeviceNV, (dxDevice), (void *dxDevice))
#define wglDXOpenDeviceNV_defined
GLATTER_FBLOCK(return, WGL, , HANDLE, WINAPI, wglDXRegisterObjectNV, (hDevice, dxObject, name, type, access), (HANDLE hDevice, void *dxObject, GLuint name, GLenum type, GLenum access))
#define wglDXRegisterObjectNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglDXSetResourceShareHandleNV, (dxObject, shareHandle), (void *dxObject, HANDLE shareHandle))
#define wglDXSetResourceShareHandleNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglDXUnlockObjectsNV, (hDevice, count, hObjects), (HANDLE hDevice, GLint count, HANDLE *hObjects))
#define wglDXUnlockObjectsNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglDXUnregisterObjectNV, (hDevice, hObject), (HANDLE hDevice, HANDLE hObject))
#define wglDXUnregisterObjectNV_defined
#endif // defined(WGL_NV_DX_interop)
#if defined(WGL_NV_copy_image)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglCopyImageSubDataNV, (hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth), (HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth))
#define wglCopyImageSubDataNV_defined
#endif // defined(WGL_NV_copy_image)
#if defined(WGL_NV_delay_before_swap)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglDelayBeforeSwapNV, (hDC, seconds), (HDC hDC, GLfloat seconds))
#define wglDelayBeforeSwapNV_defined
#endif // defined(WGL_NV_delay_before_swap)
#if defined(WGL_NV_gpu_affinity)
GLATTER_FBLOCK(return, WGL, , HDC, WINAPI, wglCreateAffinityDCNV, (phGpuList), (const HGPUNV *phGpuList))
#define wglCreateAffinityDCNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglDeleteDCNV, (hdc), (HDC hdc))
#define wglDeleteDCNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglEnumGpuDevicesNV, (hGpu, iDeviceIndex, lpGpuDevice), (HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice))
#define wglEnumGpuDevicesNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglEnumGpusFromAffinityDCNV, (hAffinityDC, iGpuIndex, hGpu), (HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu))
#define wglEnumGpusFromAffinityDCNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglEnumGpusNV, (iGpuIndex, phGpu), (UINT iGpuIndex, HGPUNV *phGpu))
#define wglEnumGpusNV_defined
#endif // defined(WGL_NV_gpu_affinity)
#if defined(WGL_NV_present_video)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglBindVideoDeviceNV, (hDc, uVideoSlot, hVideoDevice, piAttribList), (HDC hDc, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList))
#define wglBindVideoDeviceNV_defined
GLATTER_FBLOCK(return, WGL, , int, WINAPI, wglEnumerateVideoDevicesNV, (hDc, phDeviceList), (HDC hDc, HVIDEOOUTPUTDEVICENV *phDeviceList))
#define wglEnumerateVideoDevicesNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglQueryCurrentContextNV, (iAttribute, piValue), (int iAttribute, int *piValue))
#define wglQueryCurrentContextNV_defined
#endif // defined(WGL_NV_present_video)
#if defined(WGL_NV_swap_group)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglBindSwapBarrierNV, (group, barrier), (GLuint group, GLuint barrier))
#define wglBindSwapBarrierNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglJoinSwapGroupNV, (hDC, group), (HDC hDC, GLuint group))
#define wglJoinSwapGroupNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglQueryFrameCountNV, (hDC, count), (HDC hDC, GLuint *count))
#define wglQueryFrameCountNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglQueryMaxSwapGroupsNV, (hDC, maxGroups, maxBarriers), (HDC hDC, GLuint *maxGroups, GLuint *maxBarriers))
#define wglQueryMaxSwapGroupsNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglQuerySwapGroupNV, (hDC, group, barrier), (HDC hDC, GLuint *group, GLuint *barrier))
#define wglQuerySwapGroupNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglResetFrameCountNV, (hDC), (HDC hDC))
#define wglResetFrameCountNV_defined
#endif // defined(WGL_NV_swap_group)
#if defined(WGL_NV_vertex_array_range)
GLATTER_FBLOCK(return, WGL, , void *, WINAPI, wglAllocateMemoryNV, (size, readfreq, writefreq, priority), (GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority))
#define wglAllocateMemoryNV_defined
GLATTER_FBLOCK(, WGL, , void, WINAPI, wglFreeMemoryNV, (pointer), (void *pointer))
#define wglFreeMemoryNV_defined
#endif // defined(WGL_NV_vertex_array_range)
#if defined(WGL_NV_video_capture)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglBindVideoCaptureDeviceNV, (uVideoSlot, hDevice), (UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice))
#define wglBindVideoCaptureDeviceNV_defined
GLATTER_FBLOCK(return, WGL, , UINT, WINAPI, wglEnumerateVideoCaptureDevicesNV, (hDc, phDeviceList), (HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList))
#define wglEnumerateVideoCaptureDevicesNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglLockVideoCaptureDeviceNV, (hDc, hDevice), (HDC hDc, HVIDEOINPUTDEVICENV hDevice))
#define wglLockVideoCaptureDeviceNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglQueryVideoCaptureDeviceNV, (hDc, hDevice, iAttribute, piValue), (HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue))
#define wglQueryVideoCaptureDeviceNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglReleaseVideoCaptureDeviceNV, (hDc, hDevice), (HDC hDc, HVIDEOINPUTDEVICENV hDevice))
#define wglReleaseVideoCaptureDeviceNV_defined
#endif // defined(WGL_NV_video_capture)
#if defined(WGL_NV_video_output)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglBindVideoImageNV, (hVideoDevice, hPbuffer, iVideoBuffer), (HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer))
#define wglBindVideoImageNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetVideoDeviceNV, (hDC, numDevices, hVideoDevice), (HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice))
#define wglGetVideoDeviceNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetVideoInfoNV, (hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo), (HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo))
#define wglGetVideoInfoNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglReleaseVideoDeviceNV, (hVideoDevice), (HPVIDEODEV hVideoDevice))
#define wglReleaseVideoDeviceNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglReleaseVideoImageNV, (hPbuffer, iVideoBuffer), (HPBUFFERARB hPbuffer, int iVideoBuffer))
#define wglReleaseVideoImageNV_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglSendPbufferToVideoNV, (hPbuffer, iBufferType, pulCounterPbuffer, bBlock), (HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock))
#define wglSendPbufferToVideoNV_defined
#endif // defined(WGL_NV_video_output)
#if defined(WGL_OML_sync_control)
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetMscRateOML, (hdc, numerator, denominator), (HDC hdc, INT32 *numerator, INT32 *denominator))
#define wglGetMscRateOML_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglGetSyncValuesOML, (hdc, ust, msc, sbc), (HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc))
#define wglGetSyncValuesOML_defined
GLATTER_FBLOCK(return, WGL, , INT64, WINAPI, wglSwapBuffersMscOML, (hdc, target_msc, divisor, remainder), (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder))
#define wglSwapBuffersMscOML_defined
GLATTER_FBLOCK(return, WGL, , INT64, WINAPI, wglSwapLayerBuffersMscOML, (hdc, fuPlanes, target_msc, divisor, remainder), (HDC hdc, INT fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder))
#define wglSwapLayerBuffersMscOML_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglWaitForMscOML, (hdc, target_msc, divisor, remainder, ust, msc, sbc), (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc))
#define wglWaitForMscOML_defined
GLATTER_FBLOCK(return, WGL, , BOOL, WINAPI, wglWaitForSbcOML, (hdc, target_sbc, ust, msc, sbc), (HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc))
#define wglWaitForSbcOML_defined
#endif // defined(__wgl_wglext_h_)
#endif // defined(WGL_OML_sync_control)
#endif // GLATTER_WGL

