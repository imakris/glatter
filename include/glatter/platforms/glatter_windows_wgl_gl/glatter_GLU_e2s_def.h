/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4702)
#endif

GLATTER_INLINE_OR_NOT
const char* enum_to_string_GLU(GLATTER_ENUM_GLU e)
{
    switch (e) {
#if defined(__GLU_H__)
        case 0x186a0: return "GLU_SMOOTH";
        case 0x186a1: return "GLU_FLAT";
        case 0x186a2: return "GLU_NONE";
        case 0x186aa: return "GLU_POINT";
        case 0x186ab: return "GLU_LINE";
        case 0x186ac: return "GLU_FILL";
        case 0x186ad: return "GLU_SILHOUETTE";
        case 0x186b4: return "GLU_OUTSIDE";
        case 0x186b5: return "GLU_INSIDE";
        case 0x18704: return "GLU_TESS_BEGIN";
        case 0x18705: return "GLU_TESS_VERTEX";
        case 0x18706: return "GLU_TESS_END";
        case 0x18707: return "GLU_TESS_ERROR";
        case 0x18708: return "GLU_TESS_EDGE_FLAG";
        case 0x18709: return "GLU_TESS_COMBINE";
        case 0x1870a: return "GLU_TESS_BEGIN_DATA";
        case 0x1870b: return "GLU_TESS_VERTEX_DATA";
        case 0x1870c: return "GLU_TESS_END_DATA";
        case 0x1870d: return "GLU_TESS_ERROR_DATA";
        case 0x1870e: return "GLU_TESS_EDGE_FLAG_DATA";
        case 0x1870f: return "GLU_TESS_COMBINE_DATA";
        case 0x18718: return "GLU_CW";
        case 0x18719: return "GLU_CCW";
        case 0x1871a: return "GLU_INTERIOR";
        case 0x1871b: return "GLU_EXTERIOR";
        case 0x1871c: return "GLU_UNKNOWN";
        case 0x18722: return "GLU_TESS_WINDING_ODD";
        case 0x18723: return "GLU_TESS_WINDING_NONZERO";
        case 0x18724: return "GLU_TESS_WINDING_POSITIVE";
        case 0x18725: return "GLU_TESS_WINDING_NEGATIVE";
        case 0x18726: return "GLU_TESS_WINDING_ABS_GEQ_TWO";
        case 0x1872c: return "GLU_TESS_WINDING_RULE";
        case 0x1872d: return "GLU_TESS_BOUNDARY_ONLY";
        case 0x1872e: return "GLU_TESS_TOLERANCE";
        case 0x18737: return "GLU_TESS_ERROR1";
        case 0x18738: return "GLU_TESS_ERROR2";
        case 0x18739: return "GLU_TESS_ERROR3";
        case 0x1873a: return "GLU_TESS_ERROR4";
        case 0x1873b: return "GLU_TESS_ERROR5";
        case 0x1873c: return "GLU_TESS_ERROR6";
        case 0x1873d: return "GLU_TESS_ERROR7";
        case 0x1873e: return "GLU_TESS_ERROR8";
        case 0x18768: return "GLU_AUTO_LOAD_MATRIX";
        case 0x18769: return "GLU_CULLING";
        case 0x1876a: return "GLU_PARAMETRIC_TOLERANCE";
        case 0x1876b: return "GLU_SAMPLING_TOLERANCE";
        case 0x1876c: return "GLU_DISPLAY_MODE";
        case 0x1876d: return "GLU_SAMPLING_METHOD";
        case 0x1876e: return "GLU_U_STEP";
        case 0x1876f: return "GLU_V_STEP";
        case 0x18772: return "GLU_MAP1_TRIM_2";
        case 0x18773: return "GLU_MAP1_TRIM_3";
        case 0x18777: return "GLU_PATH_LENGTH";
        case 0x18778: return "GLU_PARAMETRIC_ERROR";
        case 0x18779: return "GLU_DOMAIN_DISTANCE";
        case 0x18790: return "GLU_OUTLINE_POLYGON";
        case 0x18791: return "GLU_OUTLINE_PATCH";
        case 0x1879b: return "GLU_NURBS_ERROR1";
        case 0x1879c: return "GLU_NURBS_ERROR2";
        case 0x1879d: return "GLU_NURBS_ERROR3";
        case 0x1879e: return "GLU_NURBS_ERROR4";
        case 0x1879f: return "GLU_NURBS_ERROR5";
        case 0x187a0: return "GLU_NURBS_ERROR6";
        case 0x187a1: return "GLU_NURBS_ERROR7";
        case 0x187a2: return "GLU_NURBS_ERROR8";
        case 0x187a3: return "GLU_NURBS_ERROR9";
        case 0x187a4: return "GLU_NURBS_ERROR10";
        case 0x187a5: return "GLU_NURBS_ERROR11";
        case 0x187a6: return "GLU_NURBS_ERROR12";
        case 0x187a7: return "GLU_NURBS_ERROR13";
        case 0x187a8: return "GLU_NURBS_ERROR14";
        case 0x187a9: return "GLU_NURBS_ERROR15";
        case 0x187aa: return "GLU_NURBS_ERROR16";
        case 0x187ab: return "GLU_NURBS_ERROR17";
        case 0x187ac: return "GLU_NURBS_ERROR18";
        case 0x187ad: return "GLU_NURBS_ERROR19";
        case 0x187ae: return "GLU_NURBS_ERROR20";
        case 0x187af: return "GLU_NURBS_ERROR21";
        case 0x187b0: return "GLU_NURBS_ERROR22";
        case 0x187b1: return "GLU_NURBS_ERROR23";
        case 0x187b2: return "GLU_NURBS_ERROR24";
        case 0x187b3: return "GLU_NURBS_ERROR25";
        case 0x187b4: return "GLU_NURBS_ERROR26";
        case 0x187b5: return "GLU_NURBS_ERROR27";
        case 0x187b6: return "GLU_NURBS_ERROR28";
        case 0x187b7: return "GLU_NURBS_ERROR29";
        case 0x187b8: return "GLU_NURBS_ERROR30";
        case 0x187b9: return "GLU_NURBS_ERROR31";
        case 0x187ba: return "GLU_NURBS_ERROR32";
        case 0x187bb: return "GLU_NURBS_ERROR33";
        case 0x187bc: return "GLU_NURBS_ERROR34";
        case 0x187bd: return "GLU_NURBS_ERROR35";
        case 0x187be: return "GLU_NURBS_ERROR36";
        case 0x187bf: return "GLU_NURBS_ERROR37";
        case 0x189c0: return "GLU_VERSION";
        case 0x189c1: return "GLU_EXTENSIONS";
        case 0x18a24: return "GLU_INVALID_ENUM";
        case 0x18a25: return "GLU_INVALID_VALUE";
        case 0x18a26: return "GLU_OUT_OF_MEMORY";
        case 0x18a27: return "GLU_INCOMPATIBLE_GL_VERSION";
#endif
    }
    return "<UNKNOWN ENUM>";
}

#ifdef _MSC_VER
#pragma warning(pop) 
#endif

